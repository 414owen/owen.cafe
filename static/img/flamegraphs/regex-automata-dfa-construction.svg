<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="214569867"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,768,756 samples, 0.82%)</title><rect x="0.0021%" y="181" width="0.8243%" height="15" fill="rgb(227,0,7)" fg:x="4573" fg:w="1768756"/><text x="0.2521%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,768,756 samples, 0.82%)</title><rect x="0.0021%" y="165" width="0.8243%" height="15" fill="rgb(217,0,24)" fg:x="4573" fg:w="1768756"/><text x="0.2521%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,768,756 samples, 0.82%)</title><rect x="0.0021%" y="149" width="0.8243%" height="15" fill="rgb(221,193,54)" fg:x="4573" fg:w="1768756"/><text x="0.2521%" y="159.50"></text></g><g><title>&lt;regex_automata::dfa::minimize::StateSet as core::clone::Clone&gt;::clone (2,560,930 samples, 1.19%)</title><rect x="0.8265%" y="181" width="1.1935%" height="15" fill="rgb(248,212,6)" fg:x="1773329" fg:w="2560930"/><text x="1.0765%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,560,930 samples, 1.19%)</title><rect x="0.8265%" y="165" width="1.1935%" height="15" fill="rgb(208,68,35)" fg:x="1773329" fg:w="2560930"/><text x="1.0765%" y="175.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (2,560,930 samples, 1.19%)</title><rect x="0.8265%" y="149" width="1.1935%" height="15" fill="rgb(232,128,0)" fg:x="1773329" fg:w="2560930"/><text x="1.0765%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2,560,930 samples, 1.19%)</title><rect x="0.8265%" y="133" width="1.1935%" height="15" fill="rgb(207,160,47)" fg:x="1773329" fg:w="2560930"/><text x="1.0765%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2,560,930 samples, 1.19%)</title><rect x="0.8265%" y="117" width="1.1935%" height="15" fill="rgb(228,23,34)" fg:x="1773329" fg:w="2560930"/><text x="1.0765%" y="127.50"></text></g><g><title>core::mem::replace (2,560,930 samples, 1.19%)</title><rect x="0.8265%" y="101" width="1.1935%" height="15" fill="rgb(218,30,26)" fg:x="1773329" fg:w="2560930"/><text x="1.0765%" y="111.50"></text></g><g><title>core::ptr::write (2,560,930 samples, 1.19%)</title><rect x="0.8265%" y="85" width="1.1935%" height="15" fill="rgb(220,122,19)" fg:x="1773329" fg:w="2560930"/><text x="1.0765%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (13,772,173 samples, 6.42%)</title><rect x="2.0200%" y="181" width="6.4185%" height="15" fill="rgb(250,228,42)" fg:x="4334259" fg:w="13772173"/><text x="2.2700%" y="191.50">alloc::v..</text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::dfa::minimize::StateSet]&gt; (13,772,173 samples, 6.42%)</title><rect x="2.0200%" y="165" width="6.4185%" height="15" fill="rgb(240,193,28)" fg:x="4334259" fg:w="13772173"/><text x="2.2700%" y="175.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::dfa::minimize::StateSet&gt; (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="149" width="4.7776%" height="15" fill="rgb(216,20,37)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="159.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;&gt;&gt; (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="133" width="4.7776%" height="15" fill="rgb(206,188,39)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="143.50">core::..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="117" width="4.7776%" height="15" fill="rgb(217,207,13)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="127.50">&lt;alloc..</text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="101" width="4.7776%" height="15" fill="rgb(231,73,38)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="111.50">alloc:..</text></g><g><title>core::cell::Cell&lt;T&gt;::set (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="85" width="4.7776%" height="15" fill="rgb(225,20,46)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="95.50">core::..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="69" width="4.7776%" height="15" fill="rgb(210,31,41)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="79.50">core::..</text></g><g><title>core::mem::replace (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="53" width="4.7776%" height="15" fill="rgb(221,200,47)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="63.50">core::..</text></g><g><title>core::ptr::write (10,251,333 samples, 4.78%)</title><rect x="3.6609%" y="37" width="4.7776%" height="15" fill="rgb(226,26,5)" fg:x="7855099" fg:w="10251333"/><text x="3.9109%" y="47.50">core::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,557,787 samples, 0.73%)</title><rect x="8.4385%" y="181" width="0.7260%" height="15" fill="rgb(249,33,26)" fg:x="18106432" fg:w="1557787"/><text x="8.6885%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15,514,198 samples, 7.23%)</title><rect x="51.2921%" y="133" width="7.2304%" height="15" fill="rgb(235,183,28)" fg:x="110057493" fg:w="15514198"/><text x="51.5421%" y="143.50">&lt;core::ptr..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (70,150,241 samples, 32.69%)</title><rect x="41.9112%" y="149" width="32.6934%" height="15" fill="rgb(221,5,38)" fg:x="89928866" fg:w="70150241"/><text x="42.1612%" y="159.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (34,507,416 samples, 16.08%)</title><rect x="58.5225%" y="133" width="16.0821%" height="15" fill="rgb(247,18,42)" fg:x="125571691" fg:w="34507416"/><text x="58.7725%" y="143.50">&lt;core::slice::iter::Iter&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (34,507,416 samples, 16.08%)</title><rect x="58.5225%" y="117" width="16.0821%" height="15" fill="rgb(241,131,45)" fg:x="125571691" fg:w="34507416"/><text x="58.7725%" y="127.50">core::slice::iter::Iter&lt;T..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (34,507,416 samples, 16.08%)</title><rect x="58.5225%" y="101" width="16.0821%" height="15" fill="rgb(249,31,29)" fg:x="125571691" fg:w="34507416"/><text x="58.7725%" y="111.50">core::ptr::non_null::NonN..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (78,975,338 samples, 36.81%)</title><rect x="41.9112%" y="165" width="36.8064%" height="15" fill="rgb(225,111,53)" fg:x="89928866" fg:w="78975338"/><text x="42.1612%" y="175.50">&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::trai..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (8,825,097 samples, 4.11%)</title><rect x="74.6047%" y="149" width="4.1129%" height="15" fill="rgb(238,160,17)" fg:x="160079107" fg:w="8825097"/><text x="74.8547%" y="159.50">core..</text></g><g><title>&lt;regex_automata::util::primitives::StateID as core::clone::Clone&gt;::clone (8,825,097 samples, 4.11%)</title><rect x="74.6047%" y="133" width="4.1129%" height="15" fill="rgb(214,148,48)" fg:x="160079107" fg:w="8825097"/><text x="74.8547%" y="143.50">&lt;reg..</text></g><g><title>&lt;regex_automata::util::primitives::StateID as core::cmp::PartialEq&gt;::eq (6,061,181 samples, 2.82%)</title><rect x="78.7176%" y="165" width="2.8248%" height="15" fill="rgb(232,36,49)" fg:x="168904204" fg:w="6061181"/><text x="78.9676%" y="175.50">&lt;r..</text></g><g><title>&lt;regex_automata::util::primitives::SmallIndex as core::cmp::PartialEq&gt;::eq (6,061,181 samples, 2.82%)</title><rect x="78.7176%" y="149" width="2.8248%" height="15" fill="rgb(209,103,24)" fg:x="168904204" fg:w="6061181"/><text x="78.9676%" y="159.50">&lt;r..</text></g><g><title>core::cell::is_reading (1,767,460 samples, 0.82%)</title><rect x="81.5424%" y="117" width="0.8237%" height="15" fill="rgb(229,88,8)" fg:x="174965385" fg:w="1767460"/><text x="81.7924%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (3,492,896 samples, 1.63%)</title><rect x="81.5424%" y="165" width="1.6279%" height="15" fill="rgb(213,181,19)" fg:x="174965385" fg:w="3492896"/><text x="81.7924%" y="175.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (3,492,896 samples, 1.63%)</title><rect x="81.5424%" y="149" width="1.6279%" height="15" fill="rgb(254,191,54)" fg:x="174965385" fg:w="3492896"/><text x="81.7924%" y="159.50"></text></g><g><title>core::cell::BorrowRef::new (3,492,896 samples, 1.63%)</title><rect x="81.5424%" y="133" width="1.6279%" height="15" fill="rgb(241,83,37)" fg:x="174965385" fg:w="3492896"/><text x="81.7924%" y="143.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (1,725,436 samples, 0.80%)</title><rect x="82.3661%" y="117" width="0.8041%" height="15" fill="rgb(233,36,39)" fg:x="176732845" fg:w="1725436"/><text x="82.6161%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;&gt; (3,669,090 samples, 1.71%)</title><rect x="83.1702%" y="165" width="1.7100%" height="15" fill="rgb(226,3,54)" fg:x="178458281" fg:w="3669090"/><text x="83.4202%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (3,669,090 samples, 1.71%)</title><rect x="83.1702%" y="149" width="1.7100%" height="15" fill="rgb(245,192,40)" fg:x="178458281" fg:w="3669090"/><text x="83.4202%" y="159.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (3,669,090 samples, 1.71%)</title><rect x="83.1702%" y="133" width="1.7100%" height="15" fill="rgb(238,167,29)" fg:x="178458281" fg:w="3669090"/><text x="83.4202%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3,669,090 samples, 1.71%)</title><rect x="83.1702%" y="117" width="1.7100%" height="15" fill="rgb(232,182,51)" fg:x="178458281" fg:w="3669090"/><text x="83.4202%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3,669,090 samples, 1.71%)</title><rect x="83.1702%" y="101" width="1.7100%" height="15" fill="rgb(231,60,39)" fg:x="178458281" fg:w="3669090"/><text x="83.4202%" y="111.50"></text></g><g><title>core::mem::replace (3,669,090 samples, 1.71%)</title><rect x="83.1702%" y="85" width="1.7100%" height="15" fill="rgb(208,69,12)" fg:x="178458281" fg:w="3669090"/><text x="83.4202%" y="95.50"></text></g><g><title>core::ptr::write (3,669,090 samples, 1.71%)</title><rect x="83.1702%" y="69" width="1.7100%" height="15" fill="rgb(235,93,37)" fg:x="178458281" fg:w="3669090"/><text x="83.4202%" y="79.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,515,667 samples, 1.64%)</title><rect x="84.8802%" y="149" width="1.6385%" height="15" fill="rgb(213,116,39)" fg:x="182127371" fg:w="3515667"/><text x="85.1302%" y="159.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::inner (3,515,667 samples, 1.64%)</title><rect x="84.8802%" y="133" width="1.6385%" height="15" fill="rgb(222,207,29)" fg:x="182127371" fg:w="3515667"/><text x="85.1302%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3,515,667 samples, 1.64%)</title><rect x="84.8802%" y="117" width="1.6385%" height="15" fill="rgb(206,96,30)" fg:x="182127371" fg:w="3515667"/><text x="85.1302%" y="127.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::clear (5,281,464 samples, 2.46%)</title><rect x="84.8802%" y="165" width="2.4614%" height="15" fill="rgb(218,138,4)" fg:x="182127371" fg:w="5281464"/><text x="85.1302%" y="175.50">re..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1,765,797 samples, 0.82%)</title><rect x="86.5187%" y="149" width="0.8229%" height="15" fill="rgb(250,191,14)" fg:x="185643038" fg:w="1765797"/><text x="86.7687%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1,765,797 samples, 0.82%)</title><rect x="86.5187%" y="133" width="0.8229%" height="15" fill="rgb(239,60,40)" fg:x="185643038" fg:w="1765797"/><text x="86.7687%" y="143.50"></text></g><g><title>core::cell::BorrowRefMut::new (1,765,797 samples, 0.82%)</title><rect x="86.5187%" y="117" width="0.8229%" height="15" fill="rgb(206,27,48)" fg:x="185643038" fg:w="1765797"/><text x="86.7687%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1,836,361 samples, 0.86%)</title><rect x="88.0203%" y="85" width="0.8558%" height="15" fill="rgb(225,35,8)" fg:x="188865142" fg:w="1836361"/><text x="88.2703%" y="95.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::intersection (172,121,970 samples, 80.22%)</title><rect x="9.1645%" y="181" width="80.2172%" height="15" fill="rgb(250,213,24)" fg:x="19664219" fg:w="172121970"/><text x="9.4145%" y="191.50">regex_automata::dfa::minimize::StateSet::intersection</text></g><g><title>regex_automata::dfa::minimize::StateSet::is_empty (4,377,354 samples, 2.04%)</title><rect x="87.3416%" y="165" width="2.0401%" height="15" fill="rgb(247,123,22)" fg:x="187408835" fg:w="4377354"/><text x="87.5916%" y="175.50">r..</text></g><g><title>regex_automata::dfa::minimize::StateSet::len (2,921,047 samples, 1.36%)</title><rect x="88.0203%" y="149" width="1.3614%" height="15" fill="rgb(231,138,38)" fg:x="188865142" fg:w="2921047"/><text x="88.2703%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2,921,047 samples, 1.36%)</title><rect x="88.0203%" y="133" width="1.3614%" height="15" fill="rgb(231,145,46)" fg:x="188865142" fg:w="2921047"/><text x="88.2703%" y="143.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2,921,047 samples, 1.36%)</title><rect x="88.0203%" y="117" width="1.3614%" height="15" fill="rgb(251,118,11)" fg:x="188865142" fg:w="2921047"/><text x="88.2703%" y="127.50"></text></g><g><title>core::cell::BorrowRef::new (2,921,047 samples, 1.36%)</title><rect x="88.0203%" y="101" width="1.3614%" height="15" fill="rgb(217,147,25)" fg:x="188865142" fg:w="2921047"/><text x="88.2703%" y="111.50"></text></g><g><title>core::cell::is_reading (1,084,686 samples, 0.51%)</title><rect x="88.8762%" y="85" width="0.5055%" height="15" fill="rgb(247,81,37)" fg:x="190701503" fg:w="1084686"/><text x="89.1262%" y="95.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::is_empty (6,230,841 samples, 2.90%)</title><rect x="89.3817%" y="181" width="2.9039%" height="15" fill="rgb(209,12,38)" fg:x="191786189" fg:w="6230841"/><text x="89.6317%" y="191.50">re..</text></g><g><title>regex_automata::dfa::minimize::StateSet::len (2,690,442 samples, 1.25%)</title><rect x="91.0317%" y="165" width="1.2539%" height="15" fill="rgb(227,1,9)" fg:x="195326588" fg:w="2690442"/><text x="91.2817%" y="175.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2,690,442 samples, 1.25%)</title><rect x="91.0317%" y="149" width="1.2539%" height="15" fill="rgb(248,47,43)" fg:x="195326588" fg:w="2690442"/><text x="91.2817%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2,690,442 samples, 1.25%)</title><rect x="91.0317%" y="133" width="1.2539%" height="15" fill="rgb(221,10,30)" fg:x="195326588" fg:w="2690442"/><text x="91.2817%" y="143.50"></text></g><g><title>core::cell::BorrowRef::new (2,690,442 samples, 1.25%)</title><rect x="91.0317%" y="117" width="1.2539%" height="15" fill="rgb(210,229,1)" fg:x="195326588" fg:w="2690442"/><text x="91.2817%" y="127.50"></text></g><g><title>core::cell::is_reading (2,690,442 samples, 1.25%)</title><rect x="91.0317%" y="101" width="1.2539%" height="15" fill="rgb(222,148,37)" fg:x="195326588" fg:w="2690442"/><text x="91.2817%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,841,798 samples, 1.32%)</title><rect x="98.2933%" y="149" width="1.3244%" height="15" fill="rgb(234,67,33)" fg:x="210907761" fg:w="2841798"/><text x="98.5433%" y="159.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,531,294 samples, 1.18%)</title><rect x="98.4380%" y="133" width="1.1797%" height="15" fill="rgb(247,98,35)" fg:x="211218265" fg:w="2531294"/><text x="98.6880%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,358,827 samples, 3.43%)</title><rect x="96.1881%" y="165" width="3.4296%" height="15" fill="rgb(247,138,52)" fg:x="206390763" fg:w="7358827"/><text x="96.4381%" y="175.50">&lt;co..</text></g><g><title>[unknown] (213,750,294 samples, 99.62%)</title><rect x="0.0000%" y="261" width="99.6180%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="213750294"/><text x="0.2500%" y="271.50">[unknown]</text></g><g><title>regex_automata::dfa::dense::Builder::build_many (213,745,721 samples, 99.62%)</title><rect x="0.0021%" y="245" width="99.6159%" height="15" fill="rgb(246,177,23)" fg:x="4573" fg:w="213745721"/><text x="0.2521%" y="255.50">regex_automata::dfa::dense::Builder::build_many</text></g><g><title>regex_automata::dfa::dense::Builder::build_from_nfa (213,745,721 samples, 99.62%)</title><rect x="0.0021%" y="229" width="99.6159%" height="15" fill="rgb(230,62,27)" fg:x="4573" fg:w="213745721"/><text x="0.2521%" y="239.50">regex_automata::dfa::dense::Builder::build_from_nfa</text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::minimize (213,745,721 samples, 99.62%)</title><rect x="0.0021%" y="213" width="99.6159%" height="15" fill="rgb(216,154,8)" fg:x="4573" fg:w="213745721"/><text x="0.2521%" y="223.50">regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::minimize</text></g><g><title>regex_automata::dfa::minimize::Minimizer::run (213,745,721 samples, 99.62%)</title><rect x="0.0021%" y="197" width="99.6159%" height="15" fill="rgb(244,35,45)" fg:x="4573" fg:w="213745721"/><text x="0.2521%" y="207.50">regex_automata::dfa::minimize::Minimizer::run</text></g><g><title>regex_automata::dfa::minimize::StateSet::subtract (15,733,264 samples, 7.33%)</title><rect x="92.2856%" y="181" width="7.3325%" height="15" fill="rgb(251,115,12)" fg:x="198017030" fg:w="15733264"/><text x="92.5356%" y="191.50">regex_auto..</text></g><g><title>_dl_start_final (729,356 samples, 0.34%)</title><rect x="99.6180%" y="229" width="0.3399%" height="15" fill="rgb(240,54,50)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="239.50"></text></g><g><title>_dl_sysdep_start (729,356 samples, 0.34%)</title><rect x="99.6180%" y="213" width="0.3399%" height="15" fill="rgb(233,84,52)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="223.50"></text></g><g><title>dl_main (729,356 samples, 0.34%)</title><rect x="99.6180%" y="197" width="0.3399%" height="15" fill="rgb(207,117,47)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="207.50"></text></g><g><title>_dl_map_object_deps (729,356 samples, 0.34%)</title><rect x="99.6180%" y="181" width="0.3399%" height="15" fill="rgb(249,43,39)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="191.50"></text></g><g><title>__GI__dl_catch_exception (729,356 samples, 0.34%)</title><rect x="99.6180%" y="165" width="0.3399%" height="15" fill="rgb(209,38,44)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="175.50"></text></g><g><title>openaux (729,356 samples, 0.34%)</title><rect x="99.6180%" y="149" width="0.3399%" height="15" fill="rgb(236,212,23)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="159.50"></text></g><g><title>_dl_map_object (729,356 samples, 0.34%)</title><rect x="99.6180%" y="133" width="0.3399%" height="15" fill="rgb(242,79,21)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="143.50"></text></g><g><title>_dl_load_cache_lookup (729,356 samples, 0.34%)</title><rect x="99.6180%" y="117" width="0.3399%" height="15" fill="rgb(211,96,35)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="127.50"></text></g><g><title>__GI___open64_nocancel (729,356 samples, 0.34%)</title><rect x="99.6180%" y="101" width="0.3399%" height="15" fill="rgb(253,215,40)" fg:x="213750306" fg:w="729356"/><text x="99.8680%" y="111.50"></text></g><g><title>elf_dynamic_do_Rela (90,011 samples, 0.04%)</title><rect x="99.9580%" y="229" width="0.0419%" height="15" fill="rgb(211,81,21)" fg:x="214479662" fg:w="90011"/><text x="100.2080%" y="239.50"></text></g><g><title>elf_machine_rela (90,011 samples, 0.04%)</title><rect x="99.9580%" y="213" width="0.0419%" height="15" fill="rgb(208,190,38)" fg:x="214479662" fg:w="90011"/><text x="100.2080%" y="223.50"></text></g><g><title>all (214,569,867 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="214569867"/><text x="0.2500%" y="303.50"></text></g><g><title>dfa-4e296caea1e (214,569,867 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="214569867"/><text x="0.2500%" y="287.50">dfa-4e296caea1e</text></g><g><title>_start (819,573 samples, 0.38%)</title><rect x="99.6180%" y="261" width="0.3820%" height="15" fill="rgb(244,218,35)" fg:x="213750294" fg:w="819573"/><text x="99.8680%" y="271.50"></text></g><g><title>_dl_start (819,572 samples, 0.38%)</title><rect x="99.6180%" y="245" width="0.3820%" height="15" fill="rgb(240,68,47)" fg:x="213750295" fg:w="819572"/><text x="99.8680%" y="255.50"></text></g></svg></svg>
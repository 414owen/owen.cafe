<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="13703389136"><g><title>[unknown] (2,736,289 samples, 0.02%)</title><rect x="0.0013%" y="229" width="0.0200%" height="15" fill="rgb(227,0,7)" fg:x="173191" fg:w="2736289"/><text x="0.2513%" y="239.50"></text></g><g><title>[unknown] (2,736,275 samples, 0.02%)</title><rect x="0.0013%" y="213" width="0.0200%" height="15" fill="rgb(217,0,24)" fg:x="173205" fg:w="2736275"/><text x="0.2513%" y="223.50"></text></g><g><title>[unknown] (2,736,275 samples, 0.02%)</title><rect x="0.0013%" y="197" width="0.0200%" height="15" fill="rgb(221,193,54)" fg:x="173205" fg:w="2736275"/><text x="0.2513%" y="207.50"></text></g><g><title>[unknown] (2,736,275 samples, 0.02%)</title><rect x="0.0013%" y="181" width="0.0200%" height="15" fill="rgb(248,212,6)" fg:x="173205" fg:w="2736275"/><text x="0.2513%" y="191.50"></text></g><g><title>[unknown] (2,736,275 samples, 0.02%)</title><rect x="0.0013%" y="165" width="0.0200%" height="15" fill="rgb(208,68,35)" fg:x="173205" fg:w="2736275"/><text x="0.2513%" y="175.50"></text></g><g><title>[unknown] (2,724,401 samples, 0.02%)</title><rect x="0.0014%" y="149" width="0.0199%" height="15" fill="rgb(232,128,0)" fg:x="185079" fg:w="2724401"/><text x="0.2514%" y="159.50"></text></g><g><title>[unknown] (2,723,650 samples, 0.02%)</title><rect x="0.0014%" y="133" width="0.0199%" height="15" fill="rgb(207,160,47)" fg:x="185830" fg:w="2723650"/><text x="0.2514%" y="143.50"></text></g><g><title>[unknown] (2,721,351 samples, 0.02%)</title><rect x="0.0014%" y="117" width="0.0199%" height="15" fill="rgb(228,23,34)" fg:x="188129" fg:w="2721351"/><text x="0.2514%" y="127.50"></text></g><g><title>[unknown] (2,721,268 samples, 0.02%)</title><rect x="0.0014%" y="101" width="0.0199%" height="15" fill="rgb(218,30,26)" fg:x="188212" fg:w="2721268"/><text x="0.2514%" y="111.50"></text></g><g><title>[unknown] (2,720,783 samples, 0.02%)</title><rect x="0.0014%" y="85" width="0.0199%" height="15" fill="rgb(220,122,19)" fg:x="188697" fg:w="2720783"/><text x="0.2514%" y="95.50"></text></g><g><title>[unknown] (2,720,553 samples, 0.02%)</title><rect x="0.0014%" y="69" width="0.0199%" height="15" fill="rgb(250,228,42)" fg:x="188927" fg:w="2720553"/><text x="0.2514%" y="79.50"></text></g><g><title>[unknown] (2,674,621 samples, 0.02%)</title><rect x="0.0017%" y="53" width="0.0195%" height="15" fill="rgb(240,193,28)" fg:x="234859" fg:w="2674621"/><text x="0.2517%" y="63.50"></text></g><g><title>[unknown] (2,600,084 samples, 0.02%)</title><rect x="0.0023%" y="37" width="0.0190%" height="15" fill="rgb(216,20,37)" fg:x="309396" fg:w="2600084"/><text x="0.2523%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,969,262 samples, 0.02%)</title><rect x="0.0006%" y="309" width="0.0217%" height="15" fill="rgb(206,188,39)" fg:x="80952" fg:w="2969262"/><text x="0.2506%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,969,262 samples, 0.02%)</title><rect x="0.0006%" y="293" width="0.0217%" height="15" fill="rgb(217,207,13)" fg:x="80952" fg:w="2969262"/><text x="0.2506%" y="303.50"></text></g><g><title>alloc::alloc::alloc (2,969,262 samples, 0.02%)</title><rect x="0.0006%" y="277" width="0.0217%" height="15" fill="rgb(231,73,38)" fg:x="80952" fg:w="2969262"/><text x="0.2506%" y="287.50"></text></g><g><title>malloc (2,969,262 samples, 0.02%)</title><rect x="0.0006%" y="261" width="0.0217%" height="15" fill="rgb(225,20,46)" fg:x="80952" fg:w="2969262"/><text x="0.2506%" y="271.50"></text></g><g><title>_int_malloc (2,969,262 samples, 0.02%)</title><rect x="0.0006%" y="245" width="0.0217%" height="15" fill="rgb(210,31,41)" fg:x="80952" fg:w="2969262"/><text x="0.2506%" y="255.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,050,216 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0223%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="3050216"/><text x="0.2500%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,969,265 samples, 0.02%)</title><rect x="0.0006%" y="373" width="0.0217%" height="15" fill="rgb(226,26,5)" fg:x="80951" fg:w="2969265"/><text x="0.2506%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,969,265 samples, 0.02%)</title><rect x="0.0006%" y="357" width="0.0217%" height="15" fill="rgb(249,33,26)" fg:x="80951" fg:w="2969265"/><text x="0.2506%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,969,265 samples, 0.02%)</title><rect x="0.0006%" y="341" width="0.0217%" height="15" fill="rgb(235,183,28)" fg:x="80951" fg:w="2969265"/><text x="0.2506%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,969,265 samples, 0.02%)</title><rect x="0.0006%" y="325" width="0.0217%" height="15" fill="rgb(221,5,38)" fg:x="80951" fg:w="2969265"/><text x="0.2506%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,582,660 samples, 0.01%)</title><rect x="0.0223%" y="389" width="0.0115%" height="15" fill="rgb(247,18,42)" fg:x="3050216" fg:w="1582660"/><text x="0.2723%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,582,660 samples, 0.01%)</title><rect x="0.0223%" y="373" width="0.0115%" height="15" fill="rgb(241,131,45)" fg:x="3050216" fg:w="1582660"/><text x="0.2723%" y="383.50"></text></g><g><title>core::fmt::write (2,669,048 samples, 0.02%)</title><rect x="0.0408%" y="357" width="0.0195%" height="15" fill="rgb(249,31,29)" fg:x="5588972" fg:w="2669048"/><text x="0.2908%" y="367.50"></text></g><g><title>&lt;regex_automata::util::alphabet::Unit as core::fmt::Debug&gt;::fmt (4,427,662 samples, 0.03%)</title><rect x="0.0342%" y="389" width="0.0323%" height="15" fill="rgb(225,111,53)" fg:x="4690734" fg:w="4427662"/><text x="0.2842%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3,777,980 samples, 0.03%)</title><rect x="0.0390%" y="373" width="0.0276%" height="15" fill="rgb(238,160,17)" fg:x="5340416" fg:w="3777980"/><text x="0.2890%" y="383.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,017,885 samples, 0.02%)</title><rect x="0.1247%" y="293" width="0.0220%" height="15" fill="rgb(214,148,48)" fg:x="17084685" fg:w="3017885"/><text x="0.3747%" y="303.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,017,885 samples, 0.02%)</title><rect x="0.1247%" y="277" width="0.0220%" height="15" fill="rgb(232,36,49)" fg:x="17084685" fg:w="3017885"/><text x="0.3747%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4,345,287 samples, 0.03%)</title><rect x="0.1187%" y="309" width="0.0317%" height="15" fill="rgb(209,103,24)" fg:x="16270323" fg:w="4345287"/><text x="0.3687%" y="319.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5,916,277 samples, 0.04%)</title><rect x="0.1154%" y="325" width="0.0432%" height="15" fill="rgb(229,88,8)" fg:x="15818209" fg:w="5916277"/><text x="0.3654%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (7,164,608 samples, 0.05%)</title><rect x="0.1154%" y="341" width="0.0523%" height="15" fill="rgb(213,181,19)" fg:x="15818209" fg:w="7164608"/><text x="0.3654%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (9,874,620 samples, 0.07%)</title><rect x="0.1013%" y="373" width="0.0721%" height="15" fill="rgb(254,191,54)" fg:x="13880782" fg:w="9874620"/><text x="0.3513%" y="383.50"></text></g><g><title>core::fmt::write (9,595,996 samples, 0.07%)</title><rect x="0.1033%" y="357" width="0.0700%" height="15" fill="rgb(241,83,37)" fg:x="14159406" fg:w="9595996"/><text x="0.3533%" y="367.50"></text></g><g><title>&lt;regex_automata::util::escape::DebugByte as core::fmt::Debug&gt;::fmt (17,155,492 samples, 0.13%)</title><rect x="0.0665%" y="389" width="0.1252%" height="15" fill="rgb(233,36,39)" fg:x="9118396" fg:w="17155492"/><text x="0.3165%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (1,381,511 samples, 0.01%)</title><rect x="0.1817%" y="373" width="0.0101%" height="15" fill="rgb(226,3,54)" fg:x="24892377" fg:w="1381511"/><text x="0.4317%" y="383.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (16,874,724 samples, 0.12%)</title><rect x="0.2040%" y="309" width="0.1231%" height="15" fill="rgb(245,192,40)" fg:x="27952744" fg:w="16874724"/><text x="0.4540%" y="319.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (16,874,724 samples, 0.12%)</title><rect x="0.2040%" y="293" width="0.1231%" height="15" fill="rgb(238,167,29)" fg:x="27952744" fg:w="16874724"/><text x="0.4540%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (16,768,560 samples, 0.12%)</title><rect x="0.2048%" y="277" width="0.1224%" height="15" fill="rgb(232,182,51)" fg:x="28058908" fg:w="16768560"/><text x="0.4548%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (16,713,232 samples, 0.12%)</title><rect x="0.2052%" y="261" width="0.1220%" height="15" fill="rgb(231,60,39)" fg:x="28114236" fg:w="16713232"/><text x="0.4552%" y="271.50"></text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (16,713,232 samples, 0.12%)</title><rect x="0.2052%" y="245" width="0.1220%" height="15" fill="rgb(208,69,12)" fg:x="28114236" fg:w="16713232"/><text x="0.4552%" y="255.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (16,713,232 samples, 0.12%)</title><rect x="0.2052%" y="229" width="0.1220%" height="15" fill="rgb(235,93,37)" fg:x="28114236" fg:w="16713232"/><text x="0.4552%" y="239.50"></text></g><g><title>__GI___libc_write (16,655,550 samples, 0.12%)</title><rect x="0.2056%" y="213" width="0.1215%" height="15" fill="rgb(213,116,39)" fg:x="28171918" fg:w="16655550"/><text x="0.4556%" y="223.50"></text></g><g><title>[unknown] (16,540,883 samples, 0.12%)</title><rect x="0.2064%" y="197" width="0.1207%" height="15" fill="rgb(222,207,29)" fg:x="28286585" fg:w="16540883"/><text x="0.4564%" y="207.50"></text></g><g><title>[unknown] (15,870,495 samples, 0.12%)</title><rect x="0.2113%" y="181" width="0.1158%" height="15" fill="rgb(206,96,30)" fg:x="28956973" fg:w="15870495"/><text x="0.4613%" y="191.50"></text></g><g><title>[unknown] (15,706,705 samples, 0.11%)</title><rect x="0.2125%" y="165" width="0.1146%" height="15" fill="rgb(218,138,4)" fg:x="29120763" fg:w="15706705"/><text x="0.4625%" y="175.50"></text></g><g><title>[unknown] (15,617,740 samples, 0.11%)</title><rect x="0.2132%" y="149" width="0.1140%" height="15" fill="rgb(250,191,14)" fg:x="29209728" fg:w="15617740"/><text x="0.4632%" y="159.50"></text></g><g><title>[unknown] (14,960,990 samples, 0.11%)</title><rect x="0.2179%" y="133" width="0.1092%" height="15" fill="rgb(239,60,40)" fg:x="29866478" fg:w="14960990"/><text x="0.4679%" y="143.50"></text></g><g><title>[unknown] (13,740,064 samples, 0.10%)</title><rect x="0.2269%" y="117" width="0.1003%" height="15" fill="rgb(206,27,48)" fg:x="31087404" fg:w="13740064"/><text x="0.4769%" y="127.50"></text></g><g><title>[unknown] (7,185,691 samples, 0.05%)</title><rect x="0.2747%" y="101" width="0.0524%" height="15" fill="rgb(225,35,8)" fg:x="37641777" fg:w="7185691"/><text x="0.5247%" y="111.50"></text></g><g><title>[unknown] (2,722,986 samples, 0.02%)</title><rect x="0.3073%" y="85" width="0.0199%" height="15" fill="rgb(250,213,24)" fg:x="42104482" fg:w="2722986"/><text x="0.5573%" y="95.50"></text></g><g><title>&lt;regex_automata::dfa::dense::DFA&lt;T&gt; as core::fmt::Debug&gt;::fmt (16,958,737 samples, 0.12%)</title><rect x="0.2040%" y="373" width="0.1238%" height="15" fill="rgb(247,123,22)" fg:x="27952744" fg:w="16958737"/><text x="0.4540%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (16,958,737 samples, 0.12%)</title><rect x="0.2040%" y="357" width="0.1238%" height="15" fill="rgb(231,138,38)" fg:x="27952744" fg:w="16958737"/><text x="0.4540%" y="367.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (16,958,737 samples, 0.12%)</title><rect x="0.2040%" y="341" width="0.1238%" height="15" fill="rgb(231,145,46)" fg:x="27952744" fg:w="16958737"/><text x="0.4540%" y="351.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (16,958,737 samples, 0.12%)</title><rect x="0.2040%" y="325" width="0.1238%" height="15" fill="rgb(251,118,11)" fg:x="27952744" fg:w="16958737"/><text x="0.4540%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,287,271 samples, 0.02%)</title><rect x="0.3386%" y="357" width="0.0240%" height="15" fill="rgb(217,147,25)" fg:x="46398088" fg:w="3287271"/><text x="0.5886%" y="367.50"></text></g><g><title>&lt;regex_automata::dfa::dense::StateSparseTransitionIter as core::iter::traits::iterator::Iterator&gt;::next (2,476,110 samples, 0.02%)</title><rect x="0.3445%" y="341" width="0.0181%" height="15" fill="rgb(247,81,37)" fg:x="47209249" fg:w="2476110"/><text x="0.5945%" y="351.50"></text></g><g><title>&lt;regex_automata::dfa::dense::StateTransitionIter as core::iter::traits::iterator::Iterator&gt;::next (1,383,218 samples, 0.01%)</title><rect x="0.3525%" y="325" width="0.0101%" height="15" fill="rgb(209,12,38)" fg:x="48302141" fg:w="1383218"/><text x="0.6025%" y="335.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2,557,381 samples, 0.02%)</title><rect x="0.3807%" y="309" width="0.0187%" height="15" fill="rgb(227,1,9)" fg:x="52172545" fg:w="2557381"/><text x="0.6307%" y="319.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2,557,381 samples, 0.02%)</title><rect x="0.3807%" y="293" width="0.0187%" height="15" fill="rgb(248,47,43)" fg:x="52172545" fg:w="2557381"/><text x="0.6307%" y="303.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,927,768 samples, 0.03%)</title><rect x="0.3757%" y="325" width="0.0287%" height="15" fill="rgb(221,10,30)" fg:x="51490126" fg:w="3927768"/><text x="0.6257%" y="335.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5,678,820 samples, 0.04%)</title><rect x="0.3665%" y="341" width="0.0414%" height="15" fill="rgb(210,229,1)" fg:x="50227600" fg:w="5678820"/><text x="0.6165%" y="351.50"></text></g><g><title>core::slice::memchr::memrchr (1,579,147 samples, 0.01%)</title><rect x="0.4515%" y="261" width="0.0115%" height="15" fill="rgb(222,148,37)" fg:x="61872706" fg:w="1579147"/><text x="0.7015%" y="271.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,455,929 samples, 0.03%)</title><rect x="0.4457%" y="293" width="0.0252%" height="15" fill="rgb(234,67,33)" fg:x="61074056" fg:w="3455929"/><text x="0.6957%" y="303.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,455,929 samples, 0.03%)</title><rect x="0.4457%" y="277" width="0.0252%" height="15" fill="rgb(247,98,35)" fg:x="61074056" fg:w="3455929"/><text x="0.6957%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5,054,437 samples, 0.04%)</title><rect x="0.4424%" y="309" width="0.0369%" height="15" fill="rgb(247,138,52)" fg:x="60629670" fg:w="5054437"/><text x="0.6924%" y="319.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6,347,570 samples, 0.05%)</title><rect x="0.4395%" y="325" width="0.0463%" height="15" fill="rgb(213,79,30)" fg:x="60229632" fg:w="6347570"/><text x="0.6895%" y="335.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2,702,968 samples, 0.02%)</title><rect x="0.5213%" y="261" width="0.0197%" height="15" fill="rgb(246,177,23)" fg:x="71430435" fg:w="2702968"/><text x="0.7713%" y="271.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2,702,968 samples, 0.02%)</title><rect x="0.5213%" y="245" width="0.0197%" height="15" fill="rgb(230,62,27)" fg:x="71430435" fg:w="2702968"/><text x="0.7713%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,616,372 samples, 0.03%)</title><rect x="0.5190%" y="277" width="0.0264%" height="15" fill="rgb(216,154,8)" fg:x="71114127" fg:w="3616372"/><text x="0.7690%" y="287.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4,385,728 samples, 0.03%)</title><rect x="0.5154%" y="293" width="0.0320%" height="15" fill="rgb(244,35,45)" fg:x="70626340" fg:w="4385728"/><text x="0.7654%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1,437,128 samples, 0.01%)</title><rect x="0.5493%" y="293" width="0.0105%" height="15" fill="rgb(251,115,12)" fg:x="75270261" fg:w="1437128"/><text x="0.7993%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (9,731,354 samples, 0.07%)</title><rect x="0.4946%" y="325" width="0.0710%" height="15" fill="rgb(240,54,50)" fg:x="67770393" fg:w="9731354"/><text x="0.7446%" y="335.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (9,055,234 samples, 0.07%)</title><rect x="0.4995%" y="309" width="0.0661%" height="15" fill="rgb(233,84,52)" fg:x="68446513" fg:w="9055234"/><text x="0.7495%" y="319.50"></text></g><g><title>&lt;regex_automata::dfa::dense::State as core::fmt::Debug&gt;::fmt (33,262,657 samples, 0.24%)</title><rect x="0.3277%" y="373" width="0.2427%" height="15" fill="rgb(207,117,47)" fg:x="44911481" fg:w="33262657"/><text x="0.5777%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (28,115,230 samples, 0.21%)</title><rect x="0.3653%" y="357" width="0.2052%" height="15" fill="rgb(249,43,39)" fg:x="50058908" fg:w="28115230"/><text x="0.6153%" y="367.50"></text></g><g><title>core::fmt::write (21,717,244 samples, 0.16%)</title><rect x="0.4120%" y="341" width="0.1585%" height="15" fill="rgb(209,38,44)" fg:x="56456894" fg:w="21717244"/><text x="0.6620%" y="351.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::maybe_add_state (1,825,449 samples, 0.01%)</title><rect x="0.5805%" y="357" width="0.0133%" height="15" fill="rgb(236,212,23)" fg:x="79541432" fg:w="1825449"/><text x="0.8305%" y="367.50"></text></g><g><title>[unknown] (3,711,151 samples, 0.03%)</title><rect x="0.5761%" y="373" width="0.0271%" height="15" fill="rgb(242,79,21)" fg:x="78946273" fg:w="3711151"/><text x="0.8261%" y="383.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb76bce5d274bf2f8E.llvm.18359322787921612134 (1,905,021 samples, 0.01%)</title><rect x="0.6049%" y="373" width="0.0139%" height="15" fill="rgb(211,96,35)" fg:x="82888446" fg:w="1905021"/><text x="0.8549%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,716,617 samples, 0.01%)</title><rect x="0.6932%" y="293" width="0.0125%" height="15" fill="rgb(253,215,40)" fg:x="94998361" fg:w="1716617"/><text x="0.9432%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,928,342 samples, 0.02%)</title><rect x="0.6876%" y="309" width="0.0214%" height="15" fill="rgb(211,81,21)" fg:x="94218464" fg:w="2928342"/><text x="0.9376%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,306,191 samples, 0.04%)</title><rect x="0.7204%" y="293" width="0.0387%" height="15" fill="rgb(208,190,38)" fg:x="98714515" fg:w="5306191"/><text x="0.9704%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (19,593,929 samples, 0.14%)</title><rect x="0.6306%" y="357" width="0.1430%" height="15" fill="rgb(235,213,38)" fg:x="86419699" fg:w="19593929"/><text x="0.8806%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19,593,929 samples, 0.14%)</title><rect x="0.6306%" y="341" width="0.1430%" height="15" fill="rgb(237,122,38)" fg:x="86419699" fg:w="19593929"/><text x="0.8806%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19,593,929 samples, 0.14%)</title><rect x="0.6306%" y="325" width="0.1430%" height="15" fill="rgb(244,218,35)" fg:x="86419699" fg:w="19593929"/><text x="0.8806%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8,866,822 samples, 0.06%)</title><rect x="0.7089%" y="309" width="0.0647%" height="15" fill="rgb(240,68,47)" fg:x="97146806" fg:w="8866822"/><text x="0.9589%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,992,922 samples, 0.01%)</title><rect x="0.7591%" y="293" width="0.0145%" height="15" fill="rgb(210,16,53)" fg:x="104020706" fg:w="1992922"/><text x="1.0091%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22,844,885 samples, 0.17%)</title><rect x="0.6255%" y="373" width="0.1667%" height="15" fill="rgb(235,124,12)" fg:x="85719426" fg:w="22844885"/><text x="0.8755%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,052,842 samples, 0.01%)</title><rect x="0.7773%" y="357" width="0.0150%" height="15" fill="rgb(224,169,11)" fg:x="106511469" fg:w="2052842"/><text x="1.0273%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,989,496 samples, 0.01%)</title><rect x="0.7777%" y="341" width="0.0145%" height="15" fill="rgb(250,166,2)" fg:x="106574815" fg:w="1989496"/><text x="1.0277%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1,375,359 samples, 0.01%)</title><rect x="0.7822%" y="325" width="0.0100%" height="15" fill="rgb(242,216,29)" fg:x="107188952" fg:w="1375359"/><text x="1.0322%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,375,359 samples, 0.01%)</title><rect x="0.7822%" y="309" width="0.0100%" height="15" fill="rgb(230,116,27)" fg:x="107188952" fg:w="1375359"/><text x="1.0322%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,375,359 samples, 0.01%)</title><rect x="0.7822%" y="293" width="0.0100%" height="15" fill="rgb(228,99,48)" fg:x="107188952" fg:w="1375359"/><text x="1.0322%" y="303.50"></text></g><g><title>core::slice::sort::stable::drift::sort (4,692,931 samples, 0.03%)</title><rect x="0.7954%" y="373" width="0.0342%" height="15" fill="rgb(253,11,6)" fg:x="109001828" fg:w="4692931"/><text x="1.0454%" y="383.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (4,692,931 samples, 0.03%)</title><rect x="0.7954%" y="357" width="0.0342%" height="15" fill="rgb(247,143,39)" fg:x="109001828" fg:w="4692931"/><text x="1.0454%" y="367.50"></text></g><g><title>core::slice::sort::stable::merge::merge (4,692,931 samples, 0.03%)</title><rect x="0.7954%" y="341" width="0.0342%" height="15" fill="rgb(236,97,10)" fg:x="109001828" fg:w="4692931"/><text x="1.0454%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_up (4,446,129 samples, 0.03%)</title><rect x="0.7972%" y="325" width="0.0324%" height="15" fill="rgb(233,208,19)" fg:x="109248630" fg:w="4446129"/><text x="1.0472%" y="335.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::swap_states (1,818,117 samples, 0.01%)</title><rect x="0.8297%" y="373" width="0.0133%" height="15" fill="rgb(216,164,2)" fg:x="113694759" fg:w="1818117"/><text x="1.0797%" y="383.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;alloc::vec::Vec&lt;u32&gt;&gt;::swap (1,818,117 samples, 0.01%)</title><rect x="0.8297%" y="357" width="0.0133%" height="15" fill="rgb(220,129,5)" fg:x="113694759" fg:w="1818117"/><text x="1.0797%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1,542,950 samples, 0.01%)</title><rect x="0.8317%" y="341" width="0.0113%" height="15" fill="rgb(242,17,10)" fg:x="113969926" fg:w="1542950"/><text x="1.0817%" y="351.50"></text></g><g><title>regex_automata::dfa::determinize::Config::run (4,466,968 samples, 0.03%)</title><rect x="0.8430%" y="373" width="0.0326%" height="15" fill="rgb(242,107,0)" fg:x="115512876" fg:w="4466968"/><text x="1.0930%" y="383.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::run (4,466,968 samples, 0.03%)</title><rect x="0.8430%" y="357" width="0.0326%" height="15" fill="rgb(251,28,31)" fg:x="115512876" fg:w="4466968"/><text x="1.0930%" y="367.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::cached_state (1,849,976 samples, 0.01%)</title><rect x="0.8620%" y="341" width="0.0135%" height="15" fill="rgb(233,223,10)" fg:x="118129868" fg:w="1849976"/><text x="1.1120%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,951,547 samples, 0.04%)</title><rect x="0.8878%" y="341" width="0.0361%" height="15" fill="rgb(215,21,27)" fg:x="121664080" fg:w="4951547"/><text x="1.1378%" y="351.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::new (7,023,016 samples, 0.05%)</title><rect x="0.8768%" y="373" width="0.0513%" height="15" fill="rgb(232,23,21)" fg:x="120156135" fg:w="7023016"/><text x="1.1268%" y="383.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::incoming_transitions (7,023,016 samples, 0.05%)</title><rect x="0.8768%" y="357" width="0.0513%" height="15" fill="rgb(244,5,23)" fg:x="120156135" fg:w="7023016"/><text x="1.1268%" y="367.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1,593,408 samples, 0.01%)</title><rect x="0.9281%" y="373" width="0.0116%" height="15" fill="rgb(226,81,46)" fg:x="127179151" fg:w="1593408"/><text x="1.1781%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::dense::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;&gt;::remap (1,593,408 samples, 0.01%)</title><rect x="0.9281%" y="357" width="0.0116%" height="15" fill="rgb(247,70,30)" fg:x="127179151" fg:w="1593408"/><text x="1.1781%" y="367.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::remap (1,593,408 samples, 0.01%)</title><rect x="0.9281%" y="341" width="0.0116%" height="15" fill="rgb(212,68,19)" fg:x="127179151" fg:w="1593408"/><text x="1.1781%" y="351.50"></text></g><g><title>&lt;regex_automata::util::sparse_set::SparseSetIter as core::iter::traits::iterator::Iterator&gt;::next (1,396,070 samples, 0.01%)</title><rect x="1.0743%" y="357" width="0.0102%" height="15" fill="rgb(240,187,13)" fg:x="147215934" fg:w="1396070"/><text x="1.3243%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (2,186,741 samples, 0.02%)</title><rect x="1.0845%" y="357" width="0.0160%" height="15" fill="rgb(223,113,26)" fg:x="148612004" fg:w="2186741"/><text x="1.3345%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderNFA::add_nfa_state_id (13,516,182 samples, 0.10%)</title><rect x="1.1004%" y="357" width="0.0986%" height="15" fill="rgb(206,192,2)" fg:x="150798745" fg:w="13516182"/><text x="1.3504%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::ReprVec::add_nfa_state_id (13,516,182 samples, 0.10%)</title><rect x="1.1004%" y="341" width="0.0986%" height="15" fill="rgb(241,108,4)" fg:x="150798745" fg:w="13516182"/><text x="1.3504%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::write_vari32 (7,548,578 samples, 0.06%)</title><rect x="1.1440%" y="325" width="0.0551%" height="15" fill="rgb(247,173,49)" fg:x="156766349" fg:w="7548578"/><text x="1.3940%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::write_varu32 (6,323,908 samples, 0.05%)</title><rect x="1.1529%" y="309" width="0.0461%" height="15" fill="rgb(224,114,35)" fg:x="157991019" fg:w="6323908"/><text x="1.4029%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,442,962 samples, 0.04%)</title><rect x="1.1594%" y="293" width="0.0397%" height="15" fill="rgb(245,159,27)" fg:x="158871965" fg:w="5442962"/><text x="1.4094%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderNFA::look_need (1,418,786 samples, 0.01%)</title><rect x="1.1991%" y="357" width="0.0104%" height="15" fill="rgb(245,172,44)" fg:x="164314927" fg:w="1418786"/><text x="1.4491%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::look_need (1,418,786 samples, 0.01%)</title><rect x="1.1991%" y="341" width="0.0104%" height="15" fill="rgb(236,23,11)" fg:x="164314927" fg:w="1418786"/><text x="1.4491%" y="351.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (37,514,386 samples, 0.27%)</title><rect x="0.9407%" y="373" width="0.2738%" height="15" fill="rgb(205,117,38)" fg:x="128911004" fg:w="37514386"/><text x="1.1907%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (1,490,494 samples, 0.01%)</title><rect x="1.2639%" y="357" width="0.0109%" height="15" fill="rgb(237,72,25)" fg:x="173195861" fg:w="1490494"/><text x="1.5139%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::State::is_epsilon (3,859,970 samples, 0.03%)</title><rect x="1.2748%" y="357" width="0.0282%" height="15" fill="rgb(244,70,9)" fg:x="174686355" fg:w="3859970"/><text x="1.5248%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (15,724,903 samples, 0.11%)</title><rect x="1.2145%" y="373" width="0.1148%" height="15" fill="rgb(217,125,39)" fg:x="166425390" fg:w="15724903"/><text x="1.4645%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::insert (3,603,968 samples, 0.03%)</title><rect x="1.3029%" y="357" width="0.0263%" height="15" fill="rgb(235,36,10)" fg:x="178546325" fg:w="3603968"/><text x="1.5529%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::contains (2,029,382 samples, 0.01%)</title><rect x="1.3144%" y="341" width="0.0148%" height="15" fill="rgb(251,123,47)" fg:x="180120911" fg:w="2029382"/><text x="1.5644%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_unit (10,836,654 samples, 0.08%)</title><rect x="1.4214%" y="357" width="0.0791%" height="15" fill="rgb(221,13,13)" fg:x="194786816" fg:w="10836654"/><text x="1.6714%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (10,836,654 samples, 0.08%)</title><rect x="1.4214%" y="341" width="0.0791%" height="15" fill="rgb(238,131,9)" fg:x="194786816" fg:w="10836654"/><text x="1.6714%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_unit::_{{closure}} (10,836,654 samples, 0.08%)</title><rect x="1.4214%" y="325" width="0.0791%" height="15" fill="rgb(211,50,8)" fg:x="194786816" fg:w="10836654"/><text x="1.6714%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_byte (10,836,654 samples, 0.08%)</title><rect x="1.4214%" y="309" width="0.0791%" height="15" fill="rgb(245,182,24)" fg:x="194786816" fg:w="10836654"/><text x="1.6714%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (10,836,654 samples, 0.08%)</title><rect x="1.4214%" y="293" width="0.0791%" height="15" fill="rgb(242,14,37)" fg:x="194786816" fg:w="10836654"/><text x="1.6714%" y="303.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1,403,958 samples, 0.01%)</title><rect x="1.5227%" y="325" width="0.0102%" height="15" fill="rgb(246,228,12)" fg:x="208667412" fg:w="1403958"/><text x="1.7727%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1,403,958 samples, 0.01%)</title><rect x="1.5227%" y="309" width="0.0102%" height="15" fill="rgb(213,55,15)" fg:x="208667412" fg:w="1403958"/><text x="1.7727%" y="319.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1,403,958 samples, 0.01%)</title><rect x="1.5227%" y="293" width="0.0102%" height="15" fill="rgb(209,9,3)" fg:x="208667412" fg:w="1403958"/><text x="1.7727%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::look_have (2,193,183 samples, 0.02%)</title><rect x="1.5176%" y="357" width="0.0160%" height="15" fill="rgb(230,59,30)" fg:x="207965665" fg:w="2193183"/><text x="1.7676%" y="367.50"></text></g><g><title>regex_automata::util::look::LookSet::read_repr (1,491,436 samples, 0.01%)</title><rect x="1.5227%" y="341" width="0.0109%" height="15" fill="rgb(209,121,21)" fg:x="208667412" fg:w="1491436"/><text x="1.7727%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (28,177,377 samples, 0.21%)</title><rect x="1.3292%" y="373" width="0.2056%" height="15" fill="rgb(220,109,13)" fg:x="182150293" fg:w="28177377"/><text x="1.5792%" y="383.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::add_empty_state (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="325" width="0.0114%" height="15" fill="rgb(232,18,1)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="335.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;alloc::vec::Vec&lt;u32&gt;&gt;::add_empty_state (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="309" width="0.0114%" height="15" fill="rgb(215,41,42)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="293" width="0.0114%" height="15" fill="rgb(224,123,36)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="277" width="0.0114%" height="15" fill="rgb(240,125,3)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="261" width="0.0114%" height="15" fill="rgb(205,98,50)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="245" width="0.0114%" height="15" fill="rgb(205,185,37)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="229" width="0.0114%" height="15" fill="rgb(238,207,15)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="213" width="0.0114%" height="15" fill="rgb(213,199,42)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::_{{closure}} (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="197" width="0.0114%" height="15" fill="rgb(235,201,11)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="181" width="0.0114%" height="15" fill="rgb(207,46,11)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="191.50"></text></g><g><title>core::ptr::write (1,569,006 samples, 0.01%)</title><rect x="1.5432%" y="165" width="0.0114%" height="15" fill="rgb(241,35,35)" fg:x="211473467" fg:w="1569006"/><text x="1.7932%" y="175.50"></text></g><g><title>__memset_avx2_unaligned_erms (1,480,116 samples, 0.01%)</title><rect x="1.5439%" y="149" width="0.0108%" height="15" fill="rgb(243,32,47)" fg:x="211562357" fg:w="1480116"/><text x="1.7939%" y="159.50"></text></g><g><title>[unknown] (1,480,116 samples, 0.01%)</title><rect x="1.5439%" y="133" width="0.0108%" height="15" fill="rgb(247,202,23)" fg:x="211562357" fg:w="1480116"/><text x="1.7939%" y="143.50"></text></g><g><title>[unknown] (1,480,116 samples, 0.01%)</title><rect x="1.5439%" y="117" width="0.0108%" height="15" fill="rgb(219,102,11)" fg:x="211562357" fg:w="1480116"/><text x="1.7939%" y="127.50"></text></g><g><title>[unknown] (1,391,219 samples, 0.01%)</title><rect x="1.5445%" y="101" width="0.0102%" height="15" fill="rgb(243,110,44)" fg:x="211651254" fg:w="1391219"/><text x="1.7945%" y="111.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::add_state (2,008,591 samples, 0.01%)</title><rect x="1.5419%" y="341" width="0.0147%" height="15" fill="rgb(222,74,54)" fg:x="211296170" fg:w="2008591"/><text x="1.7919%" y="351.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,830,815 samples, 0.01%)</title><rect x="1.5833%" y="245" width="0.0134%" height="15" fill="rgb(216,99,12)" fg:x="216961924" fg:w="1830815"/><text x="1.8333%" y="255.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,830,815 samples, 0.01%)</title><rect x="1.5833%" y="229" width="0.0134%" height="15" fill="rgb(226,22,26)" fg:x="216961924" fg:w="1830815"/><text x="1.8333%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,565,287 samples, 0.01%)</title><rect x="1.5973%" y="245" width="0.0114%" height="15" fill="rgb(217,163,10)" fg:x="218878270" fg:w="1565287"/><text x="1.8473%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,565,287 samples, 0.01%)</title><rect x="1.5973%" y="229" width="0.0114%" height="15" fill="rgb(213,25,53)" fg:x="218878270" fg:w="1565287"/><text x="1.8473%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (15,810,098 samples, 0.12%)</title><rect x="1.6112%" y="229" width="0.1154%" height="15" fill="rgb(252,105,26)" fg:x="220791333" fg:w="15810098"/><text x="1.8612%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (15,810,098 samples, 0.12%)</title><rect x="1.6112%" y="213" width="0.1154%" height="15" fill="rgb(220,39,43)" fg:x="220791333" fg:w="15810098"/><text x="1.8612%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14,670,540 samples, 0.11%)</title><rect x="1.6195%" y="197" width="0.1071%" height="15" fill="rgb(229,68,48)" fg:x="221930891" fg:w="14670540"/><text x="1.8695%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (14,670,540 samples, 0.11%)</title><rect x="1.6195%" y="181" width="0.1071%" height="15" fill="rgb(252,8,32)" fg:x="221930891" fg:w="14670540"/><text x="1.8695%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (14,670,540 samples, 0.11%)</title><rect x="1.6195%" y="165" width="0.1071%" height="15" fill="rgb(223,20,43)" fg:x="221930891" fg:w="14670540"/><text x="1.8695%" y="175.50"></text></g><g><title>__memcmp_avx2_movbe (9,441,625 samples, 0.07%)</title><rect x="1.6577%" y="149" width="0.0689%" height="15" fill="rgb(229,81,49)" fg:x="227159806" fg:w="9441625"/><text x="1.9077%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2,498,472 samples, 0.02%)</title><rect x="1.7266%" y="229" width="0.0182%" height="15" fill="rgb(236,28,36)" fg:x="236601431" fg:w="2498472"/><text x="1.9766%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2,498,472 samples, 0.02%)</title><rect x="1.7266%" y="213" width="0.0182%" height="15" fill="rgb(249,185,26)" fg:x="236601431" fg:w="2498472"/><text x="1.9766%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2,498,472 samples, 0.02%)</title><rect x="1.7266%" y="197" width="0.0182%" height="15" fill="rgb(249,174,33)" fg:x="236601431" fg:w="2498472"/><text x="1.9766%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (18,572,383 samples, 0.14%)</title><rect x="1.6112%" y="245" width="0.1355%" height="15" fill="rgb(233,201,37)" fg:x="220791333" fg:w="18572383"/><text x="1.8612%" y="255.50"></text></g><g><title>[unknown] (217,163,199 samples, 1.58%)</title><rect x="0.2028%" y="389" width="1.5847%" height="15" fill="rgb(221,78,26)" fg:x="27785762" fg:w="217163199"/><text x="0.4528%" y="399.50"></text></g><g><title>sysmalloc (34,527,820 samples, 0.25%)</title><rect x="1.5355%" y="373" width="0.2520%" height="15" fill="rgb(250,127,30)" fg:x="210421141" fg:w="34527820"/><text x="1.7855%" y="383.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::maybe_add_state (34,527,820 samples, 0.25%)</title><rect x="1.5355%" y="357" width="0.2520%" height="15" fill="rgb(230,49,44)" fg:x="210421141" fg:w="34527820"/><text x="1.7855%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (29,731,046 samples, 0.22%)</title><rect x="1.5705%" y="341" width="0.2170%" height="15" fill="rgb(229,67,23)" fg:x="215217915" fg:w="29731046"/><text x="1.8205%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (29,731,046 samples, 0.22%)</title><rect x="1.5705%" y="325" width="0.2170%" height="15" fill="rgb(249,83,47)" fg:x="215217915" fg:w="29731046"/><text x="1.8205%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (29,731,046 samples, 0.22%)</title><rect x="1.5705%" y="309" width="0.2170%" height="15" fill="rgb(215,43,3)" fg:x="215217915" fg:w="29731046"/><text x="1.8205%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (29,642,532 samples, 0.22%)</title><rect x="1.5712%" y="293" width="0.2163%" height="15" fill="rgb(238,154,13)" fg:x="215306429" fg:w="29642532"/><text x="1.8212%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (29,642,532 samples, 0.22%)</title><rect x="1.5712%" y="277" width="0.2163%" height="15" fill="rgb(219,56,2)" fg:x="215306429" fg:w="29642532"/><text x="1.8212%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (29,642,532 samples, 0.22%)</title><rect x="1.5712%" y="261" width="0.2163%" height="15" fill="rgb(233,0,4)" fg:x="215306429" fg:w="29642532"/><text x="1.8212%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (5,585,245 samples, 0.04%)</title><rect x="1.7467%" y="245" width="0.0408%" height="15" fill="rgb(235,30,7)" fg:x="239363716" fg:w="5585245"/><text x="1.9967%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,977,404 samples, 0.03%)</title><rect x="1.8668%" y="357" width="0.0290%" height="15" fill="rgb(250,79,13)" fg:x="255812812" fg:w="3977404"/><text x="2.1168%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,721,785 samples, 0.06%)</title><rect x="1.8472%" y="373" width="0.0563%" height="15" fill="rgb(211,146,34)" fg:x="253125801" fg:w="7721785"/><text x="2.0972%" y="383.50"></text></g><g><title>core::hash::sip::u8to64_le (1,999,948 samples, 0.01%)</title><rect x="1.9035%" y="373" width="0.0146%" height="15" fill="rgb(228,22,38)" fg:x="260847586" fg:w="1999948"/><text x="2.1535%" y="383.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb76bce5d274bf2f8E.llvm.18359322787921612134 (17,437,219 samples, 0.13%)</title><rect x="1.7921%" y="389" width="0.1272%" height="15" fill="rgb(235,168,5)" fg:x="245584729" fg:w="17437219"/><text x="2.0421%" y="399.50"></text></g><g><title>core::fmt::write (2,295,439 samples, 0.02%)</title><rect x="1.9372%" y="389" width="0.0168%" height="15" fill="rgb(221,155,16)" fg:x="265463166" fg:w="2295439"/><text x="2.1872%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,734,434 samples, 0.04%)</title><rect x="1.9640%" y="309" width="0.0418%" height="15" fill="rgb(215,215,53)" fg:x="269129785" fg:w="5734434"/><text x="2.2140%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;]&gt; (5,734,434 samples, 0.04%)</title><rect x="1.9640%" y="293" width="0.0418%" height="15" fill="rgb(223,4,10)" fg:x="269129785" fg:w="5734434"/><text x="2.2140%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt; (5,643,194 samples, 0.04%)</title><rect x="1.9646%" y="277" width="0.0412%" height="15" fill="rgb(234,103,6)" fg:x="269221025" fg:w="5643194"/><text x="2.2146%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::util::primitives::StateID&gt;&gt; (5,643,194 samples, 0.04%)</title><rect x="1.9646%" y="261" width="0.0412%" height="15" fill="rgb(227,97,0)" fg:x="269221025" fg:w="5643194"/><text x="2.2146%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,643,194 samples, 0.04%)</title><rect x="1.9646%" y="245" width="0.0412%" height="15" fill="rgb(234,150,53)" fg:x="269221025" fg:w="5643194"/><text x="2.2146%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;&gt;&gt; (7,453,271 samples, 0.05%)</title><rect x="1.9640%" y="373" width="0.0544%" height="15" fill="rgb(228,201,54)" fg:x="269129785" fg:w="7453271"/><text x="2.2140%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,453,271 samples, 0.05%)</title><rect x="1.9640%" y="357" width="0.0544%" height="15" fill="rgb(222,22,37)" fg:x="269129785" fg:w="7453271"/><text x="2.2140%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;]&gt; (7,453,271 samples, 0.05%)</title><rect x="1.9640%" y="341" width="0.0544%" height="15" fill="rgb(237,53,32)" fg:x="269129785" fg:w="7453271"/><text x="2.2140%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;&gt; (7,453,271 samples, 0.05%)</title><rect x="1.9640%" y="325" width="0.0544%" height="15" fill="rgb(233,25,53)" fg:x="269129785" fg:w="7453271"/><text x="2.2140%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;&gt; (1,718,837 samples, 0.01%)</title><rect x="2.0058%" y="309" width="0.0125%" height="15" fill="rgb(210,40,34)" fg:x="274864219" fg:w="1718837"/><text x="2.2558%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,718,837 samples, 0.01%)</title><rect x="2.0058%" y="293" width="0.0125%" height="15" fill="rgb(241,220,44)" fg:x="274864219" fg:w="1718837"/><text x="2.2558%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,718,837 samples, 0.01%)</title><rect x="2.0058%" y="277" width="0.0125%" height="15" fill="rgb(235,28,35)" fg:x="274864219" fg:w="1718837"/><text x="2.2558%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,718,837 samples, 0.01%)</title><rect x="2.0058%" y="261" width="0.0125%" height="15" fill="rgb(210,56,17)" fg:x="274864219" fg:w="1718837"/><text x="2.2558%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1,718,837 samples, 0.01%)</title><rect x="2.0058%" y="245" width="0.0125%" height="15" fill="rgb(224,130,29)" fg:x="274864219" fg:w="1718837"/><text x="2.2558%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,718,837 samples, 0.01%)</title><rect x="2.0058%" y="229" width="0.0125%" height="15" fill="rgb(235,212,8)" fg:x="274864219" fg:w="1718837"/><text x="2.2558%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::dfa::minimize::Minimizer&gt; (7,906,239 samples, 0.06%)</title><rect x="1.9640%" y="389" width="0.0577%" height="15" fill="rgb(223,33,50)" fg:x="269129785" fg:w="7906239"/><text x="2.2140%" y="399.50"></text></g><g><title>core::slice::sort::stable::drift::create_run (2,743,443 samples, 0.02%)</title><rect x="2.0312%" y="373" width="0.0200%" height="15" fill="rgb(219,149,13)" fg:x="278347908" fg:w="2743443"/><text x="2.2812%" y="383.50"></text></g><g><title>core::slice::sort::shared::find_existing_run (2,655,850 samples, 0.02%)</title><rect x="2.0319%" y="357" width="0.0194%" height="15" fill="rgb(250,156,29)" fg:x="278435501" fg:w="2655850"/><text x="2.2819%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,511,303 samples, 0.01%)</title><rect x="2.0402%" y="341" width="0.0110%" height="15" fill="rgb(216,193,19)" fg:x="279580048" fg:w="1511303"/><text x="2.2902%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::lt (1,511,303 samples, 0.01%)</title><rect x="2.0402%" y="325" width="0.0110%" height="15" fill="rgb(216,135,14)" fg:x="279580048" fg:w="1511303"/><text x="2.2902%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (1,511,303 samples, 0.01%)</title><rect x="2.0402%" y="309" width="0.0110%" height="15" fill="rgb(241,47,5)" fg:x="279580048" fg:w="1511303"/><text x="2.2902%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,511,303 samples, 0.01%)</title><rect x="2.0402%" y="293" width="0.0110%" height="15" fill="rgb(233,42,35)" fg:x="279580048" fg:w="1511303"/><text x="2.2902%" y="303.50"></text></g><g><title>core::cmp::Ordering::is_lt (1,511,303 samples, 0.01%)</title><rect x="2.0402%" y="277" width="0.0110%" height="15" fill="rgb(231,13,6)" fg:x="279580048" fg:w="1511303"/><text x="2.2902%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,576,715 samples, 0.01%)</title><rect x="2.0845%" y="325" width="0.0115%" height="15" fill="rgb(207,181,40)" fg:x="285649068" fg:w="1576715"/><text x="2.3345%" y="335.50"></text></g><g><title>core::slice::sort::stable::drift::sort (10,886,866 samples, 0.08%)</title><rect x="2.0293%" y="389" width="0.0794%" height="15" fill="rgb(254,173,49)" fg:x="278084800" fg:w="10886866"/><text x="2.2793%" y="399.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (7,880,315 samples, 0.06%)</title><rect x="2.0513%" y="373" width="0.0575%" height="15" fill="rgb(221,1,38)" fg:x="281091351" fg:w="7880315"/><text x="2.3013%" y="383.50"></text></g><g><title>core::slice::sort::stable::merge::merge (7,880,315 samples, 0.06%)</title><rect x="2.0513%" y="357" width="0.0575%" height="15" fill="rgb(206,124,46)" fg:x="281091351" fg:w="7880315"/><text x="2.3013%" y="367.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_down (7,704,706 samples, 0.06%)</title><rect x="2.0525%" y="341" width="0.0562%" height="15" fill="rgb(249,21,11)" fg:x="281266960" fg:w="7704706"/><text x="2.3025%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,394,960 samples, 0.01%)</title><rect x="2.0986%" y="325" width="0.0102%" height="15" fill="rgb(222,201,40)" fg:x="287576706" fg:w="1394960"/><text x="2.3486%" y="335.50"></text></g><g><title>[unknown] (1,713,656 samples, 0.01%)</title><rect x="2.1339%" y="261" width="0.0125%" height="15" fill="rgb(235,61,29)" fg:x="292420326" fg:w="1713656"/><text x="2.3839%" y="271.50"></text></g><g><title>[unknown] (1,409,146 samples, 0.01%)</title><rect x="2.1361%" y="245" width="0.0103%" height="15" fill="rgb(219,207,3)" fg:x="292724836" fg:w="1409146"/><text x="2.3861%" y="255.50"></text></g><g><title>_int_malloc (2,756,065 samples, 0.02%)</title><rect x="2.1281%" y="277" width="0.0201%" height="15" fill="rgb(222,56,46)" fg:x="291616582" fg:w="2756065"/><text x="2.3781%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,372,387 samples, 0.03%)</title><rect x="2.1168%" y="357" width="0.0319%" height="15" fill="rgb(239,76,54)" fg:x="290066899" fg:w="4372387"/><text x="2.3668%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,372,387 samples, 0.03%)</title><rect x="2.1168%" y="341" width="0.0319%" height="15" fill="rgb(231,124,27)" fg:x="290066899" fg:w="4372387"/><text x="2.3668%" y="351.50"></text></g><g><title>alloc::alloc::realloc (4,372,387 samples, 0.03%)</title><rect x="2.1168%" y="325" width="0.0319%" height="15" fill="rgb(249,195,6)" fg:x="290066899" fg:w="4372387"/><text x="2.3668%" y="335.50"></text></g><g><title>realloc (4,372,387 samples, 0.03%)</title><rect x="2.1168%" y="309" width="0.0319%" height="15" fill="rgb(237,174,47)" fg:x="290066899" fg:w="4372387"/><text x="2.3668%" y="319.50"></text></g><g><title>_int_realloc (4,122,896 samples, 0.03%)</title><rect x="2.1186%" y="293" width="0.0301%" height="15" fill="rgb(206,201,31)" fg:x="290316390" fg:w="4122896"/><text x="2.3686%" y="303.50"></text></g><g><title>main_arena (4,943,900 samples, 0.04%)</title><rect x="2.1163%" y="389" width="0.0361%" height="15" fill="rgb(231,57,52)" fg:x="290002053" fg:w="4943900"/><text x="2.3663%" y="399.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h849338d51e78e268E.llvm.13480382585952625708 (4,943,900 samples, 0.04%)</title><rect x="2.1163%" y="373" width="0.0361%" height="15" fill="rgb(248,177,22)" fg:x="290002053" fg:w="4943900"/><text x="2.3663%" y="383.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::remap_state (1,373,005 samples, 0.01%)</title><rect x="2.1549%" y="341" width="0.0100%" height="15" fill="rgb(215,211,37)" fg:x="295293202" fg:w="1373005"/><text x="2.4049%" y="351.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;alloc::vec::Vec&lt;u32&gt;&gt;::remap (1,373,005 samples, 0.01%)</title><rect x="2.1549%" y="325" width="0.0100%" height="15" fill="rgb(241,128,51)" fg:x="295293202" fg:w="1373005"/><text x="2.4049%" y="335.50"></text></g><g><title>regex_automata::dfa::dense::Builder::build_from_nfa (1,992,727 samples, 0.01%)</title><rect x="2.1524%" y="389" width="0.0145%" height="15" fill="rgb(227,165,31)" fg:x="294945953" fg:w="1992727"/><text x="2.4024%" y="399.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::minimize (1,992,727 samples, 0.01%)</title><rect x="2.1524%" y="373" width="0.0145%" height="15" fill="rgb(228,167,24)" fg:x="294945953" fg:w="1992727"/><text x="2.4024%" y="383.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::run (1,992,727 samples, 0.01%)</title><rect x="2.1524%" y="357" width="0.0145%" height="15" fill="rgb(228,143,12)" fg:x="294945953" fg:w="1992727"/><text x="2.4024%" y="367.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::set_transition (1,800,698 samples, 0.01%)</title><rect x="2.1669%" y="389" width="0.0131%" height="15" fill="rgb(249,149,8)" fg:x="296938680" fg:w="1800698"/><text x="2.4169%" y="399.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;alloc::vec::Vec&lt;u32&gt;&gt;::set (1,621,736 samples, 0.01%)</title><rect x="2.1682%" y="373" width="0.0118%" height="15" fill="rgb(243,35,44)" fg:x="297117642" fg:w="1621736"/><text x="2.4182%" y="383.50"></text></g><g><title>regex_automata::dfa::determinize::Config::run (1,718,430 samples, 0.01%)</title><rect x="2.1820%" y="389" width="0.0125%" height="15" fill="rgb(246,89,9)" fg:x="299002293" fg:w="1718430"/><text x="2.4320%" y="399.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::run (1,718,430 samples, 0.01%)</title><rect x="2.1820%" y="373" width="0.0125%" height="15" fill="rgb(233,213,13)" fg:x="299002293" fg:w="1718430"/><text x="2.4320%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14,498,006 samples, 0.11%)</title><rect x="3.2864%" y="357" width="0.1058%" height="15" fill="rgb(233,141,41)" fg:x="450343901" fg:w="14498006"/><text x="3.5364%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (14,498,006 samples, 0.11%)</title><rect x="3.2864%" y="341" width="0.1058%" height="15" fill="rgb(239,167,4)" fg:x="450343901" fg:w="14498006"/><text x="3.5364%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13,619,648 samples, 0.10%)</title><rect x="3.2928%" y="325" width="0.0994%" height="15" fill="rgb(209,217,16)" fg:x="451222259" fg:w="13619648"/><text x="3.5428%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (13,619,648 samples, 0.10%)</title><rect x="3.2928%" y="309" width="0.0994%" height="15" fill="rgb(219,88,35)" fg:x="451222259" fg:w="13619648"/><text x="3.5428%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (13,619,648 samples, 0.10%)</title><rect x="3.2928%" y="293" width="0.0994%" height="15" fill="rgb(220,193,23)" fg:x="451222259" fg:w="13619648"/><text x="3.5428%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (13,619,648 samples, 0.10%)</title><rect x="3.2928%" y="277" width="0.0994%" height="15" fill="rgb(230,90,52)" fg:x="451222259" fg:w="13619648"/><text x="3.5428%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (28,933,857 samples, 0.21%)</title><rect x="3.2864%" y="373" width="0.2111%" height="15" fill="rgb(252,106,19)" fg:x="450343901" fg:w="28933857"/><text x="3.5364%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14,435,851 samples, 0.11%)</title><rect x="3.3922%" y="357" width="0.1053%" height="15" fill="rgb(206,74,20)" fg:x="464841907" fg:w="14435851"/><text x="3.6422%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14,435,851 samples, 0.11%)</title><rect x="3.3922%" y="341" width="0.1053%" height="15" fill="rgb(230,138,44)" fg:x="464841907" fg:w="14435851"/><text x="3.6422%" y="351.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::inner (10,576,291 samples, 0.08%)</title><rect x="3.7029%" y="341" width="0.0772%" height="15" fill="rgb(235,182,43)" fg:x="507427069" fg:w="10576291"/><text x="3.9529%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (10,576,291 samples, 0.08%)</title><rect x="3.7029%" y="325" width="0.0772%" height="15" fill="rgb(242,16,51)" fg:x="507427069" fg:w="10576291"/><text x="3.9529%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (65,709,076 samples, 0.48%)</title><rect x="3.7801%" y="325" width="0.4795%" height="15" fill="rgb(248,9,4)" fg:x="518003360" fg:w="65709076"/><text x="4.0301%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (65,709,076 samples, 0.48%)</title><rect x="3.7801%" y="309" width="0.4795%" height="15" fill="rgb(210,31,22)" fg:x="518003360" fg:w="65709076"/><text x="4.0301%" y="319.50"></text></g><g><title>core::mem::replace (65,709,076 samples, 0.48%)</title><rect x="3.7801%" y="293" width="0.4795%" height="15" fill="rgb(239,54,39)" fg:x="518003360" fg:w="65709076"/><text x="4.0301%" y="303.50"></text></g><g><title>core::ptr::write (65,709,076 samples, 0.48%)</title><rect x="3.7801%" y="277" width="0.4795%" height="15" fill="rgb(230,99,41)" fg:x="518003360" fg:w="65709076"/><text x="4.0301%" y="287.50"></text></g><g><title>&lt;regex_automata::dfa::minimize::StateSet as core::clone::Clone&gt;::clone (226,946,932 samples, 1.66%)</title><rect x="3.4975%" y="373" width="1.6561%" height="15" fill="rgb(253,106,12)" fg:x="479277758" fg:w="226946932"/><text x="3.7475%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (226,946,932 samples, 1.66%)</title><rect x="3.4975%" y="357" width="1.6561%" height="15" fill="rgb(213,46,41)" fg:x="479277758" fg:w="226946932"/><text x="3.7475%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (188,221,330 samples, 1.37%)</title><rect x="3.7801%" y="341" width="1.3735%" height="15" fill="rgb(215,133,35)" fg:x="518003360" fg:w="188221330"/><text x="4.0301%" y="351.50"></text></g><g><title>core::intrinsics::unlikely (122,512,254 samples, 0.89%)</title><rect x="4.2596%" y="325" width="0.8940%" height="15" fill="rgb(213,28,5)" fg:x="583712436" fg:w="122512254"/><text x="4.5096%" y="335.50"></text></g><g><title>&lt;regex_automata::util::alphabet::ByteClassIter as core::iter::traits::iterator::Iterator&gt;::next (4,085,522 samples, 0.03%)</title><rect x="5.1536%" y="373" width="0.0298%" height="15" fill="rgb(215,77,49)" fg:x="706224690" fg:w="4085522"/><text x="5.4036%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (107,774,091 samples, 0.79%)</title><rect x="5.1848%" y="373" width="0.7865%" height="15" fill="rgb(248,100,22)" fg:x="710487553" fg:w="107774091"/><text x="5.4348%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::dfa::minimize::StateSet]&gt; (107,774,091 samples, 0.79%)</title><rect x="5.1848%" y="357" width="0.7865%" height="15" fill="rgb(208,67,9)" fg:x="710487553" fg:w="107774091"/><text x="5.4348%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::dfa::minimize::StateSet&gt; (93,144,638 samples, 0.68%)</title><rect x="5.2915%" y="341" width="0.6797%" height="15" fill="rgb(219,133,21)" fg:x="725117006" fg:w="93144638"/><text x="5.5415%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;&gt;&gt; (93,144,638 samples, 0.68%)</title><rect x="5.2915%" y="325" width="0.6797%" height="15" fill="rgb(246,46,29)" fg:x="725117006" fg:w="93144638"/><text x="5.5415%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (93,144,638 samples, 0.68%)</title><rect x="5.2915%" y="309" width="0.6797%" height="15" fill="rgb(246,185,52)" fg:x="725117006" fg:w="93144638"/><text x="5.5415%" y="319.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (11,976,452 samples, 0.09%)</title><rect x="5.8838%" y="293" width="0.0874%" height="15" fill="rgb(252,136,11)" fg:x="806285192" fg:w="11976452"/><text x="6.1338%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (11,976,452 samples, 0.09%)</title><rect x="5.8838%" y="277" width="0.0874%" height="15" fill="rgb(219,138,53)" fg:x="806285192" fg:w="11976452"/><text x="6.1338%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (11,976,452 samples, 0.09%)</title><rect x="5.8838%" y="261" width="0.0874%" height="15" fill="rgb(211,51,23)" fg:x="806285192" fg:w="11976452"/><text x="6.1338%" y="271.50"></text></g><g><title>core::mem::replace (11,976,452 samples, 0.09%)</title><rect x="5.8838%" y="245" width="0.0874%" height="15" fill="rgb(247,221,28)" fg:x="806285192" fg:w="11976452"/><text x="6.1338%" y="255.50"></text></g><g><title>core::ptr::write (11,976,452 samples, 0.09%)</title><rect x="5.8838%" y="229" width="0.0874%" height="15" fill="rgb(251,222,45)" fg:x="806285192" fg:w="11976452"/><text x="6.1338%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14,248,250 samples, 0.10%)</title><rect x="5.9712%" y="373" width="0.1040%" height="15" fill="rgb(217,162,53)" fg:x="818261644" fg:w="14248250"/><text x="6.2212%" y="383.50"></text></g><g><title>core::ptr::write (1,844,501 samples, 0.01%)</title><rect x="6.0618%" y="357" width="0.0135%" height="15" fill="rgb(229,93,14)" fg:x="830665393" fg:w="1844501"/><text x="6.3118%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,014,376 samples, 0.01%)</title><rect x="6.0752%" y="373" width="0.0147%" height="15" fill="rgb(209,67,49)" fg:x="832509894" fg:w="2014376"/><text x="6.3252%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,014,376 samples, 0.01%)</title><rect x="6.0752%" y="357" width="0.0147%" height="15" fill="rgb(213,87,29)" fg:x="832509894" fg:w="2014376"/><text x="6.3252%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup (1,571,159 samples, 0.01%)</title><rect x="6.0995%" y="341" width="0.0115%" height="15" fill="rgb(205,151,52)" fg:x="835844977" fg:w="1571159"/><text x="6.3495%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup_by (1,571,159 samples, 0.01%)</title><rect x="6.0995%" y="325" width="0.0115%" height="15" fill="rgb(253,215,39)" fg:x="835844977" fg:w="1571159"/><text x="6.3495%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup::_{{closure}} (1,405,300 samples, 0.01%)</title><rect x="6.1008%" y="309" width="0.0103%" height="15" fill="rgb(221,220,41)" fg:x="836010836" fg:w="1405300"/><text x="6.3508%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;mut A&gt;::eq (1,405,300 samples, 0.01%)</title><rect x="6.1008%" y="293" width="0.0103%" height="15" fill="rgb(218,133,21)" fg:x="836010836" fg:w="1405300"/><text x="6.3508%" y="303.50"></text></g><g><title>&lt;regex_automata::util::primitives::StateID as core::cmp::PartialEq&gt;::eq (1,405,300 samples, 0.01%)</title><rect x="6.1008%" y="277" width="0.0103%" height="15" fill="rgb(221,193,43)" fg:x="836010836" fg:w="1405300"/><text x="6.3508%" y="287.50"></text></g><g><title>&lt;regex_automata::util::primitives::SmallIndex as core::cmp::PartialEq&gt;::eq (1,405,300 samples, 0.01%)</title><rect x="6.1008%" y="261" width="0.0103%" height="15" fill="rgb(240,128,52)" fg:x="836010836" fg:w="1405300"/><text x="6.3508%" y="271.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::canonicalize (2,630,617 samples, 0.02%)</title><rect x="6.0924%" y="357" width="0.0192%" height="15" fill="rgb(253,114,12)" fg:x="834872075" fg:w="2630617"/><text x="6.3424%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,642,231 samples, 0.01%)</title><rect x="6.1160%" y="341" width="0.0120%" height="15" fill="rgb(215,223,47)" fg:x="838105158" fg:w="1642231"/><text x="6.3660%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6,181,112 samples, 0.05%)</title><rect x="6.1324%" y="325" width="0.0451%" height="15" fill="rgb(248,225,23)" fg:x="840343233" fg:w="6181112"/><text x="6.3824%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,490,100 samples, 0.04%)</title><rect x="6.1374%" y="309" width="0.0401%" height="15" fill="rgb(250,108,0)" fg:x="841034245" fg:w="5490100"/><text x="6.3874%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,490,100 samples, 0.04%)</title><rect x="6.1374%" y="293" width="0.0401%" height="15" fill="rgb(228,208,7)" fg:x="841034245" fg:w="5490100"/><text x="6.3874%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37,591,349 samples, 0.27%)</title><rect x="6.1775%" y="325" width="0.2743%" height="15" fill="rgb(244,45,10)" fg:x="846524345" fg:w="37591349"/><text x="6.4275%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (37,414,986 samples, 0.27%)</title><rect x="6.1788%" y="309" width="0.2730%" height="15" fill="rgb(207,125,25)" fg:x="846700708" fg:w="37414986"/><text x="6.4288%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,061,227 samples, 0.04%)</title><rect x="6.4525%" y="309" width="0.0369%" height="15" fill="rgb(210,195,18)" fg:x="884205065" fg:w="5061227"/><text x="6.7025%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (7,515,138 samples, 0.05%)</title><rect x="6.4894%" y="309" width="0.0548%" height="15" fill="rgb(249,80,12)" fg:x="889266292" fg:w="7515138"/><text x="6.7394%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (7,515,138 samples, 0.05%)</title><rect x="6.4894%" y="293" width="0.0548%" height="15" fill="rgb(221,65,9)" fg:x="889266292" fg:w="7515138"/><text x="6.7394%" y="303.50"></text></g><g><title>core::cell::BorrowRefMut::new (7,515,138 samples, 0.05%)</title><rect x="6.4894%" y="277" width="0.0548%" height="15" fill="rgb(235,49,36)" fg:x="889266292" fg:w="7515138"/><text x="6.7394%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (5,741,972 samples, 0.04%)</title><rect x="6.5023%" y="261" width="0.0419%" height="15" fill="rgb(225,32,20)" fg:x="891039458" fg:w="5741972"/><text x="6.7523%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (5,741,972 samples, 0.04%)</title><rect x="6.5023%" y="245" width="0.0419%" height="15" fill="rgb(215,141,46)" fg:x="891039458" fg:w="5741972"/><text x="6.7523%" y="255.50"></text></g><g><title>core::mem::replace (5,741,972 samples, 0.04%)</title><rect x="6.5023%" y="229" width="0.0419%" height="15" fill="rgb(250,160,47)" fg:x="891039458" fg:w="5741972"/><text x="6.7523%" y="239.50"></text></g><g><title>core::ptr::write (5,741,972 samples, 0.04%)</title><rect x="6.5023%" y="213" width="0.0419%" height="15" fill="rgb(216,222,40)" fg:x="891039458" fg:w="5741972"/><text x="6.7523%" y="223.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::find_incoming_to (63,032,630 samples, 0.46%)</title><rect x="6.0906%" y="373" width="0.4600%" height="15" fill="rgb(234,217,39)" fg:x="834613204" fg:w="63032630"/><text x="6.3406%" y="383.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::iter (59,890,769 samples, 0.44%)</title><rect x="6.1135%" y="357" width="0.4371%" height="15" fill="rgb(207,178,40)" fg:x="837755065" fg:w="59890769"/><text x="6.3635%" y="367.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::find_incoming_to::_{{closure}} (57,302,601 samples, 0.42%)</title><rect x="6.1324%" y="341" width="0.4182%" height="15" fill="rgb(221,136,13)" fg:x="840343233" fg:w="57302601"/><text x="6.3824%" y="351.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::add (13,440,769 samples, 0.10%)</title><rect x="6.4525%" y="325" width="0.0981%" height="15" fill="rgb(249,199,10)" fg:x="884205065" fg:w="13440769"/><text x="6.7025%" y="335.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4,002,381 samples, 0.03%)</title><rect x="6.6122%" y="245" width="0.0292%" height="15" fill="rgb(249,222,13)" fg:x="906100392" fg:w="4002381"/><text x="6.8622%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,002,381 samples, 0.03%)</title><rect x="6.6122%" y="229" width="0.0292%" height="15" fill="rgb(244,185,38)" fg:x="906100392" fg:w="4002381"/><text x="6.8622%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,002,381 samples, 0.03%)</title><rect x="6.6122%" y="213" width="0.0292%" height="15" fill="rgb(236,202,9)" fg:x="906100392" fg:w="4002381"/><text x="6.8622%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1,801,495 samples, 0.01%)</title><rect x="6.6496%" y="197" width="0.0131%" height="15" fill="rgb(250,229,37)" fg:x="911219568" fg:w="1801495"/><text x="6.8996%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1,801,495 samples, 0.01%)</title><rect x="6.6496%" y="181" width="0.0131%" height="15" fill="rgb(206,174,23)" fg:x="911219568" fg:w="1801495"/><text x="6.8996%" y="191.50"></text></g><g><title>core::mem::replace (1,801,495 samples, 0.01%)</title><rect x="6.6496%" y="165" width="0.0131%" height="15" fill="rgb(211,33,43)" fg:x="911219568" fg:w="1801495"/><text x="6.8996%" y="175.50"></text></g><g><title>core::ptr::write (1,801,495 samples, 0.01%)</title><rect x="6.6496%" y="149" width="0.0131%" height="15" fill="rgb(245,58,50)" fg:x="911219568" fg:w="1801495"/><text x="6.8996%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (9,925,138 samples, 0.07%)</title><rect x="6.6414%" y="245" width="0.0724%" height="15" fill="rgb(244,68,36)" fg:x="910102773" fg:w="9925138"/><text x="6.8914%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (9,925,138 samples, 0.07%)</title><rect x="6.6414%" y="229" width="0.0724%" height="15" fill="rgb(232,229,15)" fg:x="910102773" fg:w="9925138"/><text x="6.8914%" y="239.50"></text></g><g><title>core::cell::BorrowRef::new (9,925,138 samples, 0.07%)</title><rect x="6.6414%" y="213" width="0.0724%" height="15" fill="rgb(254,30,23)" fg:x="910102773" fg:w="9925138"/><text x="6.8914%" y="223.50"></text></g><g><title>core::cell::is_reading (7,006,848 samples, 0.05%)</title><rect x="6.6627%" y="197" width="0.0511%" height="15" fill="rgb(235,160,14)" fg:x="913021063" fg:w="7006848"/><text x="6.9127%" y="207.50"></text></g><g><title>&lt;core::cell::RefCell&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15,297,728 samples, 0.11%)</title><rect x="6.6116%" y="261" width="0.1116%" height="15" fill="rgb(212,155,44)" fg:x="906010915" fg:w="15297728"/><text x="6.8616%" y="271.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::find_waiting (24,187,888 samples, 0.18%)</title><rect x="6.5505%" y="373" width="0.1765%" height="15" fill="rgb(226,2,50)" fg:x="897645834" fg:w="24187888"/><text x="6.8005%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (24,187,888 samples, 0.18%)</title><rect x="6.5505%" y="357" width="0.1765%" height="15" fill="rgb(234,177,6)" fg:x="897645834" fg:w="24187888"/><text x="6.8005%" y="367.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::find_waiting::_{{closure}} (16,258,876 samples, 0.12%)</title><rect x="6.6084%" y="341" width="0.1186%" height="15" fill="rgb(217,24,9)" fg:x="905574846" fg:w="16258876"/><text x="6.8584%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16,258,876 samples, 0.12%)</title><rect x="6.6084%" y="325" width="0.1186%" height="15" fill="rgb(220,13,46)" fg:x="905574846" fg:w="16258876"/><text x="6.8584%" y="335.50"></text></g><g><title>&lt;regex_automata::dfa::minimize::StateSet as core::cmp::PartialEq&gt;::eq (16,258,876 samples, 0.12%)</title><rect x="6.6084%" y="309" width="0.1186%" height="15" fill="rgb(239,221,27)" fg:x="905574846" fg:w="16258876"/><text x="6.8584%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (16,258,876 samples, 0.12%)</title><rect x="6.6084%" y="293" width="0.1186%" height="15" fill="rgb(222,198,25)" fg:x="905574846" fg:w="16258876"/><text x="6.8584%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as alloc::rc::RcEqIdent&lt;T,A&gt;&gt;::eq (16,258,876 samples, 0.12%)</title><rect x="6.6084%" y="277" width="0.1186%" height="15" fill="rgb(211,99,13)" fg:x="905574846" fg:w="16258876"/><text x="6.8584%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,216,578,828 samples, 23.47%)</title><rect x="8.2214%" y="325" width="23.4729%" height="15" fill="rgb(232,111,31)" fg:x="1126603804" fg:w="3216578828"/><text x="8.4714%" y="335.50">&lt;core::ptr::non_null::NonNull&lt;T&gt; as c..</text></g><g><title>[unknown] (2,077,836 samples, 0.02%)</title><rect x="31.6791%" y="309" width="0.0152%" height="15" fill="rgb(245,82,37)" fg:x="4341104796" fg:w="2077836"/><text x="31.9291%" y="319.50"></text></g><g><title>[unknown] (1,619,336 samples, 0.01%)</title><rect x="31.6824%" y="293" width="0.0118%" height="15" fill="rgb(227,149,46)" fg:x="4341563296" fg:w="1619336"/><text x="31.9324%" y="303.50"></text></g><g><title>[unknown] (1,619,336 samples, 0.01%)</title><rect x="31.6824%" y="277" width="0.0118%" height="15" fill="rgb(218,36,50)" fg:x="4341563296" fg:w="1619336"/><text x="31.9324%" y="287.50"></text></g><g><title>[unknown] (1,619,336 samples, 0.01%)</title><rect x="31.6824%" y="261" width="0.0118%" height="15" fill="rgb(226,80,48)" fg:x="4341563296" fg:w="1619336"/><text x="31.9324%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,518,379,126 samples, 69.46%)</title><rect x="7.6023%" y="341" width="69.4600%" height="15" fill="rgb(238,224,15)" fg:x="1041769790" fg:w="9518379126"/><text x="7.8523%" y="351.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (6,216,876,007 samples, 45.37%)</title><rect x="31.6949%" y="325" width="45.3674%" height="15" fill="rgb(241,136,10)" fg:x="4343272909" fg:w="6216876007"/><text x="31.9449%" y="335.50">core::ptr::non_null::NonNull&lt;T&gt;::add</text></g><g><title>[unknown] (5,282,596 samples, 0.04%)</title><rect x="77.0238%" y="309" width="0.0385%" height="15" fill="rgb(208,32,45)" fg:x="10554866320" fg:w="5282596"/><text x="77.2738%" y="319.50"></text></g><g><title>[unknown] (4,116,189 samples, 0.03%)</title><rect x="77.0323%" y="293" width="0.0300%" height="15" fill="rgb(207,135,9)" fg:x="10556032727" fg:w="4116189"/><text x="77.2823%" y="303.50"></text></g><g><title>[unknown] (4,025,884 samples, 0.03%)</title><rect x="77.0329%" y="277" width="0.0294%" height="15" fill="rgb(206,86,44)" fg:x="10556123032" fg:w="4025884"/><text x="77.2829%" y="287.50"></text></g><g><title>[unknown] (3,404,656 samples, 0.02%)</title><rect x="77.0375%" y="261" width="0.0248%" height="15" fill="rgb(245,177,15)" fg:x="10556744260" fg:w="3404656"/><text x="77.2875%" y="271.50"></text></g><g><title>[unknown] (3,135,908 samples, 0.02%)</title><rect x="77.0394%" y="245" width="0.0229%" height="15" fill="rgb(206,64,50)" fg:x="10557013008" fg:w="3135908"/><text x="77.2894%" y="255.50"></text></g><g><title>[unknown] (2,420,454 samples, 0.02%)</title><rect x="77.0447%" y="229" width="0.0177%" height="15" fill="rgb(234,36,40)" fg:x="10557728462" fg:w="2420454"/><text x="77.2947%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,537,859,247 samples, 69.60%)</title><rect x="7.6023%" y="357" width="69.6022%" height="15" fill="rgb(213,64,8)" fg:x="1041769790" fg:w="9537859247"/><text x="7.8523%" y="367.50">&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (19,480,121 samples, 0.14%)</title><rect x="77.0623%" y="341" width="0.1422%" height="15" fill="rgb(210,75,36)" fg:x="10560148916" fg:w="19480121"/><text x="77.3123%" y="351.50"></text></g><g><title>&lt;regex_automata::util::primitives::StateID as core::cmp::PartialEq&gt;::eq (19,658,912 samples, 0.14%)</title><rect x="77.2045%" y="357" width="0.1435%" height="15" fill="rgb(229,88,21)" fg:x="10579629037" fg:w="19658912"/><text x="77.4545%" y="367.50"></text></g><g><title>&lt;regex_automata::util::primitives::SmallIndex as core::cmp::PartialEq&gt;::eq (19,658,912 samples, 0.14%)</title><rect x="77.2045%" y="341" width="0.1435%" height="15" fill="rgb(252,204,47)" fg:x="10579629037" fg:w="19658912"/><text x="77.4545%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (30,916,859 samples, 0.23%)</title><rect x="77.3689%" y="309" width="0.2256%" height="15" fill="rgb(208,77,27)" fg:x="10602158302" fg:w="30916859"/><text x="77.6189%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (5,220,887 samples, 0.04%)</title><rect x="77.5945%" y="309" width="0.0381%" height="15" fill="rgb(221,76,26)" fg:x="10633075161" fg:w="5220887"/><text x="77.8445%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (5,220,887 samples, 0.04%)</title><rect x="77.5945%" y="293" width="0.0381%" height="15" fill="rgb(225,139,18)" fg:x="10633075161" fg:w="5220887"/><text x="77.8445%" y="303.50"></text></g><g><title>core::mem::replace (5,220,887 samples, 0.04%)</title><rect x="77.5945%" y="277" width="0.0381%" height="15" fill="rgb(230,137,11)" fg:x="10633075161" fg:w="5220887"/><text x="77.8445%" y="287.50"></text></g><g><title>core::ptr::write (5,220,887 samples, 0.04%)</title><rect x="77.5945%" y="261" width="0.0381%" height="15" fill="rgb(212,28,1)" fg:x="10633075161" fg:w="5220887"/><text x="77.8445%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (40,299,742 samples, 0.29%)</title><rect x="77.3492%" y="357" width="0.2941%" height="15" fill="rgb(248,164,17)" fg:x="10599467733" fg:w="40299742"/><text x="77.5992%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (40,299,742 samples, 0.29%)</title><rect x="77.3492%" y="341" width="0.2941%" height="15" fill="rgb(222,171,42)" fg:x="10599467733" fg:w="40299742"/><text x="77.5992%" y="351.50"></text></g><g><title>core::cell::BorrowRef::new (40,299,742 samples, 0.29%)</title><rect x="77.3492%" y="325" width="0.2941%" height="15" fill="rgb(243,84,45)" fg:x="10599467733" fg:w="40299742"/><text x="77.5992%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt;&gt; (75,846,293 samples, 0.55%)</title><rect x="77.6433%" y="357" width="0.5535%" height="15" fill="rgb(252,49,23)" fg:x="10639767475" fg:w="75846293"/><text x="77.8933%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (75,846,293 samples, 0.55%)</title><rect x="77.6433%" y="341" width="0.5535%" height="15" fill="rgb(215,19,7)" fg:x="10639767475" fg:w="75846293"/><text x="77.8933%" y="351.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (75,846,293 samples, 0.55%)</title><rect x="77.6433%" y="325" width="0.5535%" height="15" fill="rgb(238,81,41)" fg:x="10639767475" fg:w="75846293"/><text x="77.8933%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (75,846,293 samples, 0.55%)</title><rect x="77.6433%" y="309" width="0.5535%" height="15" fill="rgb(210,199,37)" fg:x="10639767475" fg:w="75846293"/><text x="77.8933%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (75,846,293 samples, 0.55%)</title><rect x="77.6433%" y="293" width="0.5535%" height="15" fill="rgb(244,192,49)" fg:x="10639767475" fg:w="75846293"/><text x="77.8933%" y="303.50"></text></g><g><title>core::mem::replace (75,846,293 samples, 0.55%)</title><rect x="77.6433%" y="277" width="0.5535%" height="15" fill="rgb(226,211,11)" fg:x="10639767475" fg:w="75846293"/><text x="77.8933%" y="287.50"></text></g><g><title>core::ptr::write (75,846,293 samples, 0.55%)</title><rect x="77.6433%" y="261" width="0.5535%" height="15" fill="rgb(236,162,54)" fg:x="10639767475" fg:w="75846293"/><text x="77.8933%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8,423,479 samples, 0.06%)</title><rect x="78.1968%" y="341" width="0.0615%" height="15" fill="rgb(220,229,9)" fg:x="10715613768" fg:w="8423479"/><text x="78.4468%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (20,384,552 samples, 0.15%)</title><rect x="78.2583%" y="341" width="0.1488%" height="15" fill="rgb(250,87,22)" fg:x="10724037247" fg:w="20384552"/><text x="78.5083%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (20,384,552 samples, 0.15%)</title><rect x="78.2583%" y="325" width="0.1488%" height="15" fill="rgb(239,43,17)" fg:x="10724037247" fg:w="20384552"/><text x="78.5083%" y="335.50"></text></g><g><title>core::cell::BorrowRefMut::new (20,384,552 samples, 0.15%)</title><rect x="78.2583%" y="309" width="0.1488%" height="15" fill="rgb(231,177,25)" fg:x="10724037247" fg:w="20384552"/><text x="78.5083%" y="319.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::add (28,896,840 samples, 0.21%)</title><rect x="78.1968%" y="357" width="0.2109%" height="15" fill="rgb(219,179,1)" fg:x="10715613768" fg:w="28896840"/><text x="78.4468%" y="367.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::clear (10,847,662 samples, 0.08%)</title><rect x="78.4077%" y="357" width="0.0792%" height="15" fill="rgb(238,219,53)" fg:x="10744510608" fg:w="10847662"/><text x="78.6577%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (10,159,362 samples, 0.07%)</title><rect x="78.4127%" y="341" width="0.0741%" height="15" fill="rgb(232,167,36)" fg:x="10745198908" fg:w="10159362"/><text x="78.6627%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (10,159,362 samples, 0.07%)</title><rect x="78.4127%" y="325" width="0.0741%" height="15" fill="rgb(244,19,51)" fg:x="10745198908" fg:w="10159362"/><text x="78.6627%" y="335.50"></text></g><g><title>core::cell::BorrowRefMut::new (10,159,362 samples, 0.07%)</title><rect x="78.4127%" y="309" width="0.0741%" height="15" fill="rgb(224,6,22)" fg:x="10745198908" fg:w="10159362"/><text x="78.6627%" y="319.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::intersection (10,016,829,222 samples, 73.10%)</title><rect x="6.7360%" y="373" width="73.0975%" height="15" fill="rgb(224,145,5)" fg:x="923060082" fg:w="10016829222"/><text x="6.9860%" y="383.50">regex_automata::dfa::minimize::StateSet::intersection</text></g><g><title>regex_automata::dfa::minimize::StateSet::is_empty (184,531,034 samples, 1.35%)</title><rect x="78.4868%" y="357" width="1.3466%" height="15" fill="rgb(234,130,49)" fg:x="10755358270" fg:w="184531034"/><text x="78.7368%" y="367.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::len (184,531,034 samples, 1.35%)</title><rect x="78.4868%" y="341" width="1.3466%" height="15" fill="rgb(254,6,2)" fg:x="10755358270" fg:w="184531034"/><text x="78.7368%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (184,531,034 samples, 1.35%)</title><rect x="78.4868%" y="325" width="1.3466%" height="15" fill="rgb(208,96,46)" fg:x="10755358270" fg:w="184531034"/><text x="78.7368%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (184,531,034 samples, 1.35%)</title><rect x="78.4868%" y="309" width="1.3466%" height="15" fill="rgb(239,3,39)" fg:x="10755358270" fg:w="184531034"/><text x="78.7368%" y="319.50"></text></g><g><title>core::cell::BorrowRef::new (184,531,034 samples, 1.35%)</title><rect x="78.4868%" y="293" width="1.3466%" height="15" fill="rgb(233,210,1)" fg:x="10755358270" fg:w="184531034"/><text x="78.7368%" y="303.50"></text></g><g><title>core::cell::is_reading (181,923,609 samples, 1.33%)</title><rect x="78.5059%" y="277" width="1.3276%" height="15" fill="rgb(244,137,37)" fg:x="10757965695" fg:w="181923609"/><text x="78.7559%" y="287.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::is_empty (31,008,485 samples, 0.23%)</title><rect x="79.8335%" y="373" width="0.2263%" height="15" fill="rgb(240,136,2)" fg:x="10939889304" fg:w="31008485"/><text x="80.0835%" y="383.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::len (24,060,001 samples, 0.18%)</title><rect x="79.8842%" y="357" width="0.1756%" height="15" fill="rgb(239,18,37)" fg:x="10946837788" fg:w="24060001"/><text x="80.1342%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (24,060,001 samples, 0.18%)</title><rect x="79.8842%" y="341" width="0.1756%" height="15" fill="rgb(218,185,22)" fg:x="10946837788" fg:w="24060001"/><text x="80.1342%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (24,060,001 samples, 0.18%)</title><rect x="79.8842%" y="325" width="0.1756%" height="15" fill="rgb(225,218,4)" fg:x="10946837788" fg:w="24060001"/><text x="80.1342%" y="335.50"></text></g><g><title>core::cell::BorrowRef::new (24,060,001 samples, 0.18%)</title><rect x="79.8842%" y="309" width="0.1756%" height="15" fill="rgb(230,182,32)" fg:x="10946837788" fg:w="24060001"/><text x="80.1342%" y="319.50"></text></g><g><title>core::cell::is_reading (1,819,200 samples, 0.01%)</title><rect x="80.0465%" y="293" width="0.0133%" height="15" fill="rgb(242,56,43)" fg:x="10969078589" fg:w="1819200"/><text x="80.2965%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (933,729,578 samples, 6.81%)</title><rect x="81.5961%" y="325" width="6.8139%" height="15" fill="rgb(233,99,24)" fg:x="11181437195" fg:w="933729578"/><text x="81.8461%" y="335.50">&lt;core::pt..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,617,813,424 samples, 19.10%)</title><rect x="80.1438%" y="357" width="19.1034%" height="15" fill="rgb(234,209,42)" fg:x="10982422712" fg:w="2617813424"/><text x="80.3938%" y="367.50">&lt;core::iter::adapters::cloned:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,617,813,424 samples, 19.10%)</title><rect x="80.1438%" y="341" width="19.1034%" height="15" fill="rgb(227,7,12)" fg:x="10982422712" fg:w="2617813424"/><text x="80.3938%" y="351.50">&lt;core::slice::iter::Iter&lt;T&gt; as..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1,484,891,751 samples, 10.84%)</title><rect x="88.4113%" y="325" width="10.8359%" height="15" fill="rgb(245,203,43)" fg:x="12115344385" fg:w="1484891751"/><text x="88.6613%" y="335.50">core::ptr::non_n..</text></g><g><title>&lt;regex_automata::util::primitives::StateID as core::cmp::PartialEq&gt;::eq (1,690,791 samples, 0.01%)</title><rect x="99.2472%" y="357" width="0.0123%" height="15" fill="rgb(238,205,33)" fg:x="13600236136" fg:w="1690791"/><text x="99.4972%" y="367.50"></text></g><g><title>&lt;regex_automata::util::primitives::SmallIndex as core::cmp::PartialEq&gt;::eq (1,690,791 samples, 0.01%)</title><rect x="99.2472%" y="341" width="0.0123%" height="15" fill="rgb(231,56,7)" fg:x="13600236136" fg:w="1690791"/><text x="99.4972%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,244,249 samples, 0.03%)</title><rect x="99.2661%" y="341" width="0.0310%" height="15" fill="rgb(244,186,29)" fg:x="13602816843" fg:w="4244249"/><text x="99.5161%" y="351.50"></text></g><g><title>core::ptr::write (2,823,280 samples, 0.02%)</title><rect x="99.2764%" y="325" width="0.0206%" height="15" fill="rgb(234,111,31)" fg:x="13604237812" fg:w="2823280"/><text x="99.5264%" y="335.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::add (5,303,040 samples, 0.04%)</title><rect x="99.2661%" y="357" width="0.0387%" height="15" fill="rgb(241,149,10)" fg:x="13602816843" fg:w="5303040"/><text x="99.5161%" y="367.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::clear (2,033,930 samples, 0.01%)</title><rect x="99.3048%" y="357" width="0.0148%" height="15" fill="rgb(249,206,44)" fg:x="13608119883" fg:w="2033930"/><text x="99.5548%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2,033,930 samples, 0.01%)</title><rect x="99.3048%" y="341" width="0.0148%" height="15" fill="rgb(251,153,30)" fg:x="13608119883" fg:w="2033930"/><text x="99.5548%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2,033,930 samples, 0.01%)</title><rect x="99.3048%" y="325" width="0.0148%" height="15" fill="rgb(239,152,38)" fg:x="13608119883" fg:w="2033930"/><text x="99.5548%" y="335.50"></text></g><g><title>core::cell::BorrowRefMut::new (2,033,930 samples, 0.01%)</title><rect x="99.3048%" y="309" width="0.0148%" height="15" fill="rgb(249,139,47)" fg:x="13608119883" fg:w="2033930"/><text x="99.5548%" y="319.50"></text></g><g><title>regex_automata::dfa::minimize::Minimizer::run (13,315,134,140 samples, 97.17%)</title><rect x="2.1958%" y="389" width="97.1667%" height="15" fill="rgb(244,64,35)" fg:x="300896467" fg:w="13315134140"/><text x="2.4458%" y="399.50">regex_automata::dfa::minimize::Minimizer::run</text></g><g><title>regex_automata::dfa::minimize::StateSet::subtract (2,645,132,818 samples, 19.30%)</title><rect x="80.0597%" y="373" width="19.3028%" height="15" fill="rgb(216,46,15)" fg:x="10970897789" fg:w="2645132818"/><text x="80.3097%" y="383.50">regex_automata::dfa::minimize:..</text></g><g><title>regex_automata::dfa::minimize::StateSet::is_empty (5,876,794 samples, 0.04%)</title><rect x="99.3196%" y="357" width="0.0429%" height="15" fill="rgb(250,74,19)" fg:x="13610153813" fg:w="5876794"/><text x="99.5696%" y="367.50"></text></g><g><title>regex_automata::dfa::minimize::StateSet::len (4,719,942 samples, 0.03%)</title><rect x="99.3281%" y="341" width="0.0344%" height="15" fill="rgb(249,42,33)" fg:x="13611310665" fg:w="4719942"/><text x="99.5781%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4,631,890 samples, 0.03%)</title><rect x="99.3287%" y="325" width="0.0338%" height="15" fill="rgb(242,149,17)" fg:x="13611398717" fg:w="4631890"/><text x="99.5787%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4,631,890 samples, 0.03%)</title><rect x="99.3287%" y="309" width="0.0338%" height="15" fill="rgb(244,29,21)" fg:x="13611398717" fg:w="4631890"/><text x="99.5787%" y="319.50"></text></g><g><title>core::cell::BorrowRef::new (4,631,890 samples, 0.03%)</title><rect x="99.3287%" y="293" width="0.0338%" height="15" fill="rgb(220,130,37)" fg:x="13611398717" fg:w="4631890"/><text x="99.5787%" y="303.50"></text></g><g><title>core::cell::is_reading (4,631,890 samples, 0.03%)</title><rect x="99.3287%" y="277" width="0.0338%" height="15" fill="rgb(211,67,2)" fg:x="13611398717" fg:w="4631890"/><text x="99.5787%" y="287.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1,475,547 samples, 0.01%)</title><rect x="99.3732%" y="389" width="0.0108%" height="15" fill="rgb(235,68,52)" fg:x="13617493606" fg:w="1475547"/><text x="99.6232%" y="399.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1,751,279 samples, 0.01%)</title><rect x="99.3839%" y="389" width="0.0128%" height="15" fill="rgb(246,142,3)" fg:x="13618969153" fg:w="1751279"/><text x="99.6339%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (1,749,823 samples, 0.01%)</title><rect x="99.4907%" y="373" width="0.0128%" height="15" fill="rgb(241,25,7)" fg:x="13633595695" fg:w="1749823"/><text x="99.7407%" y="383.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::select_unpredictable (16,058,616 samples, 0.12%)</title><rect x="99.5567%" y="293" width="0.1172%" height="15" fill="rgb(242,119,39)" fg:x="13642647844" fg:w="16058616"/><text x="99.8067%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_unit (31,343,247 samples, 0.23%)</title><rect x="99.5035%" y="373" width="0.2287%" height="15" fill="rgb(241,98,45)" fg:x="13635345518" fg:w="31343247"/><text x="99.7535%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (31,343,247 samples, 0.23%)</title><rect x="99.5035%" y="357" width="0.2287%" height="15" fill="rgb(254,28,30)" fg:x="13635345518" fg:w="31343247"/><text x="99.7535%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_unit::_{{closure}} (28,448,367 samples, 0.21%)</title><rect x="99.5246%" y="341" width="0.2076%" height="15" fill="rgb(241,142,54)" fg:x="13638240398" fg:w="28448367"/><text x="99.7746%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_byte (28,448,367 samples, 0.21%)</title><rect x="99.5246%" y="325" width="0.2076%" height="15" fill="rgb(222,85,15)" fg:x="13638240398" fg:w="28448367"/><text x="99.7746%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (28,448,367 samples, 0.21%)</title><rect x="99.5246%" y="309" width="0.2076%" height="15" fill="rgb(210,85,47)" fg:x="13638240398" fg:w="28448367"/><text x="99.7746%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_byte::_{{closure}} (7,982,305 samples, 0.06%)</title><rect x="99.6739%" y="293" width="0.0583%" height="15" fill="rgb(224,206,25)" fg:x="13658706460" fg:w="7982305"/><text x="99.9239%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,529,133 samples, 0.02%)</title><rect x="99.7533%" y="341" width="0.0185%" height="15" fill="rgb(243,201,19)" fg:x="13669576741" fg:w="2529133"/><text x="100.0033%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,529,133 samples, 0.02%)</title><rect x="99.7533%" y="325" width="0.0185%" height="15" fill="rgb(236,59,4)" fg:x="13669576741" fg:w="2529133"/><text x="100.0033%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next::_{{closure}} (15,648,141 samples, 0.11%)</title><rect x="99.7717%" y="341" width="0.1142%" height="15" fill="rgb(254,179,45)" fg:x="13672105874" fg:w="15648141"/><text x="100.0217%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::insert (15,648,141 samples, 0.11%)</title><rect x="99.7717%" y="325" width="0.1142%" height="15" fill="rgb(226,14,10)" fg:x="13672105874" fg:w="15648141"/><text x="100.0217%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::contains (13,218,606 samples, 0.10%)</title><rect x="99.7894%" y="309" width="0.0965%" height="15" fill="rgb(244,27,41)" fg:x="13674535409" fg:w="13218606"/><text x="100.0394%" y="319.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for alloc::vec::Vec&lt;T&gt;&gt;::index (3,149,914 samples, 0.02%)</title><rect x="99.8629%" y="293" width="0.0230%" height="15" fill="rgb(235,35,32)" fg:x="13684604101" fg:w="3149914"/><text x="100.1129%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,149,914 samples, 0.02%)</title><rect x="99.8629%" y="277" width="0.0230%" height="15" fill="rgb(218,68,31)" fg:x="13684604101" fg:w="3149914"/><text x="100.1129%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,149,914 samples, 0.02%)</title><rect x="99.8629%" y="261" width="0.0230%" height="15" fill="rgb(207,120,37)" fg:x="13684604101" fg:w="3149914"/><text x="100.1129%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,149,914 samples, 0.02%)</title><rect x="99.8629%" y="245" width="0.0230%" height="15" fill="rgb(227,98,0)" fg:x="13684604101" fg:w="3149914"/><text x="100.1129%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (26,769,608 samples, 0.20%)</title><rect x="99.7390%" y="373" width="0.1954%" height="15" fill="rgb(207,7,3)" fg:x="13667629884" fg:w="26769608"/><text x="99.9890%" y="383.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::iter_nfa_state_ids (26,769,608 samples, 0.20%)</title><rect x="99.7390%" y="357" width="0.1954%" height="15" fill="rgb(206,98,19)" fg:x="13667629884" fg:w="26769608"/><text x="99.9890%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::read_vari32 (6,645,477 samples, 0.05%)</title><rect x="99.8859%" y="341" width="0.0485%" height="15" fill="rgb(217,5,26)" fg:x="13687754015" fg:w="6645477"/><text x="100.1359%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::read_varu32 (5,510,479 samples, 0.04%)</title><rect x="99.8942%" y="325" width="0.0402%" height="15" fill="rgb(235,190,38)" fg:x="13688889013" fg:w="5510479"/><text x="100.1442%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,490,427 samples, 0.01%)</title><rect x="99.9235%" y="309" width="0.0109%" height="15" fill="rgb(247,86,24)" fg:x="13692909065" fg:w="1490427"/><text x="100.1735%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,490,427 samples, 0.01%)</title><rect x="99.9235%" y="293" width="0.0109%" height="15" fill="rgb(205,101,16)" fg:x="13692909065" fg:w="1490427"/><text x="100.1735%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,490,427 samples, 0.01%)</title><rect x="99.9235%" y="277" width="0.0109%" height="15" fill="rgb(246,168,33)" fg:x="13692909065" fg:w="1490427"/><text x="100.1735%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,839,764 samples, 0.03%)</title><rect x="99.9350%" y="309" width="0.0280%" height="15" fill="rgb(231,114,1)" fg:x="13694486350" fg:w="3839764"/><text x="100.1850%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,839,764 samples, 0.03%)</title><rect x="99.9350%" y="293" width="0.0280%" height="15" fill="rgb(207,184,53)" fg:x="13694486350" fg:w="3839764"/><text x="100.1850%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,839,764 samples, 0.03%)</title><rect x="99.9350%" y="277" width="0.0280%" height="15" fill="rgb(224,95,51)" fg:x="13694486350" fg:w="3839764"/><text x="100.1850%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (2,619,299 samples, 0.02%)</title><rect x="99.9439%" y="261" width="0.0191%" height="15" fill="rgb(212,188,45)" fg:x="13695706815" fg:w="2619299"/><text x="100.1939%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2,619,299 samples, 0.02%)</title><rect x="99.9439%" y="245" width="0.0191%" height="15" fill="rgb(223,154,38)" fg:x="13695706815" fg:w="2619299"/><text x="100.1939%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderEmpty::into_matches (7,244,054 samples, 0.05%)</title><rect x="99.9344%" y="373" width="0.0529%" height="15" fill="rgb(251,22,52)" fg:x="13694399492" fg:w="7244054"/><text x="100.1844%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7,244,054 samples, 0.05%)</title><rect x="99.9344%" y="357" width="0.0529%" height="15" fill="rgb(229,209,22)" fg:x="13694399492" fg:w="7244054"/><text x="100.1844%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7,244,054 samples, 0.05%)</title><rect x="99.9344%" y="341" width="0.0529%" height="15" fill="rgb(234,138,34)" fg:x="13694399492" fg:w="7244054"/><text x="100.1844%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7,244,054 samples, 0.05%)</title><rect x="99.9344%" y="325" width="0.0529%" height="15" fill="rgb(212,95,11)" fg:x="13694399492" fg:w="7244054"/><text x="100.1844%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,317,432 samples, 0.02%)</title><rect x="99.9631%" y="309" width="0.0242%" height="15" fill="rgb(240,179,47)" fg:x="13698326114" fg:w="3317432"/><text x="100.2131%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (81,776,916 samples, 0.60%)</title><rect x="99.3967%" y="389" width="0.5968%" height="15" fill="rgb(240,163,11)" fg:x="13620720432" fg:w="81776916"/><text x="99.6467%" y="399.50"></text></g><g><title>all (13,703,389,136 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(236,37,12)" fg:x="0" fg:w="13703389136"/><text x="0.2500%" y="431.50"></text></g><g><title>regex-cli (13,703,389,136 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="13703389136"/><text x="0.2500%" y="415.50">regex-cli</text></g></svg></svg>
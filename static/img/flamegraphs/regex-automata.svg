<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="8658589320"><g><title>core::fmt::Arguments::new_v1 (2,918,911 samples, 0.03%)</title><rect x="0.0161%" y="469" width="0.0337%" height="15" fill="rgb(227,0,7)" fg:x="1396084" fg:w="2918911"/><text x="0.2661%" y="479.50"></text></g><g><title>core::ascii::escape_default (4,710,024 samples, 0.05%)</title><rect x="0.0498%" y="453" width="0.0544%" height="15" fill="rgb(217,0,24)" fg:x="4314995" fg:w="4710024"/><text x="0.2998%" y="463.50"></text></g><g><title>core::fmt::Formatter::new (5,143,659 samples, 0.06%)</title><rect x="0.3108%" y="437" width="0.0594%" height="15" fill="rgb(221,193,54)" fg:x="26913288" fg:w="5143659"/><text x="0.5608%" y="447.50"></text></g><g><title>core::fmt::write (23,577,749 samples, 0.27%)</title><rect x="0.1042%" y="453" width="0.2723%" height="15" fill="rgb(248,212,6)" fg:x="9025019" fg:w="23577749"/><text x="0.3542%" y="463.50"></text></g><g><title>&lt;regex_automata::util::alphabet::Unit as core::fmt::Debug&gt;::fmt (37,373,064 samples, 0.43%)</title><rect x="0.0003%" y="485" width="0.4316%" height="15" fill="rgb(208,68,35)" fg:x="24295" fg:w="37373064"/><text x="0.2503%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (33,082,364 samples, 0.38%)</title><rect x="0.0498%" y="469" width="0.3821%" height="15" fill="rgb(232,128,0)" fg:x="4314995" fg:w="33082364"/><text x="0.2998%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (4,794,591 samples, 0.06%)</title><rect x="0.3765%" y="453" width="0.0554%" height="15" fill="rgb(207,160,47)" fg:x="32602768" fg:w="4794591"/><text x="0.6265%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,531,044 samples, 0.03%)</title><rect x="0.5746%" y="469" width="0.0292%" height="15" fill="rgb(228,23,34)" fg:x="49751682" fg:w="2531044"/><text x="0.8246%" y="479.50"></text></g><g><title>&lt;core::ascii::EscapeDefault as core::iter::traits::iterator::Iterator&gt;::next (2,531,044 samples, 0.03%)</title><rect x="0.5746%" y="453" width="0.0292%" height="15" fill="rgb(218,30,26)" fg:x="49751682" fg:w="2531044"/><text x="0.8246%" y="463.50"></text></g><g><title>core::escape::EscapeIterInner&lt;_&gt;::next (2,531,044 samples, 0.03%)</title><rect x="0.5746%" y="437" width="0.0292%" height="15" fill="rgb(220,122,19)" fg:x="49751682" fg:w="2531044"/><text x="0.8246%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,090,900 samples, 0.02%)</title><rect x="0.5797%" y="421" width="0.0241%" height="15" fill="rgb(250,228,42)" fg:x="50191826" fg:w="2090900"/><text x="0.8297%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,090,900 samples, 0.02%)</title><rect x="0.5797%" y="405" width="0.0241%" height="15" fill="rgb(240,193,28)" fg:x="50191826" fg:w="2090900"/><text x="0.8297%" y="415.50"></text></g><g><title>core::escape::backslash (912,813 samples, 0.01%)</title><rect x="0.6831%" y="405" width="0.0105%" height="15" fill="rgb(216,20,37)" fg:x="59145189" fg:w="912813"/><text x="0.9331%" y="415.50"></text></g><g><title>core::ascii::escape_default (8,238,266 samples, 0.10%)</title><rect x="0.6044%" y="469" width="0.0951%" height="15" fill="rgb(206,188,39)" fg:x="52333140" fg:w="8238266"/><text x="0.8544%" y="479.50"></text></g><g><title>core::ascii::EscapeDefault::new (8,100,336 samples, 0.09%)</title><rect x="0.6060%" y="453" width="0.0936%" height="15" fill="rgb(217,207,13)" fg:x="52471070" fg:w="8100336"/><text x="0.8560%" y="463.50"></text></g><g><title>core::escape::EscapeIterInner&lt;_&gt;::ascii (8,100,336 samples, 0.09%)</title><rect x="0.6060%" y="437" width="0.0936%" height="15" fill="rgb(231,73,38)" fg:x="52471070" fg:w="8100336"/><text x="0.8560%" y="447.50"></text></g><g><title>core::escape::escape_ascii (8,100,336 samples, 0.09%)</title><rect x="0.6060%" y="421" width="0.0936%" height="15" fill="rgb(225,20,46)" fg:x="52471070" fg:w="8100336"/><text x="0.8560%" y="431.50"></text></g><g><title>core::fmt::Arguments::new_v1 (1,425,013 samples, 0.02%)</title><rect x="0.6996%" y="469" width="0.0165%" height="15" fill="rgb(210,31,41)" fg:x="60571406" fg:w="1425013"/><text x="0.9496%" y="479.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (5,069,693 samples, 0.06%)</title><rect x="0.7325%" y="453" width="0.0586%" height="15" fill="rgb(221,200,47)" fg:x="63421175" fg:w="5069693"/><text x="0.9825%" y="463.50"></text></g><g><title>core::fmt::Formatter::new (5,758,853 samples, 0.07%)</title><rect x="0.9673%" y="437" width="0.0665%" height="15" fill="rgb(226,26,5)" fg:x="83754792" fg:w="5758853"/><text x="1.2173%" y="447.50"></text></g><g><title>__memmove_avx_unaligned (2,738,809 samples, 0.03%)</title><rect x="1.1567%" y="309" width="0.0316%" height="15" fill="rgb(249,33,26)" fg:x="100154870" fg:w="2738809"/><text x="1.4067%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,856,959 samples, 0.06%)</title><rect x="1.1567%" y="325" width="0.0561%" height="15" fill="rgb(235,183,28)" fg:x="100154870" fg:w="4856959"/><text x="1.4067%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,118,150 samples, 0.02%)</title><rect x="1.1883%" y="309" width="0.0245%" height="15" fill="rgb(221,5,38)" fg:x="102893679" fg:w="2118150"/><text x="1.4383%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5,819,360 samples, 0.07%)</title><rect x="1.1465%" y="357" width="0.0672%" height="15" fill="rgb(247,18,42)" fg:x="99267980" fg:w="5819360"/><text x="1.3965%" y="367.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (5,819,360 samples, 0.07%)</title><rect x="1.1465%" y="341" width="0.0672%" height="15" fill="rgb(241,131,45)" fg:x="99267980" fg:w="5819360"/><text x="1.3965%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2,336,412 samples, 0.03%)</title><rect x="1.2782%" y="325" width="0.0270%" height="15" fill="rgb(249,31,29)" fg:x="110674167" fg:w="2336412"/><text x="1.5282%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,215,743 samples, 0.01%)</title><rect x="1.2911%" y="309" width="0.0140%" height="15" fill="rgb(225,111,53)" fg:x="111794836" fg:w="1215743"/><text x="1.5411%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (3,879,675 samples, 0.04%)</title><rect x="1.2729%" y="341" width="0.0448%" height="15" fill="rgb(238,160,17)" fg:x="110212337" fg:w="3879675"/><text x="1.5229%" y="351.50"></text></g><g><title>core::slice::memchr::memrchr::_{{closure}} (1,081,433 samples, 0.01%)</title><rect x="1.3052%" y="325" width="0.0125%" height="15" fill="rgb(214,148,48)" fg:x="113010579" fg:w="1081433"/><text x="1.5552%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to (1,370,073 samples, 0.02%)</title><rect x="1.3227%" y="341" width="0.0158%" height="15" fill="rgb(232,36,49)" fg:x="114530422" fg:w="1370073"/><text x="1.5727%" y="351.50"></text></g><g><title>core::slice::memchr::memrchr (10,838,103 samples, 0.13%)</title><rect x="1.2137%" y="357" width="0.1252%" height="15" fill="rgb(209,103,24)" fg:x="105087340" fg:w="10838103"/><text x="1.4637%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2,467,357 samples, 0.03%)</title><rect x="1.3919%" y="341" width="0.0285%" height="15" fill="rgb(229,88,8)" fg:x="120522390" fg:w="2467357"/><text x="1.6419%" y="351.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (23,861,894 samples, 0.28%)</title><rect x="1.1457%" y="389" width="0.2756%" height="15" fill="rgb(213,181,19)" fg:x="99199173" fg:w="23861894"/><text x="1.3957%" y="399.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (23,861,894 samples, 0.28%)</title><rect x="1.1457%" y="373" width="0.2756%" height="15" fill="rgb(254,191,54)" fg:x="99199173" fg:w="23861894"/><text x="1.3957%" y="383.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (7,135,624 samples, 0.08%)</title><rect x="1.3388%" y="357" width="0.0824%" height="15" fill="rgb(241,83,37)" fg:x="115925443" fg:w="7135624"/><text x="1.5888%" y="367.50"></text></g><g><title>&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1,919,103 samples, 0.02%)</title><rect x="1.4213%" y="389" width="0.0222%" height="15" fill="rgb(233,36,39)" fg:x="123061067" fg:w="1919103"/><text x="1.6713%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (32,562,715 samples, 0.38%)</title><rect x="1.0925%" y="405" width="0.3761%" height="15" fill="rgb(226,3,54)" fg:x="94590917" fg:w="32562715"/><text x="1.3425%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2,173,462 samples, 0.03%)</title><rect x="1.4434%" y="389" width="0.0251%" height="15" fill="rgb(245,192,40)" fg:x="124980170" fg:w="2173462"/><text x="1.6934%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2,173,462 samples, 0.03%)</title><rect x="1.4434%" y="373" width="0.0251%" height="15" fill="rgb(238,167,29)" fg:x="124980170" fg:w="2173462"/><text x="1.6934%" y="383.50"></text></g><g><title>core::cell::BorrowRefMut::new (2,173,462 samples, 0.03%)</title><rect x="1.4434%" y="357" width="0.0251%" height="15" fill="rgb(232,182,51)" fg:x="124980170" fg:w="2173462"/><text x="1.6934%" y="367.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (43,369,290 samples, 0.50%)</title><rect x="1.0338%" y="421" width="0.5009%" height="15" fill="rgb(231,60,39)" fg:x="89513645" fg:w="43369290"/><text x="1.2838%" y="431.50"></text></g><g><title>core::slice::memchr::memrchr (5,729,303 samples, 0.07%)</title><rect x="1.4685%" y="405" width="0.0662%" height="15" fill="rgb(208,69,12)" fg:x="127153632" fg:w="5729303"/><text x="1.7185%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,341,104 samples, 0.04%)</title><rect x="1.5347%" y="421" width="0.0386%" height="15" fill="rgb(235,93,37)" fg:x="132882935" fg:w="3341104"/><text x="1.7847%" y="431.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1,307,807 samples, 0.02%)</title><rect x="1.5733%" y="421" width="0.0151%" height="15" fill="rgb(213,116,39)" fg:x="136224039" fg:w="1307807"/><text x="1.8233%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (53,562,451 samples, 0.62%)</title><rect x="1.0338%" y="437" width="0.6186%" height="15" fill="rgb(222,207,29)" fg:x="89513645" fg:w="53562451"/><text x="1.2838%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (5,544,250 samples, 0.06%)</title><rect x="1.5884%" y="421" width="0.0640%" height="15" fill="rgb(206,96,30)" fg:x="137531846" fg:w="5544250"/><text x="1.8384%" y="431.50"></text></g><g><title>core::fmt::write (77,972,223 samples, 0.90%)</title><rect x="0.7920%" y="453" width="0.9005%" height="15" fill="rgb(218,138,4)" fg:x="68575822" fg:w="77972223"/><text x="1.0420%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,471,949 samples, 0.04%)</title><rect x="1.6524%" y="437" width="0.0401%" height="15" fill="rgb(250,191,14)" fg:x="143076096" fg:w="3471949"/><text x="1.9024%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,471,949 samples, 0.04%)</title><rect x="1.6524%" y="421" width="0.0401%" height="15" fill="rgb(239,60,40)" fg:x="143076096" fg:w="3471949"/><text x="1.9024%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (84,605,135 samples, 0.98%)</title><rect x="0.7160%" y="469" width="0.9771%" height="15" fill="rgb(206,27,48)" fg:x="61996419" fg:w="84605135"/><text x="0.9660%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (5,624,347 samples, 0.06%)</title><rect x="1.6931%" y="469" width="0.0650%" height="15" fill="rgb(225,35,8)" fg:x="146601554" fg:w="5624347"/><text x="1.9431%" y="479.50"></text></g><g><title>&lt;regex_automata::util::escape::DebugByte as core::fmt::Debug&gt;::fmt (126,497,833 samples, 1.46%)</title><rect x="0.4319%" y="485" width="1.4610%" height="15" fill="rgb(250,213,24)" fg:x="37397359" fg:w="126497833"/><text x="0.6819%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (11,669,291 samples, 0.13%)</title><rect x="1.7581%" y="469" width="0.1348%" height="15" fill="rgb(247,123,22)" fg:x="152225901" fg:w="11669291"/><text x="2.0081%" y="479.50"></text></g><g><title>core::str::validations::run_utf8_validation (8,007,330 samples, 0.09%)</title><rect x="1.8004%" y="453" width="0.0925%" height="15" fill="rgb(231,138,38)" fg:x="155887862" fg:w="8007330"/><text x="2.0504%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (930,055 samples, 0.01%)</title><rect x="1.9166%" y="469" width="0.0107%" height="15" fill="rgb(231,145,46)" fg:x="165953042" fg:w="930055"/><text x="2.1666%" y="479.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3,296,884 samples, 0.04%)</title><rect x="1.8942%" y="485" width="0.0381%" height="15" fill="rgb(251,118,11)" fg:x="164010909" fg:w="3296884"/><text x="2.1442%" y="495.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4,628,491 samples, 0.05%)</title><rect x="1.9323%" y="485" width="0.0535%" height="15" fill="rgb(217,147,25)" fg:x="167307793" fg:w="4628491"/><text x="2.1823%" y="495.50"></text></g><g><title>&lt;regex_automata::dfa::dense::StateTransitionIter as core::iter::traits::iterator::Iterator&gt;::next (3,505,451 samples, 0.04%)</title><rect x="1.9906%" y="341" width="0.0405%" height="15" fill="rgb(247,81,37)" fg:x="172358948" fg:w="3505451"/><text x="2.2406%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,505,451 samples, 0.04%)</title><rect x="1.9906%" y="325" width="0.0405%" height="15" fill="rgb(209,12,38)" fg:x="172358948" fg:w="3505451"/><text x="2.2406%" y="335.50"></text></g><g><title>&lt;regex_automata::dfa::dense::StateTransitionIter as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (3,505,451 samples, 0.04%)</title><rect x="1.9906%" y="309" width="0.0405%" height="15" fill="rgb(227,1,9)" fg:x="172358948" fg:w="3505451"/><text x="2.2406%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="485" width="0.0553%" height="15" fill="rgb(248,47,43)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="469" width="0.0553%" height="15" fill="rgb(221,10,30)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="479.50"></text></g><g><title>std::io::Write::write_all (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="453" width="0.0553%" height="15" fill="rgb(210,229,1)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="463.50"></text></g><g><title>&lt;std::sys::pal::unix::stdio::Stderr as std::io::Write&gt;::write (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="437" width="0.0553%" height="15" fill="rgb(222,148,37)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="447.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="421" width="0.0553%" height="15" fill="rgb(234,67,33)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="431.50"></text></g><g><title>regex_cli::args::dfa::Config::from_nfa (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="405" width="0.0553%" height="15" fill="rgb(247,98,35)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="415.50"></text></g><g><title>regex_automata::dfa::dense::Builder::build_from_nfa (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="389" width="0.0553%" height="15" fill="rgb(247,138,52)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="399.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::accelerate (4,788,850 samples, 0.06%)</title><rect x="1.9857%" y="373" width="0.0553%" height="15" fill="rgb(213,79,30)" fg:x="171936284" fg:w="4788850"/><text x="2.2357%" y="383.50"></text></g><g><title>regex_automata::dfa::dense::State::accelerate (4,502,456 samples, 0.05%)</title><rect x="1.9890%" y="357" width="0.0520%" height="15" fill="rgb(246,177,23)" fg:x="172222678" fg:w="4502456"/><text x="2.2390%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,929,437 samples, 0.02%)</title><rect x="2.0410%" y="485" width="0.0223%" height="15" fill="rgb(230,62,27)" fg:x="176725134" fg:w="1929437"/><text x="2.2910%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,929,437 samples, 0.02%)</title><rect x="2.0410%" y="469" width="0.0223%" height="15" fill="rgb(216,154,8)" fg:x="176725134" fg:w="1929437"/><text x="2.2910%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1,929,437 samples, 0.02%)</title><rect x="2.0410%" y="453" width="0.0223%" height="15" fill="rgb(244,35,45)" fg:x="176725134" fg:w="1929437"/><text x="2.2910%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,929,437 samples, 0.02%)</title><rect x="2.0410%" y="437" width="0.0223%" height="15" fill="rgb(251,115,12)" fg:x="176725134" fg:w="1929437"/><text x="2.2910%" y="447.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (1,929,437 samples, 0.02%)</title><rect x="2.0410%" y="421" width="0.0223%" height="15" fill="rgb(240,54,50)" fg:x="176725134" fg:w="1929437"/><text x="2.2910%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (1,902,811 samples, 0.02%)</title><rect x="2.0413%" y="405" width="0.0220%" height="15" fill="rgb(233,84,52)" fg:x="176751760" fg:w="1902811"/><text x="2.2913%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1,902,811 samples, 0.02%)</title><rect x="2.0413%" y="389" width="0.0220%" height="15" fill="rgb(207,117,47)" fg:x="176751760" fg:w="1902811"/><text x="2.2913%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,902,811 samples, 0.02%)</title><rect x="2.0413%" y="373" width="0.0220%" height="15" fill="rgb(249,43,39)" fg:x="176751760" fg:w="1902811"/><text x="2.2913%" y="383.50"></text></g><g><title>[unknown] (886,199 samples, 0.01%)</title><rect x="2.0852%" y="357" width="0.0102%" height="15" fill="rgb(209,38,44)" fg:x="180547169" fg:w="886199"/><text x="2.3352%" y="367.50"></text></g><g><title>[unknown] (886,199 samples, 0.01%)</title><rect x="2.0852%" y="341" width="0.0102%" height="15" fill="rgb(236,212,23)" fg:x="180547169" fg:w="886199"/><text x="2.3352%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,573,123 samples, 0.03%)</title><rect x="2.0666%" y="453" width="0.0297%" height="15" fill="rgb(242,79,21)" fg:x="178942285" fg:w="2573123"/><text x="2.3166%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,573,123 samples, 0.03%)</title><rect x="2.0666%" y="437" width="0.0297%" height="15" fill="rgb(211,96,35)" fg:x="178942285" fg:w="2573123"/><text x="2.3166%" y="447.50"></text></g><g><title>alloc::alloc::realloc (2,532,257 samples, 0.03%)</title><rect x="2.0671%" y="421" width="0.0292%" height="15" fill="rgb(253,215,40)" fg:x="178983151" fg:w="2532257"/><text x="2.3171%" y="431.50"></text></g><g><title>realloc (2,532,257 samples, 0.03%)</title><rect x="2.0671%" y="405" width="0.0292%" height="15" fill="rgb(211,81,21)" fg:x="178983151" fg:w="2532257"/><text x="2.3171%" y="415.50"></text></g><g><title>_int_realloc (2,451,389 samples, 0.03%)</title><rect x="2.0681%" y="389" width="0.0283%" height="15" fill="rgb(208,190,38)" fg:x="179064019" fg:w="2451389"/><text x="2.3181%" y="399.50"></text></g><g><title>_int_malloc (1,445,875 samples, 0.02%)</title><rect x="2.0797%" y="373" width="0.0167%" height="15" fill="rgb(235,213,38)" fg:x="180069533" fg:w="1445875"/><text x="2.3297%" y="383.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h849338d51e78e268E.llvm.13480382585952625708 (4,392,462 samples, 0.05%)</title><rect x="2.0633%" y="469" width="0.0507%" height="15" fill="rgb(237,122,38)" fg:x="178654571" fg:w="4392462"/><text x="2.3133%" y="479.50"></text></g><g><title>malloc (1,415,998 samples, 0.02%)</title><rect x="2.0977%" y="453" width="0.0164%" height="15" fill="rgb(244,218,35)" fg:x="181631035" fg:w="1415998"/><text x="2.3477%" y="463.50"></text></g><g><title>[libc.so.6] (5,824,003 samples, 0.07%)</title><rect x="2.0633%" y="485" width="0.0673%" height="15" fill="rgb(240,68,47)" fg:x="178654571" fg:w="5824003"/><text x="2.3133%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,398,319 samples, 0.02%)</title><rect x="2.1144%" y="469" width="0.0161%" height="15" fill="rgb(210,16,53)" fg:x="183080255" fg:w="1398319"/><text x="2.3644%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1,398,319 samples, 0.02%)</title><rect x="2.1144%" y="453" width="0.0161%" height="15" fill="rgb(235,124,12)" fg:x="183080255" fg:w="1398319"/><text x="2.3644%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1,398,319 samples, 0.02%)</title><rect x="2.1144%" y="437" width="0.0161%" height="15" fill="rgb(224,169,11)" fg:x="183080255" fg:w="1398319"/><text x="2.3644%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,398,319 samples, 0.02%)</title><rect x="2.1144%" y="421" width="0.0161%" height="15" fill="rgb(250,166,2)" fg:x="183080255" fg:w="1398319"/><text x="2.3644%" y="431.50"></text></g><g><title>core::ptr::write (1,398,319 samples, 0.02%)</title><rect x="2.1144%" y="405" width="0.0161%" height="15" fill="rgb(242,216,29)" fg:x="183080255" fg:w="1398319"/><text x="2.3644%" y="415.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,916,377 samples, 0.02%)</title><rect x="2.1456%" y="421" width="0.0221%" height="15" fill="rgb(230,116,27)" fg:x="185780166" fg:w="1916377"/><text x="2.3956%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,164,825 samples, 0.03%)</title><rect x="2.1432%" y="469" width="0.0250%" height="15" fill="rgb(228,99,48)" fg:x="185571989" fg:w="2164825"/><text x="2.3932%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::nfa::State]&gt; (2,164,825 samples, 0.03%)</title><rect x="2.1432%" y="453" width="0.0250%" height="15" fill="rgb(253,11,6)" fg:x="185571989" fg:w="2164825"/><text x="2.3932%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::nfa::State&gt; (2,118,596 samples, 0.02%)</title><rect x="2.1437%" y="437" width="0.0245%" height="15" fill="rgb(247,143,39)" fg:x="185618218" fg:w="2118596"/><text x="2.3937%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (102,091,554 samples, 1.18%)</title><rect x="2.1826%" y="357" width="1.1791%" height="15" fill="rgb(236,97,10)" fg:x="188983305" fg:w="102091554"/><text x="2.4326%" y="367.50"></text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (102,091,554 samples, 1.18%)</title><rect x="2.1826%" y="341" width="1.1791%" height="15" fill="rgb(233,208,19)" fg:x="188983305" fg:w="102091554"/><text x="2.4326%" y="351.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (102,091,554 samples, 1.18%)</title><rect x="2.1826%" y="325" width="1.1791%" height="15" fill="rgb(216,164,2)" fg:x="188983305" fg:w="102091554"/><text x="2.4326%" y="335.50"></text></g><g><title>__GI___libc_write (102,091,554 samples, 1.18%)</title><rect x="2.1826%" y="309" width="1.1791%" height="15" fill="rgb(220,129,5)" fg:x="188983305" fg:w="102091554"/><text x="2.4326%" y="319.50"></text></g><g><title>[unknown] (101,872,867 samples, 1.18%)</title><rect x="2.1851%" y="293" width="1.1766%" height="15" fill="rgb(242,17,10)" fg:x="189201992" fg:w="101872867"/><text x="2.4351%" y="303.50"></text></g><g><title>[unknown] (98,259,426 samples, 1.13%)</title><rect x="2.2269%" y="277" width="1.1348%" height="15" fill="rgb(242,107,0)" fg:x="192815433" fg:w="98259426"/><text x="2.4769%" y="287.50"></text></g><g><title>[unknown] (96,946,109 samples, 1.12%)</title><rect x="2.2420%" y="261" width="1.1197%" height="15" fill="rgb(251,28,31)" fg:x="194128750" fg:w="96946109"/><text x="2.4920%" y="271.50"></text></g><g><title>[unknown] (95,841,920 samples, 1.11%)</title><rect x="2.2548%" y="245" width="1.1069%" height="15" fill="rgb(233,223,10)" fg:x="195232939" fg:w="95841920"/><text x="2.5048%" y="255.50"></text></g><g><title>[unknown] (91,562,653 samples, 1.06%)</title><rect x="2.3042%" y="229" width="1.0575%" height="15" fill="rgb(215,21,27)" fg:x="199512206" fg:w="91562653"/><text x="2.5542%" y="239.50"></text></g><g><title>[unknown] (83,871,600 samples, 0.97%)</title><rect x="2.3930%" y="213" width="0.9687%" height="15" fill="rgb(232,23,21)" fg:x="207203259" fg:w="83871600"/><text x="2.6430%" y="223.50"></text></g><g><title>[unknown] (44,102,461 samples, 0.51%)</title><rect x="2.8523%" y="197" width="0.5093%" height="15" fill="rgb(244,5,23)" fg:x="246972398" fg:w="44102461"/><text x="3.1023%" y="207.50"></text></g><g><title>[unknown] (15,393,182 samples, 0.18%)</title><rect x="3.1839%" y="181" width="0.1778%" height="15" fill="rgb(226,81,46)" fg:x="275681677" fg:w="15393182"/><text x="3.4339%" y="191.50"></text></g><g><title>[unknown] (8,821,702 samples, 0.10%)</title><rect x="3.2598%" y="165" width="0.1019%" height="15" fill="rgb(247,70,30)" fg:x="282253157" fg:w="8821702"/><text x="3.5098%" y="175.50"></text></g><g><title>[unknown] (4,310,977 samples, 0.05%)</title><rect x="3.3119%" y="149" width="0.0498%" height="15" fill="rgb(212,68,19)" fg:x="286763882" fg:w="4310977"/><text x="3.5619%" y="159.50"></text></g><g><title>[unknown] (1,826,819 samples, 0.02%)</title><rect x="3.3406%" y="133" width="0.0211%" height="15" fill="rgb(240,187,13)" fg:x="289248040" fg:w="1826819"/><text x="3.5906%" y="143.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (102,316,637 samples, 1.18%)</title><rect x="2.1804%" y="373" width="1.1817%" height="15" fill="rgb(223,113,26)" fg:x="188788427" fg:w="102316637"/><text x="2.4304%" y="383.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (103,000,782 samples, 1.19%)</title><rect x="2.1730%" y="405" width="1.1896%" height="15" fill="rgb(206,192,2)" fg:x="188147548" fg:w="103000782"/><text x="2.4230%" y="415.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (103,000,782 samples, 1.19%)</title><rect x="2.1730%" y="389" width="1.1896%" height="15" fill="rgb(241,108,4)" fg:x="188147548" fg:w="103000782"/><text x="2.4230%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (103,080,835 samples, 1.19%)</title><rect x="2.1728%" y="421" width="1.1905%" height="15" fill="rgb(247,173,49)" fg:x="188130638" fg:w="103080835"/><text x="2.4228%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (103,475,123 samples, 1.20%)</title><rect x="2.1725%" y="437" width="1.1951%" height="15" fill="rgb(224,114,35)" fg:x="188112019" fg:w="103475123"/><text x="2.4225%" y="447.50"></text></g><g><title>&lt;regex_automata::dfa::dense::DFA&lt;T&gt; as core::fmt::Debug&gt;::fmt (104,036,711 samples, 1.20%)</title><rect x="2.1682%" y="469" width="1.2015%" height="15" fill="rgb(245,159,27)" fg:x="187736814" fg:w="104036711"/><text x="2.4182%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (103,661,506 samples, 1.20%)</title><rect x="2.1725%" y="453" width="1.1972%" height="15" fill="rgb(245,172,44)" fg:x="188112019" fg:w="103661506"/><text x="2.4225%" y="463.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4,484,039 samples, 0.05%)</title><rect x="3.5901%" y="437" width="0.0518%" height="15" fill="rgb(236,23,11)" fg:x="310854261" fg:w="4484039"/><text x="3.8401%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,475,806 samples, 0.05%)</title><rect x="3.7353%" y="405" width="0.0517%" height="15" fill="rgb(205,117,38)" fg:x="323422523" fg:w="4475806"/><text x="3.9853%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,127,196 samples, 0.05%)</title><rect x="3.7393%" y="389" width="0.0477%" height="15" fill="rgb(237,72,25)" fg:x="323771133" fg:w="4127196"/><text x="3.9893%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,892,798 samples, 0.02%)</title><rect x="3.7651%" y="373" width="0.0219%" height="15" fill="rgb(244,70,9)" fg:x="326005531" fg:w="1892798"/><text x="4.0151%" y="383.50"></text></g><g><title>&lt;regex_automata::dfa::dense::StateTransitionIter as core::iter::traits::iterator::Iterator&gt;::next (15,625,384 samples, 0.18%)</title><rect x="3.7353%" y="421" width="0.1805%" height="15" fill="rgb(217,125,39)" fg:x="323422523" fg:w="15625384"/><text x="3.9853%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (11,149,578 samples, 0.13%)</title><rect x="3.7870%" y="405" width="0.1288%" height="15" fill="rgb(235,36,10)" fg:x="327898329" fg:w="11149578"/><text x="4.0370%" y="415.50"></text></g><g><title>&lt;regex_automata::dfa::dense::StateTransitionIter as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (11,102,922 samples, 0.13%)</title><rect x="3.7875%" y="389" width="0.1282%" height="15" fill="rgb(251,123,47)" fg:x="327944985" fg:w="11102922"/><text x="4.0375%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (34,227,532 samples, 0.40%)</title><rect x="3.5225%" y="453" width="0.3953%" height="15" fill="rgb(221,13,13)" fg:x="304996642" fg:w="34227532"/><text x="3.7725%" y="463.50"></text></g><g><title>&lt;regex_automata::dfa::dense::StateSparseTransitionIter as core::iter::traits::iterator::Iterator&gt;::next (23,885,874 samples, 0.28%)</title><rect x="3.6419%" y="437" width="0.2759%" height="15" fill="rgb(238,131,9)" fg:x="315338300" fg:w="23885874"/><text x="3.8919%" y="447.50"></text></g><g><title>&lt;regex_automata::util::alphabet::Unit as core::cmp::PartialEq&gt;::eq (1,751,166 samples, 0.02%)</title><rect x="3.9178%" y="453" width="0.0202%" height="15" fill="rgb(211,50,8)" fg:x="339224174" fg:w="1751166"/><text x="4.1678%" y="463.50"></text></g><g><title>&lt;regex_automata::util::alphabet::UnitKind as core::cmp::PartialEq&gt;::eq (1,751,166 samples, 0.02%)</title><rect x="3.9178%" y="437" width="0.0202%" height="15" fill="rgb(245,182,24)" fg:x="339224174" fg:w="1751166"/><text x="4.1678%" y="447.50"></text></g><g><title>core::fmt::Arguments::new_v1 (3,778,912 samples, 0.04%)</title><rect x="3.9380%" y="453" width="0.0436%" height="15" fill="rgb(242,14,37)" fg:x="340975340" fg:w="3778912"/><text x="4.1880%" y="463.50"></text></g><g><title>__memmove_avx_unaligned (3,273,711 samples, 0.04%)</title><rect x="4.1941%" y="325" width="0.0378%" height="15" fill="rgb(246,228,12)" fg:x="363150888" fg:w="3273711"/><text x="4.4441%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (7,712,982 samples, 0.09%)</title><rect x="4.1767%" y="373" width="0.0891%" height="15" fill="rgb(213,55,15)" fg:x="361640004" fg:w="7712982"/><text x="4.4267%" y="383.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (7,368,301 samples, 0.09%)</title><rect x="4.1806%" y="357" width="0.0851%" height="15" fill="rgb(209,9,3)" fg:x="361984685" fg:w="7368301"/><text x="4.4306%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,202,098 samples, 0.07%)</title><rect x="4.1941%" y="341" width="0.0716%" height="15" fill="rgb(230,59,30)" fg:x="363150888" fg:w="6202098"/><text x="4.4441%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,928,387 samples, 0.03%)</title><rect x="4.2319%" y="325" width="0.0338%" height="15" fill="rgb(209,121,21)" fg:x="366424599" fg:w="2928387"/><text x="4.4819%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2,799,900 samples, 0.03%)</title><rect x="4.3124%" y="341" width="0.0323%" height="15" fill="rgb(220,109,13)" fg:x="373395997" fg:w="2799900"/><text x="4.5624%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,038,337 samples, 0.01%)</title><rect x="4.3328%" y="325" width="0.0120%" height="15" fill="rgb(232,18,1)" fg:x="375157560" fg:w="1038337"/><text x="4.5828%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (3,803,277 samples, 0.04%)</title><rect x="4.3105%" y="357" width="0.0439%" height="15" fill="rgb(215,41,42)" fg:x="373229747" fg:w="3803277"/><text x="4.5605%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to (995,843 samples, 0.01%)</title><rect x="4.3621%" y="357" width="0.0115%" height="15" fill="rgb(224,123,36)" fg:x="377700579" fg:w="995843"/><text x="4.6121%" y="367.50"></text></g><g><title>core::slice::memchr::memrchr (9,369,974 samples, 0.11%)</title><rect x="4.2657%" y="373" width="0.1082%" height="15" fill="rgb(240,125,3)" fg:x="369352986" fg:w="9369974"/><text x="4.5157%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2,080,233 samples, 0.02%)</title><rect x="4.4245%" y="357" width="0.0240%" height="15" fill="rgb(205,98,50)" fg:x="383097100" fg:w="2080233"/><text x="4.6745%" y="367.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (23,762,356 samples, 0.27%)</title><rect x="4.1744%" y="405" width="0.2744%" height="15" fill="rgb(205,185,37)" fg:x="361442785" fg:w="23762356"/><text x="4.4244%" y="415.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (23,762,356 samples, 0.27%)</title><rect x="4.1744%" y="389" width="0.2744%" height="15" fill="rgb(238,207,15)" fg:x="361442785" fg:w="23762356"/><text x="4.4244%" y="399.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (6,482,181 samples, 0.07%)</title><rect x="4.3740%" y="373" width="0.0749%" height="15" fill="rgb(213,199,42)" fg:x="378722960" fg:w="6482181"/><text x="4.6240%" y="383.50"></text></g><g><title>&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3,411,561 samples, 0.04%)</title><rect x="4.4488%" y="405" width="0.0394%" height="15" fill="rgb(235,201,11)" fg:x="385205141" fg:w="3411561"/><text x="4.6988%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (33,076,779 samples, 0.38%)</title><rect x="4.1349%" y="421" width="0.3820%" height="15" fill="rgb(207,46,11)" fg:x="358025317" fg:w="33076779"/><text x="4.3849%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2,485,394 samples, 0.03%)</title><rect x="4.4882%" y="405" width="0.0287%" height="15" fill="rgb(241,35,35)" fg:x="388616702" fg:w="2485394"/><text x="4.7382%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2,485,394 samples, 0.03%)</title><rect x="4.4882%" y="389" width="0.0287%" height="15" fill="rgb(243,32,47)" fg:x="388616702" fg:w="2485394"/><text x="4.7382%" y="399.50"></text></g><g><title>core::cell::BorrowRefMut::new (2,485,394 samples, 0.03%)</title><rect x="4.4882%" y="373" width="0.0287%" height="15" fill="rgb(247,202,23)" fg:x="388616702" fg:w="2485394"/><text x="4.7382%" y="383.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (50,296,069 samples, 0.58%)</title><rect x="3.9928%" y="437" width="0.5809%" height="15" fill="rgb(219,102,11)" fg:x="345717246" fg:w="50296069"/><text x="4.2428%" y="447.50"></text></g><g><title>core::slice::memchr::memrchr (4,911,219 samples, 0.06%)</title><rect x="4.5169%" y="421" width="0.0567%" height="15" fill="rgb(243,110,44)" fg:x="391102096" fg:w="4911219"/><text x="4.7669%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2,578,877 samples, 0.03%)</title><rect x="4.5736%" y="437" width="0.0298%" height="15" fill="rgb(222,74,54)" fg:x="396013315" fg:w="2578877"/><text x="4.8236%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1,839,998 samples, 0.02%)</title><rect x="4.6034%" y="437" width="0.0213%" height="15" fill="rgb(216,99,12)" fg:x="398592192" fg:w="1839998"/><text x="4.8534%" y="447.50"></text></g><g><title>__memmove_avx_unaligned (4,033,543 samples, 0.05%)</title><rect x="5.0385%" y="309" width="0.0466%" height="15" fill="rgb(226,22,26)" fg:x="436266510" fg:w="4033543"/><text x="5.2885%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,961,643 samples, 0.07%)</title><rect x="5.0382%" y="325" width="0.0689%" height="15" fill="rgb(217,163,10)" fg:x="436234520" fg:w="5961643"/><text x="5.2882%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,896,110 samples, 0.02%)</title><rect x="5.0851%" y="309" width="0.0219%" height="15" fill="rgb(213,25,53)" fg:x="440300053" fg:w="1896110"/><text x="5.3351%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (7,926,030 samples, 0.09%)</title><rect x="5.0159%" y="357" width="0.0915%" height="15" fill="rgb(252,105,26)" fg:x="434303053" fg:w="7926030"/><text x="5.2659%" y="367.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (7,564,050 samples, 0.09%)</title><rect x="5.0200%" y="341" width="0.0874%" height="15" fill="rgb(220,39,43)" fg:x="434665033" fg:w="7564050"/><text x="5.2700%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,725,391 samples, 0.05%)</title><rect x="5.1629%" y="325" width="0.0546%" height="15" fill="rgb(229,68,48)" fg:x="447030817" fg:w="4725391"/><text x="5.4129%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,522,482 samples, 0.04%)</title><rect x="5.1768%" y="309" width="0.0407%" height="15" fill="rgb(252,8,32)" fg:x="448233726" fg:w="3522482"/><text x="5.4268%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (9,483,303 samples, 0.11%)</title><rect x="5.1596%" y="341" width="0.1095%" height="15" fill="rgb(223,20,43)" fg:x="446749610" fg:w="9483303"/><text x="5.4096%" y="351.50"></text></g><g><title>core::slice::memchr::memrchr::_{{closure}} (4,476,705 samples, 0.05%)</title><rect x="5.2174%" y="325" width="0.0517%" height="15" fill="rgb(229,81,49)" fg:x="451756208" fg:w="4476705"/><text x="5.4674%" y="335.50"></text></g><g><title>core::slice::memchr::memrchr (15,634,332 samples, 0.18%)</title><rect x="5.1074%" y="357" width="0.1806%" height="15" fill="rgb(236,28,36)" fg:x="442229083" fg:w="15634332"/><text x="5.3574%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to (1,516,234 samples, 0.02%)</title><rect x="5.2705%" y="341" width="0.0175%" height="15" fill="rgb(249,185,26)" fg:x="456347181" fg:w="1516234"/><text x="5.5205%" y="351.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (31,303,685 samples, 0.36%)</title><rect x="5.0153%" y="389" width="0.3615%" height="15" fill="rgb(249,174,33)" fg:x="434258476" fg:w="31303685"/><text x="5.2653%" y="399.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (31,303,685 samples, 0.36%)</title><rect x="5.0153%" y="373" width="0.3615%" height="15" fill="rgb(233,201,37)" fg:x="434258476" fg:w="31303685"/><text x="5.2653%" y="383.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (7,698,746 samples, 0.09%)</title><rect x="5.2880%" y="357" width="0.0889%" height="15" fill="rgb(221,78,26)" fg:x="457863415" fg:w="7698746"/><text x="5.5380%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2,756,613 samples, 0.03%)</title><rect x="5.3450%" y="341" width="0.0318%" height="15" fill="rgb(250,127,30)" fg:x="462805548" fg:w="2756613"/><text x="5.5950%" y="351.50"></text></g><g><title>&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3,812,575 samples, 0.04%)</title><rect x="5.3769%" y="389" width="0.0440%" height="15" fill="rgb(230,49,44)" fg:x="465562161" fg:w="3812575"/><text x="5.6269%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (43,429,776 samples, 0.50%)</title><rect x="4.9551%" y="405" width="0.5016%" height="15" fill="rgb(229,67,23)" fg:x="429046054" fg:w="43429776"/><text x="5.2051%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3,101,094 samples, 0.04%)</title><rect x="5.4209%" y="389" width="0.0358%" height="15" fill="rgb(249,83,47)" fg:x="469374736" fg:w="3101094"/><text x="5.6709%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3,101,094 samples, 0.04%)</title><rect x="5.4209%" y="373" width="0.0358%" height="15" fill="rgb(215,43,3)" fg:x="469374736" fg:w="3101094"/><text x="5.6709%" y="383.50"></text></g><g><title>core::cell::BorrowRefMut::new (3,101,094 samples, 0.04%)</title><rect x="5.4209%" y="357" width="0.0358%" height="15" fill="rgb(238,154,13)" fg:x="469374736" fg:w="3101094"/><text x="5.6709%" y="367.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (52,264,086 samples, 0.60%)</title><rect x="4.9181%" y="421" width="0.6036%" height="15" fill="rgb(219,56,2)" fg:x="425838457" fg:w="52264086"/><text x="5.1681%" y="431.50"></text></g><g><title>core::slice::memchr::memrchr (5,626,713 samples, 0.06%)</title><rect x="5.4567%" y="405" width="0.0650%" height="15" fill="rgb(233,0,4)" fg:x="472475830" fg:w="5626713"/><text x="5.7067%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,002,052 samples, 0.03%)</title><rect x="5.5217%" y="421" width="0.0347%" height="15" fill="rgb(235,30,7)" fg:x="478102543" fg:w="3002052"/><text x="5.7717%" y="431.50"></text></g><g><title>core::fmt::Formatter::new (3,756,718 samples, 0.04%)</title><rect x="5.5564%" y="421" width="0.0434%" height="15" fill="rgb(250,79,13)" fg:x="481104595" fg:w="3756718"/><text x="5.8064%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,088,291 samples, 0.01%)</title><rect x="5.5998%" y="405" width="0.0126%" height="15" fill="rgb(211,146,34)" fg:x="484861313" fg:w="1088291"/><text x="5.8498%" y="415.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3,227,591 samples, 0.04%)</title><rect x="5.6123%" y="405" width="0.0373%" height="15" fill="rgb(228,22,38)" fg:x="485949604" fg:w="3227591"/><text x="5.8623%" y="415.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1,565,483 samples, 0.02%)</title><rect x="5.6496%" y="405" width="0.0181%" height="15" fill="rgb(235,168,5)" fg:x="489177195" fg:w="1565483"/><text x="5.8996%" y="415.50"></text></g><g><title>__memmove_avx_unaligned (3,128,694 samples, 0.04%)</title><rect x="5.9709%" y="277" width="0.0361%" height="15" fill="rgb(221,155,16)" fg:x="516996799" fg:w="3128694"/><text x="6.2209%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,663,103 samples, 0.05%)</title><rect x="5.9706%" y="293" width="0.0539%" height="15" fill="rgb(215,215,53)" fg:x="516967464" fg:w="4663103"/><text x="6.2206%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,505,074 samples, 0.02%)</title><rect x="6.0070%" y="277" width="0.0174%" height="15" fill="rgb(223,4,10)" fg:x="520125493" fg:w="1505074"/><text x="6.2570%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5,658,854 samples, 0.07%)</title><rect x="5.9594%" y="325" width="0.0654%" height="15" fill="rgb(234,103,6)" fg:x="516003351" fg:w="5658854"/><text x="6.2094%" y="335.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (5,455,538 samples, 0.06%)</title><rect x="5.9618%" y="309" width="0.0630%" height="15" fill="rgb(227,97,0)" fg:x="516206667" fg:w="5455538"/><text x="6.2118%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,211,888 samples, 0.05%)</title><rect x="6.0873%" y="293" width="0.0486%" height="15" fill="rgb(234,150,53)" fg:x="527076411" fg:w="4211888"/><text x="6.3373%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,765,989 samples, 0.03%)</title><rect x="6.1040%" y="277" width="0.0319%" height="15" fill="rgb(228,201,54)" fg:x="528522310" fg:w="2765989"/><text x="6.3540%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (6,158,939 samples, 0.07%)</title><rect x="6.0808%" y="309" width="0.0711%" height="15" fill="rgb(222,22,37)" fg:x="526514277" fg:w="6158939"/><text x="6.3308%" y="319.50"></text></g><g><title>core::slice::memchr::memrchr::_{{closure}} (1,384,917 samples, 0.02%)</title><rect x="6.1360%" y="293" width="0.0160%" height="15" fill="rgb(237,53,32)" fg:x="531288299" fg:w="1384917"/><text x="6.3860%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to (1,420,621 samples, 0.02%)</title><rect x="6.1523%" y="309" width="0.0164%" height="15" fill="rgb(233,25,53)" fg:x="532701124" fg:w="1420621"/><text x="6.4023%" y="319.50"></text></g><g><title>core::slice::memchr::memrchr (12,509,971 samples, 0.14%)</title><rect x="6.0248%" y="325" width="0.1445%" height="15" fill="rgb(210,40,34)" fg:x="521662205" fg:w="12509971"/><text x="6.2748%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2,350,904 samples, 0.03%)</title><rect x="6.2224%" y="309" width="0.0272%" height="15" fill="rgb(241,220,44)" fg:x="538770137" fg:w="2350904"/><text x="6.4724%" y="319.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (25,147,408 samples, 0.29%)</title><rect x="5.9594%" y="357" width="0.2904%" height="15" fill="rgb(235,28,35)" fg:x="516003351" fg:w="25147408"/><text x="6.2094%" y="367.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (25,147,408 samples, 0.29%)</title><rect x="5.9594%" y="341" width="0.2904%" height="15" fill="rgb(210,56,17)" fg:x="516003351" fg:w="25147408"/><text x="6.2094%" y="351.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (6,978,583 samples, 0.08%)</title><rect x="6.1693%" y="325" width="0.0806%" height="15" fill="rgb(224,130,29)" fg:x="534172176" fg:w="6978583"/><text x="6.4193%" y="335.50"></text></g><g><title>&lt;std::sync::reentrant_lock::ReentrantLockGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1,953,060 samples, 0.02%)</title><rect x="6.2499%" y="357" width="0.0226%" height="15" fill="rgb(235,212,8)" fg:x="541150759" fg:w="1953060"/><text x="6.4999%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (32,200,874 samples, 0.37%)</title><rect x="5.9210%" y="373" width="0.3719%" height="15" fill="rgb(223,33,50)" fg:x="512678309" fg:w="32200874"/><text x="6.1710%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1,775,364 samples, 0.02%)</title><rect x="6.2724%" y="357" width="0.0205%" height="15" fill="rgb(219,149,13)" fg:x="543103819" fg:w="1775364"/><text x="6.5224%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1,775,364 samples, 0.02%)</title><rect x="6.2724%" y="341" width="0.0205%" height="15" fill="rgb(250,156,29)" fg:x="543103819" fg:w="1775364"/><text x="6.5224%" y="351.50"></text></g><g><title>core::cell::BorrowRefMut::new (1,775,364 samples, 0.02%)</title><rect x="6.2724%" y="325" width="0.0205%" height="15" fill="rgb(216,193,19)" fg:x="543103819" fg:w="1775364"/><text x="6.5224%" y="335.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (40,204,168 samples, 0.46%)</title><rect x="5.8772%" y="389" width="0.4643%" height="15" fill="rgb(216,135,14)" fg:x="508879529" fg:w="40204168"/><text x="6.1272%" y="399.50"></text></g><g><title>core::slice::memchr::memrchr (4,204,514 samples, 0.05%)</title><rect x="6.2929%" y="373" width="0.0486%" height="15" fill="rgb(241,47,5)" fg:x="544879183" fg:w="4204514"/><text x="6.5429%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2,640,305 samples, 0.03%)</title><rect x="6.3415%" y="389" width="0.0305%" height="15" fill="rgb(233,42,35)" fg:x="549083697" fg:w="2640305"/><text x="6.5915%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4,400,679 samples, 0.05%)</title><rect x="6.3720%" y="389" width="0.0508%" height="15" fill="rgb(231,13,6)" fg:x="551724002" fg:w="4400679"/><text x="6.6220%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (4,482,903 samples, 0.05%)</title><rect x="6.4310%" y="373" width="0.0518%" height="15" fill="rgb(207,181,40)" fg:x="556835125" fg:w="4482903"/><text x="6.6810%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral (5,461,114 samples, 0.06%)</title><rect x="6.4310%" y="389" width="0.0631%" height="15" fill="rgb(254,173,49)" fg:x="556835125" fg:w="5461114"/><text x="6.6810%" y="399.50"></text></g><g><title>core::fmt::Formatter::sign_plus (978,211 samples, 0.01%)</title><rect x="6.4828%" y="373" width="0.0113%" height="15" fill="rgb(221,1,38)" fg:x="561318028" fg:w="978211"/><text x="6.7328%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (85,815,684 samples, 0.99%)</title><rect x="5.5998%" y="421" width="0.9911%" height="15" fill="rgb(206,124,46)" fg:x="484861313" fg:w="85815684"/><text x="5.8498%" y="431.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (79,934,319 samples, 0.92%)</title><rect x="5.6677%" y="405" width="0.9232%" height="15" fill="rgb(249,21,11)" fg:x="490742678" fg:w="79934319"/><text x="5.9177%" y="415.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (8,380,758 samples, 0.10%)</title><rect x="6.4941%" y="389" width="0.0968%" height="15" fill="rgb(222,201,40)" fg:x="562296239" fg:w="8380758"/><text x="6.7441%" y="399.50"></text></g><g><title>&lt;regex_automata::dfa::dense::State as core::fmt::Debug&gt;::fmt (282,756,865 samples, 3.27%)</title><rect x="3.3698%" y="469" width="3.2656%" height="15" fill="rgb(235,61,29)" fg:x="291773525" fg:w="282756865"/><text x="3.6198%" y="479.50">&lt;re..</text></g><g><title>core::fmt::Formatter::write_fmt (229,776,138 samples, 2.65%)</title><rect x="3.9816%" y="453" width="2.6537%" height="15" fill="rgb(219,207,3)" fg:x="344754252" fg:w="229776138"/><text x="4.2316%" y="463.50">co..</text></g><g><title>core::fmt::write (173,239,302 samples, 2.00%)</title><rect x="4.6346%" y="437" width="2.0008%" height="15" fill="rgb(222,56,46)" fg:x="401291088" fg:w="173239302"/><text x="4.8846%" y="447.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,853,393 samples, 0.04%)</title><rect x="6.5909%" y="421" width="0.0445%" height="15" fill="rgb(239,76,54)" fg:x="570676997" fg:w="3853393"/><text x="6.8409%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,853,393 samples, 0.04%)</title><rect x="6.5909%" y="405" width="0.0445%" height="15" fill="rgb(231,124,27)" fg:x="570676997" fg:w="3853393"/><text x="6.8409%" y="415.50"></text></g><g><title>&lt;regex_automata::util::alphabet::Unit as core::fmt::Debug&gt;::fmt (2,704,090 samples, 0.03%)</title><rect x="6.6354%" y="469" width="0.0312%" height="15" fill="rgb(249,195,6)" fg:x="574530390" fg:w="2704090"/><text x="6.8854%" y="479.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1,597,251 samples, 0.02%)</title><rect x="6.6666%" y="469" width="0.0184%" height="15" fill="rgb(237,174,47)" fg:x="577234480" fg:w="1597251"/><text x="6.9166%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="469" width="0.0137%" height="15" fill="rgb(206,201,31)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="453" width="0.0137%" height="15" fill="rgb(231,57,52)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="463.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="437" width="0.0137%" height="15" fill="rgb(248,177,22)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="421" width="0.0137%" height="15" fill="rgb(215,211,37)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="431.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="405" width="0.0137%" height="15" fill="rgb(241,128,51)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="389" width="0.0137%" height="15" fill="rgb(227,165,31)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="373" width="0.0137%" height="15" fill="rgb(228,167,24)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,188,092 samples, 0.01%)</title><rect x="6.6853%" y="357" width="0.0137%" height="15" fill="rgb(228,143,12)" fg:x="578852110" fg:w="1188092"/><text x="6.9353%" y="367.50"></text></g><g><title>[regex-cli] (1,422,977 samples, 0.02%)</title><rect x="6.6990%" y="469" width="0.0164%" height="15" fill="rgb(249,149,8)" fg:x="580040202" fg:w="1422977"/><text x="6.9490%" y="479.50"></text></g><g><title>&lt;regex_automata::util::escape::DebugByte as core::fmt::Debug&gt;::fmt (1,422,977 samples, 0.02%)</title><rect x="6.6990%" y="453" width="0.0164%" height="15" fill="rgb(243,35,44)" fg:x="580040202" fg:w="1422977"/><text x="6.9490%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3,407,064 samples, 0.04%)</title><rect x="6.7154%" y="453" width="0.0393%" height="15" fill="rgb(246,89,9)" fg:x="581463179" fg:w="3407064"/><text x="6.9654%" y="463.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1,735,978 samples, 0.02%)</title><rect x="6.7548%" y="453" width="0.0200%" height="15" fill="rgb(233,213,13)" fg:x="584870243" fg:w="1735978"/><text x="7.0048%" y="463.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::from_encoded_range (1,206,037 samples, 0.01%)</title><rect x="6.7609%" y="437" width="0.0139%" height="15" fill="rgb(233,141,41)" fg:x="585400184" fg:w="1206037"/><text x="7.0109%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,052,176 samples, 0.01%)</title><rect x="6.7910%" y="421" width="0.0122%" height="15" fill="rgb(239,167,4)" fg:x="588007193" fg:w="1052176"/><text x="7.0410%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,930,106 samples, 0.02%)</title><rect x="6.7855%" y="437" width="0.0223%" height="15" fill="rgb(209,217,16)" fg:x="587531001" fg:w="1930106"/><text x="7.0355%" y="447.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb76bce5d274bf2f8E.llvm.13318194621340869329 (2,976,158 samples, 0.03%)</title><rect x="6.7748%" y="453" width="0.0344%" height="15" fill="rgb(219,88,35)" fg:x="586606221" fg:w="2976158"/><text x="7.0248%" y="463.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::maybe_add_state (9,717,288 samples, 0.11%)</title><rect x="6.8112%" y="453" width="0.1122%" height="15" fill="rgb(220,193,23)" fg:x="589752556" fg:w="9717288"/><text x="7.0612%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,340,767 samples, 0.02%)</title><rect x="6.9239%" y="373" width="0.0155%" height="15" fill="rgb(230,90,52)" fg:x="599512137" fg:w="1340767"/><text x="7.1739%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,340,767 samples, 0.02%)</title><rect x="6.9239%" y="357" width="0.0155%" height="15" fill="rgb(252,106,19)" fg:x="599512137" fg:w="1340767"/><text x="7.1739%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,340,767 samples, 0.02%)</title><rect x="6.9239%" y="341" width="0.0155%" height="15" fill="rgb(206,74,20)" fg:x="599512137" fg:w="1340767"/><text x="7.1739%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,340,767 samples, 0.02%)</title><rect x="6.9239%" y="325" width="0.0155%" height="15" fill="rgb(230,138,44)" fg:x="599512137" fg:w="1340767"/><text x="7.1739%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,300,533 samples, 0.02%)</title><rect x="6.9244%" y="309" width="0.0150%" height="15" fill="rgb(235,182,43)" fg:x="599552371" fg:w="1300533"/><text x="7.1744%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,300,533 samples, 0.02%)</title><rect x="6.9244%" y="293" width="0.0150%" height="15" fill="rgb(242,16,51)" fg:x="599552371" fg:w="1300533"/><text x="7.1744%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1,300,533 samples, 0.02%)</title><rect x="6.9244%" y="277" width="0.0150%" height="15" fill="rgb(248,9,4)" fg:x="599552371" fg:w="1300533"/><text x="7.1744%" y="287.50"></text></g><g><title>malloc (1,260,098 samples, 0.01%)</title><rect x="6.9248%" y="261" width="0.0146%" height="15" fill="rgb(210,31,22)" fg:x="599592806" fg:w="1260098"/><text x="7.1748%" y="271.50"></text></g><g><title>_int_malloc (1,094,862 samples, 0.01%)</title><rect x="6.9267%" y="245" width="0.0126%" height="15" fill="rgb(239,54,39)" fg:x="599758042" fg:w="1094862"/><text x="7.1767%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,500,975 samples, 0.02%)</title><rect x="6.9239%" y="437" width="0.0173%" height="15" fill="rgb(230,99,41)" fg:x="599512137" fg:w="1500975"/><text x="7.1739%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,500,975 samples, 0.02%)</title><rect x="6.9239%" y="421" width="0.0173%" height="15" fill="rgb(253,106,12)" fg:x="599512137" fg:w="1500975"/><text x="7.1739%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1,500,975 samples, 0.02%)</title><rect x="6.9239%" y="405" width="0.0173%" height="15" fill="rgb(213,46,41)" fg:x="599512137" fg:w="1500975"/><text x="7.1739%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,500,975 samples, 0.02%)</title><rect x="6.9239%" y="389" width="0.0173%" height="15" fill="rgb(215,133,35)" fg:x="599512137" fg:w="1500975"/><text x="7.1739%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::get (1,304,706 samples, 0.02%)</title><rect x="6.9412%" y="437" width="0.0151%" height="15" fill="rgb(213,28,5)" fg:x="601013112" fg:w="1304706"/><text x="7.1912%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::hash (2,380,960 samples, 0.03%)</title><rect x="6.9563%" y="437" width="0.0275%" height="15" fill="rgb(215,77,49)" fg:x="602317818" fg:w="2380960"/><text x="7.2063%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,191,582 samples, 0.01%)</title><rect x="6.9847%" y="341" width="0.0138%" height="15" fill="rgb(248,100,22)" fg:x="604774699" fg:w="1191582"/><text x="7.2347%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1,191,582 samples, 0.01%)</title><rect x="6.9847%" y="325" width="0.0138%" height="15" fill="rgb(208,67,9)" fg:x="604774699" fg:w="1191582"/><text x="7.2347%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,191,582 samples, 0.01%)</title><rect x="6.9847%" y="309" width="0.0138%" height="15" fill="rgb(219,133,21)" fg:x="604774699" fg:w="1191582"/><text x="7.2347%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6,535,347 samples, 0.08%)</title><rect x="6.9234%" y="453" width="0.0755%" height="15" fill="rgb(246,46,29)" fg:x="599469844" fg:w="6535347"/><text x="7.1734%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::set (1,306,413 samples, 0.02%)</title><rect x="6.9838%" y="437" width="0.0151%" height="15" fill="rgb(246,185,52)" fg:x="604698778" fg:w="1306413"/><text x="7.2338%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (1,230,492 samples, 0.01%)</title><rect x="6.9847%" y="421" width="0.0142%" height="15" fill="rgb(252,136,11)" fg:x="604774699" fg:w="1230492"/><text x="7.2347%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1,230,492 samples, 0.01%)</title><rect x="6.9847%" y="405" width="0.0142%" height="15" fill="rgb(219,138,53)" fg:x="604774699" fg:w="1230492"/><text x="7.2347%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1,230,492 samples, 0.01%)</title><rect x="6.9847%" y="389" width="0.0142%" height="15" fill="rgb(211,51,23)" fg:x="604774699" fg:w="1230492"/><text x="7.2347%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,230,492 samples, 0.01%)</title><rect x="6.9847%" y="373" width="0.0142%" height="15" fill="rgb(247,221,28)" fg:x="604774699" fg:w="1230492"/><text x="7.2347%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,230,492 samples, 0.01%)</title><rect x="6.9847%" y="357" width="0.0142%" height="15" fill="rgb(251,222,45)" fg:x="604774699" fg:w="1230492"/><text x="7.2347%" y="367.50"></text></g><g><title>[unknown] (25,586,483 samples, 0.30%)</title><rect x="6.7154%" y="469" width="0.2955%" height="15" fill="rgb(217,162,53)" fg:x="581463179" fg:w="25586483"/><text x="6.9654%" y="479.50"></text></g><g><title>regex_automata::util::determinize::next (1,019,549 samples, 0.01%)</title><rect x="6.9992%" y="453" width="0.0118%" height="15" fill="rgb(229,93,14)" fg:x="606030113" fg:w="1019549"/><text x="7.2492%" y="463.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb76bce5d274bf2f8E.llvm.13318194621340869329 (24,476,889 samples, 0.28%)</title><rect x="7.0200%" y="469" width="0.2827%" height="15" fill="rgb(209,67,49)" fg:x="607836650" fg:w="24476889"/><text x="7.2700%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (5,053,716 samples, 0.06%)</title><rect x="7.2444%" y="453" width="0.0584%" height="15" fill="rgb(213,87,29)" fg:x="627259823" fg:w="5053716"/><text x="7.4944%" y="463.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (951,421 samples, 0.01%)</title><rect x="7.3097%" y="437" width="0.0110%" height="15" fill="rgb(205,151,52)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="447.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (951,421 samples, 0.01%)</title><rect x="7.3097%" y="421" width="0.0110%" height="15" fill="rgb(253,215,39)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="431.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (951,421 samples, 0.01%)</title><rect x="7.3097%" y="405" width="0.0110%" height="15" fill="rgb(221,220,41)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (951,421 samples, 0.01%)</title><rect x="7.3097%" y="389" width="0.0110%" height="15" fill="rgb(218,133,21)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="399.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (951,421 samples, 0.01%)</title><rect x="7.3097%" y="373" width="0.0110%" height="15" fill="rgb(221,193,43)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (951,421 samples, 0.01%)</title><rect x="7.3097%" y="357" width="0.0110%" height="15" fill="rgb(240,128,52)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (951,421 samples, 0.01%)</title><rect x="7.3097%" y="341" width="0.0110%" height="15" fill="rgb(253,114,12)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (951,421 samples, 0.01%)</title><rect x="7.3097%" y="325" width="0.0110%" height="15" fill="rgb(215,223,47)" fg:x="632916135" fg:w="951421"/><text x="7.5597%" y="335.50"></text></g><g><title>core::fmt::write (1,002,967 samples, 0.01%)</title><rect x="7.3094%" y="469" width="0.0116%" height="15" fill="rgb(248,225,23)" fg:x="632891289" fg:w="1002967"/><text x="7.5594%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (978,121 samples, 0.01%)</title><rect x="7.3097%" y="453" width="0.0113%" height="15" fill="rgb(250,108,0)" fg:x="632916135" fg:w="978121"/><text x="7.5597%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (17,213,694 samples, 0.20%)</title><rect x="8.4181%" y="389" width="0.1988%" height="15" fill="rgb(228,208,7)" fg:x="728886737" fg:w="17213694"/><text x="8.6681%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (31,987,800 samples, 0.37%)</title><rect x="8.2931%" y="405" width="0.3694%" height="15" fill="rgb(244,45,10)" fg:x="718069030" fg:w="31987800"/><text x="8.5431%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,956,399 samples, 0.05%)</title><rect x="8.6169%" y="389" width="0.0457%" height="15" fill="rgb(207,125,25)" fg:x="746100431" fg:w="3956399"/><text x="8.8669%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (54,872,374 samples, 0.63%)</title><rect x="8.8698%" y="389" width="0.6337%" height="15" fill="rgb(210,195,18)" fg:x="768003790" fg:w="54872374"/><text x="9.1198%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (102,708,655 samples, 1.19%)</title><rect x="8.6626%" y="405" width="1.1862%" height="15" fill="rgb(249,80,12)" fg:x="750056830" fg:w="102708655"/><text x="8.9126%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (29,889,321 samples, 0.35%)</title><rect x="9.5036%" y="389" width="0.3452%" height="15" fill="rgb(221,65,9)" fg:x="822876164" fg:w="29889321"/><text x="9.7536%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (208,357,340 samples, 2.41%)</title><rect x="7.4429%" y="453" width="2.4064%" height="15" fill="rgb(235,49,36)" fg:x="644450735" fg:w="208357340"/><text x="7.6929%" y="463.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (208,357,340 samples, 2.41%)</title><rect x="7.4429%" y="437" width="2.4064%" height="15" fill="rgb(225,32,20)" fg:x="644450735" fg:w="208357340"/><text x="7.6929%" y="447.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (208,357,340 samples, 2.41%)</title><rect x="7.4429%" y="421" width="2.4064%" height="15" fill="rgb(215,141,46)" fg:x="644450735" fg:w="208357340"/><text x="7.6929%" y="431.50">&lt;c..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (14,502,622 samples, 0.17%)</title><rect x="9.8493%" y="453" width="0.1675%" height="15" fill="rgb(250,160,47)" fg:x="852808075" fg:w="14502622"/><text x="10.0993%" y="463.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3,637,411 samples, 0.04%)</title><rect x="9.9748%" y="437" width="0.0420%" height="15" fill="rgb(216,222,40)" fg:x="863673286" fg:w="3637411"/><text x="10.2248%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3,637,411 samples, 0.04%)</title><rect x="9.9748%" y="421" width="0.0420%" height="15" fill="rgb(234,217,39)" fg:x="863673286" fg:w="3637411"/><text x="10.2248%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3,637,411 samples, 0.04%)</title><rect x="9.9748%" y="405" width="0.0420%" height="15" fill="rgb(207,178,40)" fg:x="863673286" fg:w="3637411"/><text x="10.2248%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,061,368 samples, 0.06%)</title><rect x="10.0224%" y="389" width="0.0585%" height="15" fill="rgb(221,136,13)" fg:x="867795509" fg:w="5061368"/><text x="10.2724%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,061,368 samples, 0.06%)</title><rect x="10.0224%" y="373" width="0.0585%" height="15" fill="rgb(249,199,10)" fg:x="867795509" fg:w="5061368"/><text x="10.2724%" y="383.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5,877,667 samples, 0.07%)</title><rect x="10.0224%" y="421" width="0.0679%" height="15" fill="rgb(249,222,13)" fg:x="867795509" fg:w="5877667"/><text x="10.2724%" y="431.50"></text></g><g><title>core::hash::Hasher::write_usize (5,877,667 samples, 0.07%)</title><rect x="10.0224%" y="405" width="0.0679%" height="15" fill="rgb(244,185,38)" fg:x="867795509" fg:w="5877667"/><text x="10.2724%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (247,825,575 samples, 2.86%)</title><rect x="7.3210%" y="469" width="2.8622%" height="15" fill="rgb(236,202,9)" fg:x="633894256" fg:w="247825575"/><text x="7.5710%" y="479.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14,409,134 samples, 0.17%)</title><rect x="10.0168%" y="453" width="0.1664%" height="15" fill="rgb(250,229,37)" fg:x="867310697" fg:w="14409134"/><text x="10.2668%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (13,924,322 samples, 0.16%)</title><rect x="10.0224%" y="437" width="0.1608%" height="15" fill="rgb(206,174,23)" fg:x="867795509" fg:w="13924322"/><text x="10.2724%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (8,046,655 samples, 0.09%)</title><rect x="10.0902%" y="421" width="0.0929%" height="15" fill="rgb(211,33,43)" fg:x="873673176" fg:w="8046655"/><text x="10.3402%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,046,655 samples, 0.09%)</title><rect x="10.0902%" y="405" width="0.0929%" height="15" fill="rgb(245,58,50)" fg:x="873673176" fg:w="8046655"/><text x="10.3402%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,046,655 samples, 0.09%)</title><rect x="10.0902%" y="389" width="0.0929%" height="15" fill="rgb(244,68,36)" fg:x="873673176" fg:w="8046655"/><text x="10.3402%" y="399.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb76bce5d274bf2f8E.llvm.13318194621340869329 (4,128,391 samples, 0.05%)</title><rect x="10.1355%" y="373" width="0.0477%" height="15" fill="rgb(232,229,15)" fg:x="877591440" fg:w="4128391"/><text x="10.3855%" y="383.50"></text></g><g><title>core::hash::sip::u8to64_le (2,988,087 samples, 0.03%)</title><rect x="10.1487%" y="357" width="0.0345%" height="15" fill="rgb(254,30,23)" fg:x="878731744" fg:w="2988087"/><text x="10.3987%" y="367.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::set_transition (944,386 samples, 0.01%)</title><rect x="10.1965%" y="469" width="0.0109%" height="15" fill="rgb(235,160,14)" fg:x="882872481" fg:w="944386"/><text x="10.4465%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,583,098 samples, 0.03%)</title><rect x="10.3449%" y="437" width="0.0298%" height="15" fill="rgb(212,155,44)" fg:x="895723360" fg:w="2583098"/><text x="10.5949%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (15,224,123 samples, 0.18%)</title><rect x="10.3826%" y="437" width="0.1758%" height="15" fill="rgb(226,2,50)" fg:x="898990207" fg:w="15224123"/><text x="10.6326%" y="447.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::run::_{{closure}} (12,255,924 samples, 0.14%)</title><rect x="10.4169%" y="421" width="0.1415%" height="15" fill="rgb(234,177,6)" fg:x="901958406" fg:w="12255924"/><text x="10.6669%" y="431.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (12,255,924 samples, 0.14%)</title><rect x="10.4169%" y="405" width="0.1415%" height="15" fill="rgb(217,24,9)" fg:x="901958406" fg:w="12255924"/><text x="10.6669%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,808,509 samples, 0.04%)</title><rect x="10.6304%" y="405" width="0.0440%" height="15" fill="rgb(220,13,46)" fg:x="920446324" fg:w="3808509"/><text x="10.8804%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,808,509 samples, 0.04%)</title><rect x="10.6304%" y="389" width="0.0440%" height="15" fill="rgb(239,221,27)" fg:x="920446324" fg:w="3808509"/><text x="10.8804%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6,337,881 samples, 0.07%)</title><rect x="10.6304%" y="421" width="0.0732%" height="15" fill="rgb(222,198,25)" fg:x="920446324" fg:w="6337881"/><text x="10.8804%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,529,372 samples, 0.03%)</title><rect x="10.6744%" y="405" width="0.0292%" height="15" fill="rgb(211,99,13)" fg:x="924254833" fg:w="2529372"/><text x="10.9244%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,529,372 samples, 0.03%)</title><rect x="10.6744%" y="389" width="0.0292%" height="15" fill="rgb(232,111,31)" fg:x="924254833" fg:w="2529372"/><text x="10.9244%" y="399.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;T&gt;::to_index (3,910,591 samples, 0.05%)</title><rect x="10.7036%" y="421" width="0.0452%" height="15" fill="rgb(245,82,37)" fg:x="926784205" fg:w="3910591"/><text x="10.9536%" y="431.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;T&gt;::to_index (3,910,591 samples, 0.05%)</title><rect x="10.7036%" y="405" width="0.0452%" height="15" fill="rgb(227,149,46)" fg:x="926784205" fg:w="3910591"/><text x="10.9536%" y="415.50"></text></g><g><title>core::ptr::read (1,651,140 samples, 0.02%)</title><rect x="10.7488%" y="389" width="0.0191%" height="15" fill="rgb(218,36,50)" fg:x="930694796" fg:w="1651140"/><text x="10.9988%" y="399.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::cached_state (19,578,046 samples, 0.23%)</title><rect x="10.5585%" y="437" width="0.2261%" height="15" fill="rgb(226,80,48)" fg:x="914214330" fg:w="19578046"/><text x="10.8085%" y="447.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::get_state_builder (3,097,580 samples, 0.04%)</title><rect x="10.7488%" y="421" width="0.0358%" height="15" fill="rgb(238,224,15)" fg:x="930694796" fg:w="3097580"/><text x="10.9988%" y="431.50"></text></g><g><title>core::mem::replace (3,097,580 samples, 0.04%)</title><rect x="10.7488%" y="405" width="0.0358%" height="15" fill="rgb(241,136,10)" fg:x="930694796" fg:w="3097580"/><text x="10.9988%" y="415.50"></text></g><g><title>core::ptr::write (1,446,440 samples, 0.02%)</title><rect x="10.7679%" y="389" width="0.0167%" height="15" fill="rgb(208,32,45)" fg:x="932345936" fg:w="1446440"/><text x="11.0179%" y="399.50"></text></g><g><title>regex_automata::dfa::determinize::Config::run (50,011,204 samples, 0.58%)</title><rect x="10.2074%" y="469" width="0.5776%" height="15" fill="rgb(207,135,9)" fg:x="883816867" fg:w="50011204"/><text x="10.4574%" y="479.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::run (50,011,204 samples, 0.58%)</title><rect x="10.2074%" y="453" width="0.5776%" height="15" fill="rgb(206,86,44)" fg:x="883816867" fg:w="50011204"/><text x="10.4574%" y="463.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,177,833 samples, 0.03%)</title><rect x="10.8826%" y="421" width="0.0252%" height="15" fill="rgb(245,177,15)" fg:x="942278233" fg:w="2177833"/><text x="11.1326%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,712,143 samples, 0.02%)</title><rect x="10.8880%" y="405" width="0.0198%" height="15" fill="rgb(206,64,50)" fg:x="942743923" fg:w="1712143"/><text x="11.1380%" y="415.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (20,505,300 samples, 0.24%)</title><rect x="10.7882%" y="469" width="0.2368%" height="15" fill="rgb(234,36,40)" fg:x="934103347" fg:w="20505300"/><text x="11.0382%" y="479.50"></text></g><g><title>regex_automata::dfa::remapper::dense::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;&gt;::remap (20,394,791 samples, 0.24%)</title><rect x="10.7894%" y="453" width="0.2355%" height="15" fill="rgb(213,64,8)" fg:x="934213856" fg:w="20394791"/><text x="11.0394%" y="463.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::remap (20,394,791 samples, 0.24%)</title><rect x="10.7894%" y="437" width="0.2355%" height="15" fill="rgb(210,75,36)" fg:x="934213856" fg:w="20394791"/><text x="11.0394%" y="447.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap::_{{closure}} (10,152,581 samples, 0.12%)</title><rect x="10.9077%" y="421" width="0.1173%" height="15" fill="rgb(229,88,21)" fg:x="944456066" fg:w="10152581"/><text x="11.1577%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::IndexMapper::to_index (9,546,079 samples, 0.11%)</title><rect x="10.9147%" y="405" width="0.1102%" height="15" fill="rgb(252,204,47)" fg:x="945062568" fg:w="9546079"/><text x="11.1647%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2,483,258 samples, 0.03%)</title><rect x="11.0252%" y="469" width="0.0287%" height="15" fill="rgb(208,77,27)" fg:x="954625401" fg:w="2483258"/><text x="11.2752%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,908,857 samples, 0.08%)</title><rect x="17.4934%" y="437" width="0.0798%" height="15" fill="rgb(221,76,26)" fg:x="1514685466" fg:w="6908857"/><text x="17.7434%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,569,615 samples, 0.03%)</title><rect x="17.5436%" y="421" width="0.0297%" height="15" fill="rgb(225,139,18)" fg:x="1519024708" fg:w="2569615"/><text x="17.7936%" y="431.50"></text></g><g><title>&lt;regex_automata::util::sparse_set::SparseSetIter as core::iter::traits::iterator::Iterator&gt;::next (9,540,352 samples, 0.11%)</title><rect x="17.4934%" y="453" width="0.1102%" height="15" fill="rgb(230,137,11)" fg:x="1514685466" fg:w="9540352"/><text x="17.7434%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,631,495 samples, 0.03%)</title><rect x="17.5732%" y="437" width="0.0304%" height="15" fill="rgb(212,28,1)" fg:x="1521594323" fg:w="2631495"/><text x="17.8232%" y="447.50"></text></g><g><title>&lt;regex_automata::util::sparse_set::SparseSetIter as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2,631,495 samples, 0.03%)</title><rect x="17.5732%" y="421" width="0.0304%" height="15" fill="rgb(248,164,17)" fg:x="1521594323" fg:w="2631495"/><text x="17.8232%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::states (11,431,689 samples, 0.13%)</title><rect x="17.6066%" y="437" width="0.1320%" height="15" fill="rgb(222,171,42)" fg:x="1524485013" fg:w="11431689"/><text x="17.8566%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11,431,689 samples, 0.13%)</title><rect x="17.6066%" y="421" width="0.1320%" height="15" fill="rgb(243,84,45)" fg:x="1524485013" fg:w="11431689"/><text x="17.8566%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (11,431,689 samples, 0.13%)</title><rect x="17.6066%" y="405" width="0.1320%" height="15" fill="rgb(252,49,23)" fg:x="1524485013" fg:w="11431689"/><text x="17.8566%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (77,582,321 samples, 0.90%)</title><rect x="17.6066%" y="453" width="0.8960%" height="15" fill="rgb(215,19,7)" fg:x="1524485013" fg:w="77582321"/><text x="17.8566%" y="463.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for [T]&gt;::index (66,150,632 samples, 0.76%)</title><rect x="17.7386%" y="437" width="0.7640%" height="15" fill="rgb(238,81,41)" fg:x="1535916702" fg:w="66150632"/><text x="17.9886%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2,667,244 samples, 0.03%)</title><rect x="23.0489%" y="373" width="0.0308%" height="15" fill="rgb(210,199,37)" fg:x="1995711711" fg:w="2667244"/><text x="23.2989%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,667,244 samples, 0.03%)</title><rect x="23.0489%" y="357" width="0.0308%" height="15" fill="rgb(244,192,49)" fg:x="1995711711" fg:w="2667244"/><text x="23.2989%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2,667,244 samples, 0.03%)</title><rect x="23.0489%" y="341" width="0.0308%" height="15" fill="rgb(226,211,11)" fg:x="1995711711" fg:w="2667244"/><text x="23.2989%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2,667,244 samples, 0.03%)</title><rect x="23.0489%" y="325" width="0.0308%" height="15" fill="rgb(236,162,54)" fg:x="1995711711" fg:w="2667244"/><text x="23.2989%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderNFA::add_nfa_state_id (399,124,903 samples, 4.61%)</title><rect x="18.5026%" y="453" width="4.6096%" height="15" fill="rgb(220,229,9)" fg:x="1602067334" fg:w="399124903"/><text x="18.7526%" y="463.50">regex..</text></g><g><title>regex_automata::util::determinize::state::ReprVec::add_nfa_state_id (399,124,903 samples, 4.61%)</title><rect x="18.5026%" y="437" width="4.6096%" height="15" fill="rgb(250,87,22)" fg:x="1602067334" fg:w="399124903"/><text x="18.7526%" y="447.50">regex..</text></g><g><title>regex_automata::util::determinize::state::write_vari32 (198,169,028 samples, 2.29%)</title><rect x="20.8235%" y="421" width="2.2887%" height="15" fill="rgb(239,43,17)" fg:x="1803023209" fg:w="198169028"/><text x="21.0735%" y="431.50">r..</text></g><g><title>regex_automata::util::determinize::state::write_varu32 (175,807,193 samples, 2.03%)</title><rect x="21.0818%" y="405" width="2.0304%" height="15" fill="rgb(231,177,25)" fg:x="1825385044" fg:w="175807193"/><text x="21.3318%" y="415.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (109,929,028 samples, 1.27%)</title><rect x="21.8426%" y="389" width="1.2696%" height="15" fill="rgb(219,179,1)" fg:x="1891263209" fg:w="109929028"/><text x="22.0926%" y="399.50"></text></g><g><title>core::ptr::write (2,813,282 samples, 0.03%)</title><rect x="23.0797%" y="373" width="0.0325%" height="15" fill="rgb(238,219,53)" fg:x="1998378955" fg:w="2813282"/><text x="23.3297%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14,474,582 samples, 0.17%)</title><rect x="23.1122%" y="421" width="0.1672%" height="15" fill="rgb(232,167,36)" fg:x="2001192237" fg:w="14474582"/><text x="23.3622%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14,474,582 samples, 0.17%)</title><rect x="23.1122%" y="405" width="0.1672%" height="15" fill="rgb(244,19,51)" fg:x="2001192237" fg:w="14474582"/><text x="23.3622%" y="415.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderNFA::look_need (15,779,888 samples, 0.18%)</title><rect x="23.1122%" y="453" width="0.1822%" height="15" fill="rgb(224,6,22)" fg:x="2001192237" fg:w="15779888"/><text x="23.3622%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::look_need (15,779,888 samples, 0.18%)</title><rect x="23.1122%" y="437" width="0.1822%" height="15" fill="rgb(224,145,5)" fg:x="2001192237" fg:w="15779888"/><text x="23.3622%" y="447.50"></text></g><g><title>regex_automata::util::look::LookSet::read_repr (1,305,306 samples, 0.02%)</title><rect x="23.2794%" y="421" width="0.0151%" height="15" fill="rgb(234,130,49)" fg:x="2015666819" fg:w="1305306"/><text x="23.5294%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,305,306 samples, 0.02%)</title><rect x="23.2794%" y="405" width="0.0151%" height="15" fill="rgb(254,6,2)" fg:x="2015666819" fg:w="1305306"/><text x="23.5294%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,305,306 samples, 0.02%)</title><rect x="23.2794%" y="389" width="0.0151%" height="15" fill="rgb(208,96,46)" fg:x="2015666819" fg:w="1305306"/><text x="23.5294%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,305,306 samples, 0.02%)</title><rect x="23.2794%" y="373" width="0.0151%" height="15" fill="rgb(239,3,39)" fg:x="2015666819" fg:w="1305306"/><text x="23.5294%" y="383.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderNFA::set_look_have (3,426,839 samples, 0.04%)</title><rect x="23.2945%" y="453" width="0.0396%" height="15" fill="rgb(233,210,1)" fg:x="2016972125" fg:w="3426839"/><text x="23.5445%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::ReprVec::set_look_have (3,426,839 samples, 0.04%)</title><rect x="23.2945%" y="437" width="0.0396%" height="15" fill="rgb(244,137,37)" fg:x="2016972125" fg:w="3426839"/><text x="23.5445%" y="447.50"></text></g><g><title>regex_automata::util::look::LookSet::write_repr (3,426,839 samples, 0.04%)</title><rect x="23.2945%" y="421" width="0.0396%" height="15" fill="rgb(240,136,2)" fg:x="2016972125" fg:w="3426839"/><text x="23.5445%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (933,456 samples, 0.01%)</title><rect x="23.3340%" y="437" width="0.0108%" height="15" fill="rgb(239,18,37)" fg:x="2020398964" fg:w="933456"/><text x="23.5840%" y="447.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1,066,077,609 samples, 12.31%)</title><rect x="11.0539%" y="469" width="12.3124%" height="15" fill="rgb(218,185,22)" fg:x="957108659" fg:w="1066077609"/><text x="11.3039%" y="479.50">regex_automata::ut..</text></g><g><title>regex_automata::util::sparse_set::SparseSet::iter (2,787,304 samples, 0.03%)</title><rect x="23.3340%" y="453" width="0.0322%" height="15" fill="rgb(225,218,4)" fg:x="2020398964" fg:w="2787304"/><text x="23.5840%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::len (1,853,848 samples, 0.02%)</title><rect x="23.3448%" y="437" width="0.0214%" height="15" fill="rgb(230,182,32)" fg:x="2021332420" fg:w="1853848"/><text x="23.5948%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (15,231,849 samples, 0.18%)</title><rect x="24.1064%" y="453" width="0.1759%" height="15" fill="rgb(242,56,43)" fg:x="2087270370" fg:w="15231849"/><text x="24.3564%" y="463.50"></text></g><g><title>core::ptr::read (8,008,457 samples, 0.09%)</title><rect x="24.1898%" y="437" width="0.0925%" height="15" fill="rgb(233,99,24)" fg:x="2094493762" fg:w="8008457"/><text x="24.4398%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15,461,895 samples, 0.18%)</title><rect x="24.2823%" y="453" width="0.1786%" height="15" fill="rgb(234,209,42)" fg:x="2102502219" fg:w="15461895"/><text x="24.5323%" y="463.50"></text></g><g><title>core::ptr::write (12,449,521 samples, 0.14%)</title><rect x="24.3171%" y="437" width="0.1438%" height="15" fill="rgb(227,7,12)" fg:x="2105514593" fg:w="12449521"/><text x="24.5671%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,797,280 samples, 0.02%)</title><rect x="24.4608%" y="421" width="0.0208%" height="15" fill="rgb(245,203,43)" fg:x="2117964114" fg:w="1797280"/><text x="24.7108%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1,797,280 samples, 0.02%)</title><rect x="24.4608%" y="405" width="0.0208%" height="15" fill="rgb(238,205,33)" fg:x="2117964114" fg:w="1797280"/><text x="24.7108%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1,797,280 samples, 0.02%)</title><rect x="24.4608%" y="389" width="0.0208%" height="15" fill="rgb(231,56,7)" fg:x="2117964114" fg:w="1797280"/><text x="24.7108%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::states (39,468,597 samples, 0.46%)</title><rect x="24.4608%" y="437" width="0.4558%" height="15" fill="rgb(244,186,29)" fg:x="2117964114" fg:w="39468597"/><text x="24.7108%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (37,671,317 samples, 0.44%)</title><rect x="24.4816%" y="421" width="0.4351%" height="15" fill="rgb(234,111,31)" fg:x="2119761394" fg:w="37671317"/><text x="24.7316%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (37,671,317 samples, 0.44%)</title><rect x="24.4816%" y="405" width="0.4351%" height="15" fill="rgb(241,149,10)" fg:x="2119761394" fg:w="37671317"/><text x="24.7316%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (64,393,784 samples, 0.74%)</title><rect x="24.4608%" y="453" width="0.7437%" height="15" fill="rgb(249,206,44)" fg:x="2117964114" fg:w="64393784"/><text x="24.7108%" y="463.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for [T]&gt;::index (24,925,187 samples, 0.29%)</title><rect x="24.9167%" y="437" width="0.2879%" height="15" fill="rgb(251,153,30)" fg:x="2157432711" fg:w="24925187"/><text x="25.1667%" y="447.50"></text></g><g><title>regex_automata::util::primitives::StateID::as_usize (18,039,917 samples, 0.21%)</title><rect x="24.9962%" y="421" width="0.2083%" height="15" fill="rgb(239,152,38)" fg:x="2164317981" fg:w="18039917"/><text x="25.2462%" y="431.50"></text></g><g><title>regex_automata::util::primitives::SmallIndex::as_usize (18,039,917 samples, 0.21%)</title><rect x="24.9962%" y="405" width="0.2083%" height="15" fill="rgb(249,139,47)" fg:x="2164317981" fg:w="18039917"/><text x="25.2462%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::State::is_epsilon (333,361,461 samples, 3.85%)</title><rect x="25.2045%" y="453" width="3.8501%" height="15" fill="rgb(244,64,35)" fg:x="2182357898" fg:w="333361461"/><text x="25.4545%" y="463.50">rege..</text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::IndexMut&lt;regex_automata::util::primitives::StateID&gt; for alloc::vec::Vec&lt;T&gt;&gt;::index_mut (2,529,215 samples, 0.03%)</title><rect x="29.5193%" y="437" width="0.0292%" height="15" fill="rgb(216,46,15)" fg:x="2555952709" fg:w="2529215"/><text x="29.7693%" y="447.50"></text></g><g><title>regex_automata::util::primitives::StateID::as_usize (2,405,899 samples, 0.03%)</title><rect x="29.5207%" y="421" width="0.0278%" height="15" fill="rgb(250,74,19)" fg:x="2556076025" fg:w="2405899"/><text x="29.7707%" y="431.50"></text></g><g><title>regex_automata::util::primitives::SmallIndex::as_usize (2,405,899 samples, 0.03%)</title><rect x="29.5207%" y="405" width="0.0278%" height="15" fill="rgb(249,42,33)" fg:x="2556076025" fg:w="2405899"/><text x="29.7707%" y="415.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for alloc::vec::Vec&lt;T&gt;&gt;::index (5,738,163 samples, 0.07%)</title><rect x="30.3083%" y="421" width="0.0663%" height="15" fill="rgb(242,149,17)" fg:x="2624271061" fg:w="5738163"/><text x="30.5583%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,738,163 samples, 0.07%)</title><rect x="30.3083%" y="405" width="0.0663%" height="15" fill="rgb(244,29,21)" fg:x="2624271061" fg:w="5738163"/><text x="30.5583%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,525,161 samples, 0.06%)</title><rect x="30.3108%" y="389" width="0.0638%" height="15" fill="rgb(220,130,37)" fg:x="2624484063" fg:w="5525161"/><text x="30.5608%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,525,161 samples, 0.06%)</title><rect x="30.3108%" y="373" width="0.0638%" height="15" fill="rgb(211,67,2)" fg:x="2624484063" fg:w="5525161"/><text x="30.5608%" y="383.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (694,259,811 samples, 8.02%)</title><rect x="23.3662%" y="469" width="8.0182%" height="15" fill="rgb(235,68,52)" fg:x="2023186268" fg:w="694259811"/><text x="23.6162%" y="479.50">regex_autom..</text></g><g><title>regex_automata::util::sparse_set::SparseSet::insert (201,726,720 samples, 2.33%)</title><rect x="29.0546%" y="453" width="2.3298%" height="15" fill="rgb(246,142,3)" fg:x="2515719359" fg:w="201726720"/><text x="29.3046%" y="463.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSet::contains (158,964,155 samples, 1.84%)</title><rect x="29.5485%" y="437" width="1.8359%" height="15" fill="rgb(241,25,7)" fg:x="2558481924" fg:w="158964155"/><text x="29.7985%" y="447.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSet::len (87,436,855 samples, 1.01%)</title><rect x="30.3746%" y="421" width="1.0098%" height="15" fill="rgb(242,119,39)" fg:x="2630009224" fg:w="87436855"/><text x="30.6246%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::look_set_any (3,072,898 samples, 0.04%)</title><rect x="32.8932%" y="453" width="0.0355%" height="15" fill="rgb(241,98,45)" fg:x="2848090996" fg:w="3072898"/><text x="33.1432%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Transition::matches_unit (13,053,121 samples, 0.15%)</title><rect x="32.9331%" y="453" width="0.1508%" height="15" fill="rgb(254,28,30)" fg:x="2851542641" fg:w="13053121"/><text x="33.1831%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (13,053,121 samples, 0.15%)</title><rect x="32.9331%" y="437" width="0.1508%" height="15" fill="rgb(241,142,54)" fg:x="2851542641" fg:w="13053121"/><text x="33.1831%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::iter_nfa_state_ids (23,048,191 samples, 0.27%)</title><rect x="33.0839%" y="437" width="0.2662%" height="15" fill="rgb(222,85,15)" fg:x="2864595762" fg:w="23048191"/><text x="33.3339%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::pattern_offset_end (23,002,582 samples, 0.27%)</title><rect x="33.0844%" y="421" width="0.2657%" height="15" fill="rgb(210,85,47)" fg:x="2864641371" fg:w="23002582"/><text x="33.3344%" y="431.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::encoded_pattern_len (23,002,582 samples, 0.27%)</title><rect x="33.0844%" y="405" width="0.2657%" height="15" fill="rgb(224,206,25)" fg:x="2864641371" fg:w="23002582"/><text x="33.3344%" y="415.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::has_pattern_ids (11,136,275 samples, 0.13%)</title><rect x="33.2214%" y="389" width="0.1286%" height="15" fill="rgb(243,201,19)" fg:x="2876507678" fg:w="11136275"/><text x="33.4714%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (23,607,790 samples, 0.27%)</title><rect x="33.0839%" y="453" width="0.2727%" height="15" fill="rgb(236,59,4)" fg:x="2864595762" fg:w="23607790"/><text x="33.3339%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::has_pattern_ids (1,069,721 samples, 0.01%)</title><rect x="33.5319%" y="421" width="0.0124%" height="15" fill="rgb(254,179,45)" fg:x="2903388178" fg:w="1069721"/><text x="33.7819%" y="431.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (17,876,450 samples, 0.21%)</title><rect x="33.3565%" y="453" width="0.2065%" height="15" fill="rgb(226,14,10)" fg:x="2888203552" fg:w="17876450"/><text x="33.6065%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::ReprVec::close_match_pattern_ids (9,836,911 samples, 0.11%)</title><rect x="33.4494%" y="437" width="0.1136%" height="15" fill="rgb(244,27,41)" fg:x="2896243091" fg:w="9836911"/><text x="33.6994%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::ReprVec::repr (1,622,103 samples, 0.02%)</title><rect x="33.5442%" y="421" width="0.0187%" height="15" fill="rgb(235,35,32)" fg:x="2904457899" fg:w="1622103"/><text x="33.7942%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1,622,103 samples, 0.02%)</title><rect x="33.5442%" y="405" width="0.0187%" height="15" fill="rgb(218,68,31)" fg:x="2904457899" fg:w="1622103"/><text x="33.7942%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,146,114 samples, 0.01%)</title><rect x="33.5497%" y="389" width="0.0132%" height="15" fill="rgb(207,120,37)" fg:x="2904933888" fg:w="1146114"/><text x="33.7997%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,146,114 samples, 0.01%)</title><rect x="33.5497%" y="373" width="0.0132%" height="15" fill="rgb(227,98,0)" fg:x="2904933888" fg:w="1146114"/><text x="33.7997%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,146,114 samples, 0.01%)</title><rect x="33.5497%" y="357" width="0.0132%" height="15" fill="rgb(207,7,3)" fg:x="2904933888" fg:w="1146114"/><text x="33.7997%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,146,114 samples, 0.01%)</title><rect x="33.5497%" y="341" width="0.0132%" height="15" fill="rgb(206,98,19)" fg:x="2904933888" fg:w="1146114"/><text x="33.7997%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (191,370,836 samples, 2.21%)</title><rect x="31.3844%" y="469" width="2.2102%" height="15" fill="rgb(217,5,26)" fg:x="2717446079" fg:w="191370836"/><text x="31.6344%" y="479.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSets::clear (2,360,383 samples, 0.03%)</title><rect x="33.5673%" y="453" width="0.0273%" height="15" fill="rgb(235,190,38)" fg:x="2906456532" fg:w="2360383"/><text x="33.8173%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::clear (2,360,383 samples, 0.03%)</title><rect x="33.5673%" y="437" width="0.0273%" height="15" fill="rgb(247,86,24)" fg:x="2906456532" fg:w="2360383"/><text x="33.8173%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (19,481,641 samples, 0.22%)</title><rect x="33.7484%" y="389" width="0.2250%" height="15" fill="rgb(205,101,16)" fg:x="2922135129" fg:w="19481641"/><text x="33.9984%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (19,481,641 samples, 0.22%)</title><rect x="33.7484%" y="373" width="0.2250%" height="15" fill="rgb(246,168,33)" fg:x="2922135129" fg:w="19481641"/><text x="33.9984%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (19,481,641 samples, 0.22%)</title><rect x="33.7484%" y="357" width="0.2250%" height="15" fill="rgb(231,114,1)" fg:x="2922135129" fg:w="19481641"/><text x="33.9984%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (19,481,641 samples, 0.22%)</title><rect x="33.7484%" y="341" width="0.2250%" height="15" fill="rgb(207,184,53)" fg:x="2922135129" fg:w="19481641"/><text x="33.9984%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (19,481,641 samples, 0.22%)</title><rect x="33.7484%" y="325" width="0.2250%" height="15" fill="rgb(224,95,51)" fg:x="2922135129" fg:w="19481641"/><text x="33.9984%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19,481,641 samples, 0.22%)</title><rect x="33.7484%" y="309" width="0.2250%" height="15" fill="rgb(212,188,45)" fg:x="2922135129" fg:w="19481641"/><text x="33.9984%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::_{{closure}} (19,439,417 samples, 0.22%)</title><rect x="33.7489%" y="293" width="0.2245%" height="15" fill="rgb(223,154,38)" fg:x="2922177353" fg:w="19439417"/><text x="33.9989%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (19,439,417 samples, 0.22%)</title><rect x="33.7489%" y="277" width="0.2245%" height="15" fill="rgb(251,22,52)" fg:x="2922177353" fg:w="19439417"/><text x="33.9989%" y="287.50"></text></g><g><title>core::ptr::write (19,439,417 samples, 0.22%)</title><rect x="33.7489%" y="261" width="0.2245%" height="15" fill="rgb(229,209,22)" fg:x="2922177353" fg:w="19439417"/><text x="33.9989%" y="271.50"></text></g><g><title>__memset_avx2_unaligned_erms (19,263,845 samples, 0.22%)</title><rect x="33.7509%" y="245" width="0.2225%" height="15" fill="rgb(234,138,34)" fg:x="2922352925" fg:w="19263845"/><text x="34.0009%" y="255.50"></text></g><g><title>[unknown] (17,970,809 samples, 0.21%)</title><rect x="33.7658%" y="229" width="0.2075%" height="15" fill="rgb(212,95,11)" fg:x="2923645961" fg:w="17970809"/><text x="34.0158%" y="239.50"></text></g><g><title>[unknown] (16,867,981 samples, 0.19%)</title><rect x="33.7786%" y="213" width="0.1948%" height="15" fill="rgb(240,179,47)" fg:x="2924748789" fg:w="16867981"/><text x="34.0286%" y="223.50"></text></g><g><title>[unknown] (16,313,281 samples, 0.19%)</title><rect x="33.7850%" y="197" width="0.1884%" height="15" fill="rgb(240,163,11)" fg:x="2925303489" fg:w="16313281"/><text x="34.0350%" y="207.50"></text></g><g><title>[unknown] (15,621,833 samples, 0.18%)</title><rect x="33.7930%" y="181" width="0.1804%" height="15" fill="rgb(236,37,12)" fg:x="2925994937" fg:w="15621833"/><text x="34.0430%" y="191.50"></text></g><g><title>[unknown] (14,402,177 samples, 0.17%)</title><rect x="33.8071%" y="165" width="0.1663%" height="15" fill="rgb(232,164,16)" fg:x="2927214593" fg:w="14402177"/><text x="34.0571%" y="175.50"></text></g><g><title>[unknown] (10,865,966 samples, 0.13%)</title><rect x="33.8479%" y="149" width="0.1255%" height="15" fill="rgb(244,205,15)" fg:x="2930750804" fg:w="10865966"/><text x="34.0979%" y="159.50"></text></g><g><title>[unknown] (9,624,882 samples, 0.11%)</title><rect x="33.8622%" y="133" width="0.1112%" height="15" fill="rgb(223,117,47)" fg:x="2931991888" fg:w="9624882"/><text x="34.1122%" y="143.50"></text></g><g><title>[unknown] (8,479,118 samples, 0.10%)</title><rect x="33.8755%" y="117" width="0.0979%" height="15" fill="rgb(244,107,35)" fg:x="2933137652" fg:w="8479118"/><text x="34.1255%" y="127.50"></text></g><g><title>[unknown] (7,883,706 samples, 0.09%)</title><rect x="33.8823%" y="101" width="0.0911%" height="15" fill="rgb(205,140,8)" fg:x="2933733064" fg:w="7883706"/><text x="34.1323%" y="111.50"></text></g><g><title>[unknown] (7,704,680 samples, 0.09%)</title><rect x="33.8844%" y="85" width="0.0890%" height="15" fill="rgb(228,84,46)" fg:x="2933912090" fg:w="7704680"/><text x="34.1344%" y="95.50"></text></g><g><title>[unknown] (6,707,884 samples, 0.08%)</title><rect x="33.8959%" y="69" width="0.0775%" height="15" fill="rgb(254,188,9)" fg:x="2934908886" fg:w="6707884"/><text x="34.1459%" y="79.50"></text></g><g><title>[unknown] (4,851,601 samples, 0.06%)</title><rect x="33.9174%" y="53" width="0.0560%" height="15" fill="rgb(206,112,54)" fg:x="2936765169" fg:w="4851601"/><text x="34.1674%" y="63.50"></text></g><g><title>[unknown] (4,277,060 samples, 0.05%)</title><rect x="33.9240%" y="37" width="0.0494%" height="15" fill="rgb(216,84,49)" fg:x="2937339710" fg:w="4277060"/><text x="34.1740%" y="47.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::add_empty_state (19,620,258 samples, 0.23%)</title><rect x="33.7484%" y="421" width="0.2266%" height="15" fill="rgb(214,194,35)" fg:x="2922135129" fg:w="19620258"/><text x="33.9984%" y="431.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;alloc::vec::Vec&lt;u32&gt;&gt;::add_empty_state (19,620,258 samples, 0.23%)</title><rect x="33.7484%" y="405" width="0.2266%" height="15" fill="rgb(249,28,3)" fg:x="2922135129" fg:w="19620258"/><text x="33.9984%" y="415.50"></text></g><g><title>[unknown] (1,978,314 samples, 0.02%)</title><rect x="34.0145%" y="229" width="0.0228%" height="15" fill="rgb(222,56,52)" fg:x="2945174452" fg:w="1978314"/><text x="34.2645%" y="239.50"></text></g><g><title>[unknown] (1,978,314 samples, 0.02%)</title><rect x="34.0145%" y="213" width="0.0228%" height="15" fill="rgb(245,217,50)" fg:x="2945174452" fg:w="1978314"/><text x="34.2645%" y="223.50"></text></g><g><title>[unknown] (1,855,000 samples, 0.02%)</title><rect x="34.0159%" y="197" width="0.0214%" height="15" fill="rgb(213,201,24)" fg:x="2945297766" fg:w="1855000"/><text x="34.2659%" y="207.50"></text></g><g><title>[unknown] (1,727,441 samples, 0.02%)</title><rect x="34.0174%" y="181" width="0.0200%" height="15" fill="rgb(248,116,28)" fg:x="2945425325" fg:w="1727441"/><text x="34.2674%" y="191.50"></text></g><g><title>[unknown] (1,566,872 samples, 0.02%)</title><rect x="34.0192%" y="165" width="0.0181%" height="15" fill="rgb(219,72,43)" fg:x="2945585894" fg:w="1566872"/><text x="34.2692%" y="175.50"></text></g><g><title>[unknown] (1,225,612 samples, 0.01%)</title><rect x="34.0232%" y="149" width="0.0142%" height="15" fill="rgb(209,138,14)" fg:x="2945927154" fg:w="1225612"/><text x="34.2732%" y="159.50"></text></g><g><title>[unknown] (1,053,601 samples, 0.01%)</title><rect x="34.0252%" y="133" width="0.0122%" height="15" fill="rgb(222,18,33)" fg:x="2946099165" fg:w="1053601"/><text x="34.2752%" y="143.50"></text></g><g><title>[unknown] (885,513 samples, 0.01%)</title><rect x="34.0271%" y="117" width="0.0102%" height="15" fill="rgb(213,199,7)" fg:x="2946267253" fg:w="885513"/><text x="34.2771%" y="127.50"></text></g><g><title>[unknown] (885,513 samples, 0.01%)</title><rect x="34.0271%" y="101" width="0.0102%" height="15" fill="rgb(250,110,10)" fg:x="2946267253" fg:w="885513"/><text x="34.2771%" y="111.50"></text></g><g><title>[unknown] (885,513 samples, 0.01%)</title><rect x="34.0271%" y="85" width="0.0102%" height="15" fill="rgb(248,123,6)" fg:x="2946267253" fg:w="885513"/><text x="34.2771%" y="95.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (5,348,320 samples, 0.06%)</title><rect x="33.9775%" y="341" width="0.0618%" height="15" fill="rgb(206,91,31)" fg:x="2941974358" fg:w="5348320"/><text x="34.2275%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice::_{{closure}} (5,304,271 samples, 0.06%)</title><rect x="33.9780%" y="325" width="0.0613%" height="15" fill="rgb(211,154,13)" fg:x="2942018407" fg:w="5304271"/><text x="34.2280%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,304,271 samples, 0.06%)</title><rect x="33.9780%" y="309" width="0.0613%" height="15" fill="rgb(225,148,7)" fg:x="2942018407" fg:w="5304271"/><text x="34.2280%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,304,271 samples, 0.06%)</title><rect x="33.9780%" y="293" width="0.0613%" height="15" fill="rgb(220,160,43)" fg:x="2942018407" fg:w="5304271"/><text x="34.2280%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5,304,271 samples, 0.06%)</title><rect x="33.9780%" y="277" width="0.0613%" height="15" fill="rgb(213,52,39)" fg:x="2942018407" fg:w="5304271"/><text x="34.2280%" y="287.50"></text></g><g><title>malloc (4,833,767 samples, 0.06%)</title><rect x="33.9835%" y="261" width="0.0558%" height="15" fill="rgb(243,137,7)" fg:x="2942488911" fg:w="4833767"/><text x="34.2335%" y="271.50"></text></g><g><title>_int_malloc (3,813,820 samples, 0.04%)</title><rect x="33.9952%" y="245" width="0.0440%" height="15" fill="rgb(230,79,13)" fg:x="2943508858" fg:w="3813820"/><text x="34.2452%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (5,429,492 samples, 0.06%)</title><rect x="33.9775%" y="357" width="0.0627%" height="15" fill="rgb(247,105,23)" fg:x="2941974358" fg:w="5429492"/><text x="34.2275%" y="367.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::add_state (26,605,232 samples, 0.31%)</title><rect x="33.7414%" y="437" width="0.3073%" height="15" fill="rgb(223,179,41)" fg:x="2921532251" fg:w="26605232"/><text x="33.9914%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderNFA::to_state (6,163,125 samples, 0.07%)</title><rect x="33.9775%" y="421" width="0.0712%" height="15" fill="rgb(218,9,34)" fg:x="2941974358" fg:w="6163125"/><text x="34.2275%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (6,163,125 samples, 0.07%)</title><rect x="33.9775%" y="405" width="0.0712%" height="15" fill="rgb(222,106,8)" fg:x="2941974358" fg:w="6163125"/><text x="34.2275%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (6,163,125 samples, 0.07%)</title><rect x="33.9775%" y="389" width="0.0712%" height="15" fill="rgb(211,220,0)" fg:x="2941974358" fg:w="6163125"/><text x="34.2275%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (6,163,125 samples, 0.07%)</title><rect x="33.9775%" y="373" width="0.0712%" height="15" fill="rgb(229,52,16)" fg:x="2941974358" fg:w="6163125"/><text x="34.2275%" y="383.50"></text></g><g><title>core::mem::replace (5,654,585 samples, 0.07%)</title><rect x="34.0487%" y="421" width="0.0653%" height="15" fill="rgb(212,155,18)" fg:x="2948137483" fg:w="5654585"/><text x="34.2987%" y="431.50"></text></g><g><title>core::ptr::write (5,366,492 samples, 0.06%)</title><rect x="34.0520%" y="405" width="0.0620%" height="15" fill="rgb(242,21,14)" fg:x="2948425576" fg:w="5366492"/><text x="34.3020%" y="415.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::put_state_builder (6,596,047 samples, 0.08%)</title><rect x="34.0487%" y="437" width="0.0762%" height="15" fill="rgb(222,19,48)" fg:x="2948137483" fg:w="6596047"/><text x="34.2987%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::determinize::state::StateBuilderEmpty&gt; (941,462 samples, 0.01%)</title><rect x="34.1140%" y="421" width="0.0109%" height="15" fill="rgb(232,45,27)" fg:x="2953792068" fg:w="941462"/><text x="34.3640%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (941,462 samples, 0.01%)</title><rect x="34.1140%" y="405" width="0.0109%" height="15" fill="rgb(249,103,42)" fg:x="2953792068" fg:w="941462"/><text x="34.3640%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (941,462 samples, 0.01%)</title><rect x="34.1140%" y="389" width="0.0109%" height="15" fill="rgb(246,81,33)" fg:x="2953792068" fg:w="941462"/><text x="34.3640%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (941,462 samples, 0.01%)</title><rect x="34.1140%" y="373" width="0.0109%" height="15" fill="rgb(252,33,42)" fg:x="2953792068" fg:w="941462"/><text x="34.3640%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (941,462 samples, 0.01%)</title><rect x="34.1140%" y="357" width="0.0109%" height="15" fill="rgb(209,212,41)" fg:x="2953792068" fg:w="941462"/><text x="34.3640%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (941,462 samples, 0.01%)</title><rect x="34.1140%" y="341" width="0.0109%" height="15" fill="rgb(207,154,6)" fg:x="2953792068" fg:w="941462"/><text x="34.3640%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderNFA::as_bytes (17,737,169 samples, 0.20%)</title><rect x="34.1249%" y="437" width="0.2049%" height="15" fill="rgb(223,64,47)" fg:x="2954733530" fg:w="17737169"/><text x="34.3749%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17,737,169 samples, 0.20%)</title><rect x="34.1249%" y="421" width="0.2049%" height="15" fill="rgb(211,161,38)" fg:x="2954733530" fg:w="17737169"/><text x="34.3749%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (17,737,169 samples, 0.20%)</title><rect x="34.1249%" y="405" width="0.2049%" height="15" fill="rgb(219,138,40)" fg:x="2954733530" fg:w="17737169"/><text x="34.3749%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (1,787,299 samples, 0.02%)</title><rect x="34.3411%" y="389" width="0.0206%" height="15" fill="rgb(241,228,46)" fg:x="2973459101" fg:w="1787299"/><text x="34.5911%" y="399.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (18,155,475 samples, 0.21%)</title><rect x="34.4821%" y="341" width="0.2097%" height="15" fill="rgb(223,209,38)" fg:x="2985659885" fg:w="18155475"/><text x="34.7321%" y="351.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (18,155,475 samples, 0.21%)</title><rect x="34.4821%" y="325" width="0.2097%" height="15" fill="rgb(236,164,45)" fg:x="2985659885" fg:w="18155475"/><text x="34.7321%" y="335.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (1,092,205 samples, 0.01%)</title><rect x="34.6791%" y="309" width="0.0126%" height="15" fill="rgb(231,15,5)" fg:x="3002723155" fg:w="1092205"/><text x="34.9291%" y="319.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1,092,205 samples, 0.01%)</title><rect x="34.6791%" y="293" width="0.0126%" height="15" fill="rgb(252,35,15)" fg:x="3002723155" fg:w="1092205"/><text x="34.9291%" y="303.50"></text></g><g><title>core::intrinsics::likely (1,186,779 samples, 0.01%)</title><rect x="34.6917%" y="341" width="0.0137%" height="15" fill="rgb(248,181,18)" fg:x="3003815360" fg:w="1186779"/><text x="34.9417%" y="351.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1,516,826 samples, 0.02%)</title><rect x="34.7054%" y="341" width="0.0175%" height="15" fill="rgb(233,39,42)" fg:x="3005002139" fg:w="1516826"/><text x="34.9554%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,516,826 samples, 0.02%)</title><rect x="34.7054%" y="325" width="0.0175%" height="15" fill="rgb(238,110,33)" fg:x="3005002139" fg:w="1516826"/><text x="34.9554%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,516,826 samples, 0.02%)</title><rect x="34.7054%" y="309" width="0.0175%" height="15" fill="rgb(233,195,10)" fg:x="3005002139" fg:w="1516826"/><text x="34.9554%" y="319.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (32,407,125 samples, 0.37%)</title><rect x="34.7245%" y="341" width="0.3743%" height="15" fill="rgb(254,105,3)" fg:x="3006653331" fg:w="32407125"/><text x="34.9745%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (32,407,125 samples, 0.37%)</title><rect x="34.7245%" y="325" width="0.3743%" height="15" fill="rgb(221,225,9)" fg:x="3006653331" fg:w="32407125"/><text x="34.9745%" y="335.50"></text></g><g><title>hashbrown::control::tag::Tag::full (5,470,466 samples, 0.06%)</title><rect x="35.0988%" y="341" width="0.0632%" height="15" fill="rgb(224,227,45)" fg:x="3039060456" fg:w="5470466"/><text x="35.3488%" y="351.50"></text></g><g><title>&lt;regex_automata::util::determinize::state::State as core::borrow::Borrow&lt;[u8]&gt;&gt;::borrow (8,294,431 samples, 0.10%)</title><rect x="35.1677%" y="293" width="0.0958%" height="15" fill="rgb(229,198,43)" fg:x="3045029385" fg:w="8294431"/><text x="35.4177%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8,294,431 samples, 0.10%)</title><rect x="35.1677%" y="277" width="0.0958%" height="15" fill="rgb(206,209,35)" fg:x="3045029385" fg:w="8294431"/><text x="35.4177%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (201,133,982 samples, 2.32%)</title><rect x="35.1677%" y="325" width="2.3229%" height="15" fill="rgb(245,195,53)" fg:x="3045029385" fg:w="201133982"/><text x="35.4177%" y="335.50">h..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (201,133,982 samples, 2.32%)</title><rect x="35.1677%" y="309" width="2.3229%" height="15" fill="rgb(240,92,26)" fg:x="3045029385" fg:w="201133982"/><text x="35.4177%" y="319.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (192,839,551 samples, 2.23%)</title><rect x="35.2635%" y="293" width="2.2271%" height="15" fill="rgb(207,40,23)" fg:x="3053323816" fg:w="192839551"/><text x="35.5135%" y="303.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (192,839,551 samples, 2.23%)</title><rect x="35.2635%" y="277" width="2.2271%" height="15" fill="rgb(223,111,35)" fg:x="3053323816" fg:w="192839551"/><text x="35.5135%" y="287.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (192,839,551 samples, 2.23%)</title><rect x="35.2635%" y="261" width="2.2271%" height="15" fill="rgb(229,147,28)" fg:x="3053323816" fg:w="192839551"/><text x="35.5135%" y="271.50">&lt;..</text></g><g><title>__memcmp_avx2_movbe (120,565,010 samples, 1.39%)</title><rect x="36.0982%" y="245" width="1.3924%" height="15" fill="rgb(211,29,28)" fg:x="3125598357" fg:w="120565010"/><text x="36.3482%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (18,109,860 samples, 0.21%)</title><rect x="37.4907%" y="325" width="0.2092%" height="15" fill="rgb(228,72,33)" fg:x="3246163367" fg:w="18109860"/><text x="37.7407%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (18,109,860 samples, 0.21%)</title><rect x="37.4907%" y="309" width="0.2092%" height="15" fill="rgb(205,214,31)" fg:x="3246163367" fg:w="18109860"/><text x="37.7407%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (18,109,860 samples, 0.21%)</title><rect x="37.4907%" y="293" width="0.2092%" height="15" fill="rgb(224,111,15)" fg:x="3246163367" fg:w="18109860"/><text x="37.7407%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (222,301,046 samples, 2.57%)</title><rect x="35.1673%" y="341" width="2.5674%" height="15" fill="rgb(253,21,26)" fg:x="3044990927" fg:w="222301046"/><text x="35.4173%" y="351.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3,018,746 samples, 0.03%)</title><rect x="37.6998%" y="325" width="0.0349%" height="15" fill="rgb(245,139,43)" fg:x="3264273227" fg:w="3018746"/><text x="37.9498%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3,018,746 samples, 0.03%)</title><rect x="37.6998%" y="309" width="0.0349%" height="15" fill="rgb(252,170,7)" fg:x="3264273227" fg:w="3018746"/><text x="37.9498%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,018,746 samples, 0.03%)</title><rect x="37.6998%" y="293" width="0.0349%" height="15" fill="rgb(231,118,14)" fg:x="3264273227" fg:w="3018746"/><text x="37.9498%" y="303.50"></text></g><g><title>sysmalloc (407,467,075 samples, 4.71%)</title><rect x="33.5981%" y="469" width="4.7059%" height="15" fill="rgb(238,83,0)" fg:x="2909120336" fg:w="407467075"/><text x="33.8481%" y="479.50">sysma..</text></g><g><title>regex_automata::dfa::determinize::Runner::maybe_add_state (407,467,075 samples, 4.71%)</title><rect x="33.5981%" y="453" width="4.7059%" height="15" fill="rgb(221,39,39)" fg:x="2909120336" fg:w="407467075"/><text x="33.8481%" y="463.50">regex..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (344,116,712 samples, 3.97%)</title><rect x="34.3297%" y="437" width="3.9743%" height="15" fill="rgb(222,119,46)" fg:x="2972470699" fg:w="344116712"/><text x="34.5797%" y="447.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (344,116,712 samples, 3.97%)</title><rect x="34.3297%" y="421" width="3.9743%" height="15" fill="rgb(222,165,49)" fg:x="2972470699" fg:w="344116712"/><text x="34.5797%" y="431.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (344,116,712 samples, 3.97%)</title><rect x="34.3297%" y="405" width="3.9743%" height="15" fill="rgb(219,113,52)" fg:x="2972470699" fg:w="344116712"/><text x="34.5797%" y="415.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (341,341,011 samples, 3.94%)</title><rect x="34.3618%" y="389" width="3.9422%" height="15" fill="rgb(214,7,15)" fg:x="2975246400" fg:w="341341011"/><text x="34.6118%" y="399.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (341,341,011 samples, 3.94%)</title><rect x="34.3618%" y="373" width="3.9422%" height="15" fill="rgb(235,32,4)" fg:x="2975246400" fg:w="341341011"/><text x="34.6118%" y="383.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (341,341,011 samples, 3.94%)</title><rect x="34.3618%" y="357" width="3.9422%" height="15" fill="rgb(238,90,54)" fg:x="2975246400" fg:w="341341011"/><text x="34.6118%" y="367.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (49,295,438 samples, 0.57%)</title><rect x="37.7347%" y="341" width="0.5693%" height="15" fill="rgb(213,208,19)" fg:x="3267291973" fg:w="49295438"/><text x="37.9847%" y="351.50"></text></g><g><title>[unknown] (3,131,813,149 samples, 36.17%)</title><rect x="2.1345%" y="485" width="36.1700%" height="15" fill="rgb(233,156,4)" fg:x="184815673" fg:w="3131813149"/><text x="2.3845%" y="495.50">[unknown]</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,384,191 samples, 0.02%)</title><rect x="38.3045%" y="469" width="0.0160%" height="15" fill="rgb(207,194,5)" fg:x="3316628822" fg:w="1384191"/><text x="38.5545%" y="479.50"></text></g><g><title>core::ptr::write (1,384,191 samples, 0.02%)</title><rect x="38.3045%" y="453" width="0.0160%" height="15" fill="rgb(206,111,30)" fg:x="3316628822" fg:w="1384191"/><text x="38.5545%" y="463.50"></text></g><g><title>[unknown] (976,342 samples, 0.01%)</title><rect x="38.3092%" y="437" width="0.0113%" height="15" fill="rgb(243,70,54)" fg:x="3317036671" fg:w="976342"/><text x="38.5592%" y="447.50"></text></g><g><title>_ZN14regex_automata3nfa8thompson7builder7Builder3add17h5f8a3afbdf12bb95E.llvm.13144069707583177578 (1,624,774 samples, 0.02%)</title><rect x="38.3045%" y="485" width="0.0188%" height="15" fill="rgb(242,28,8)" fg:x="3316628822" fg:w="1624774"/><text x="38.5545%" y="495.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1,570,315 samples, 0.02%)</title><rect x="38.3375%" y="341" width="0.0181%" height="15" fill="rgb(219,106,18)" fg:x="3319488108" fg:w="1570315"/><text x="38.5875%" y="351.50"></text></g><g><title>malloc_consolidate (1,570,315 samples, 0.02%)</title><rect x="38.3375%" y="325" width="0.0181%" height="15" fill="rgb(244,222,10)" fg:x="3319488108" fg:w="1570315"/><text x="38.5875%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,638,546 samples, 0.03%)</title><rect x="38.3260%" y="357" width="0.0305%" height="15" fill="rgb(236,179,52)" fg:x="3318495261" fg:w="2638546"/><text x="38.5760%" y="367.50"></text></g><g><title>_ZN4core3ptr70drop_in_place$LT$regex_automata..nfa..thompson..compiler..Compiler$GT$17hb3de70a318ed7812E.llvm.10040012917688466507 (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="485" width="0.0328%" height="15" fill="rgb(213,23,39)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="469" width="0.0328%" height="15" fill="rgb(238,48,10)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="453" width="0.0328%" height="15" fill="rgb(251,196,23)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::Builder&gt; (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="437" width="0.0328%" height="15" fill="rgb(250,152,24)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::builder::State&gt;&gt; (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="421" width="0.0328%" height="15" fill="rgb(209,150,17)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="405" width="0.0328%" height="15" fill="rgb(234,202,34)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::builder::State]&gt; (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="389" width="0.0328%" height="15" fill="rgb(253,148,53)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::State&gt; (2,843,661 samples, 0.03%)</title><rect x="38.3241%" y="373" width="0.0328%" height="15" fill="rgb(218,129,16)" fg:x="3318323985" fg:w="2843661"/><text x="38.5741%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (74,815,238 samples, 0.86%)</title><rect x="40.1068%" y="453" width="0.8641%" height="15" fill="rgb(216,85,19)" fg:x="3472683766" fg:w="74815238"/><text x="40.3568%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (151,578,426 samples, 1.75%)</title><rect x="39.5531%" y="469" width="1.7506%" height="15" fill="rgb(235,228,7)" fg:x="3424740848" fg:w="151578426"/><text x="39.8031%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (28,820,270 samples, 0.33%)</title><rect x="40.9709%" y="453" width="0.3329%" height="15" fill="rgb(245,175,0)" fg:x="3547499004" fg:w="28820270"/><text x="41.2209%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,331,890 samples, 0.02%)</title><rect x="41.5155%" y="453" width="0.0154%" height="15" fill="rgb(208,168,36)" fg:x="3594654670" fg:w="1331890"/><text x="41.7655%" y="463.50"></text></g><g><title>core::hash::sip::u8to64_le (19,946,182 samples, 0.23%)</title><rect x="41.3071%" y="469" width="0.2304%" height="15" fill="rgb(246,171,24)" fg:x="3576614137" fg:w="19946182"/><text x="41.5571%" y="479.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb76bce5d274bf2f8E.llvm.13318194621340869329 (277,341,797 samples, 3.20%)</title><rect x="38.3667%" y="485" width="3.2031%" height="15" fill="rgb(215,142,24)" fg:x="3322018191" fg:w="277341797"/><text x="38.6167%" y="495.50">_ZN..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,799,669 samples, 0.03%)</title><rect x="41.5375%" y="469" width="0.0323%" height="15" fill="rgb(250,187,7)" fg:x="3596560319" fg:w="2799669"/><text x="41.7875%" y="479.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::Debug for usize&gt;::fmt (2,656,601 samples, 0.03%)</title><rect x="41.6222%" y="485" width="0.0307%" height="15" fill="rgb(228,66,33)" fg:x="3603895298" fg:w="2656601"/><text x="41.8722%" y="495.50"></text></g><g><title>core::fmt::Formatter::debug_lower_hex (1,394,051 samples, 0.02%)</title><rect x="41.6368%" y="469" width="0.0161%" height="15" fill="rgb(234,215,21)" fg:x="3605157848" fg:w="1394051"/><text x="41.8868%" y="479.50"></text></g><g><title>core::fmt::write (11,500,058 samples, 0.13%)</title><rect x="41.6529%" y="485" width="0.1328%" height="15" fill="rgb(222,191,20)" fg:x="3606551899" fg:w="11500058"/><text x="41.9029%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (6,100,727 samples, 0.07%)</title><rect x="41.7152%" y="469" width="0.0705%" height="15" fill="rgb(245,79,54)" fg:x="3611951230" fg:w="6100727"/><text x="41.9652%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10,919,279 samples, 0.13%)</title><rect x="41.7857%" y="485" width="0.1261%" height="15" fill="rgb(240,10,37)" fg:x="3618051957" fg:w="10919279"/><text x="42.0357%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,349,590 samples, 0.02%)</title><rect x="41.9319%" y="437" width="0.0156%" height="15" fill="rgb(214,192,32)" fg:x="3630713077" fg:w="1349590"/><text x="42.1819%" y="447.50"></text></g><g><title>[unknown] (1,279,629 samples, 0.01%)</title><rect x="41.9327%" y="421" width="0.0148%" height="15" fill="rgb(209,36,54)" fg:x="3630783038" fg:w="1279629"/><text x="42.1827%" y="431.50"></text></g><g><title>[unknown] (1,279,629 samples, 0.01%)</title><rect x="41.9327%" y="405" width="0.0148%" height="15" fill="rgb(220,10,11)" fg:x="3630783038" fg:w="1279629"/><text x="42.1827%" y="415.50"></text></g><g><title>[unknown] (1,213,909 samples, 0.01%)</title><rect x="41.9335%" y="389" width="0.0140%" height="15" fill="rgb(221,106,17)" fg:x="3630848758" fg:w="1213909"/><text x="42.1835%" y="399.50"></text></g><g><title>[unknown] (1,074,511 samples, 0.01%)</title><rect x="41.9351%" y="373" width="0.0124%" height="15" fill="rgb(251,142,44)" fg:x="3630988156" fg:w="1074511"/><text x="42.1851%" y="383.50"></text></g><g><title>[unknown] (1,038,296 samples, 0.01%)</title><rect x="41.9355%" y="357" width="0.0120%" height="15" fill="rgb(238,13,15)" fg:x="3631024371" fg:w="1038296"/><text x="42.1855%" y="367.50"></text></g><g><title>[unknown] (893,768 samples, 0.01%)</title><rect x="41.9372%" y="341" width="0.0103%" height="15" fill="rgb(208,107,27)" fg:x="3631168899" fg:w="893768"/><text x="42.1872%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1,625,628 samples, 0.02%)</title><rect x="41.9532%" y="405" width="0.0188%" height="15" fill="rgb(205,136,37)" fg:x="3632556929" fg:w="1625628"/><text x="42.2032%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2,229,911 samples, 0.03%)</title><rect x="41.9516%" y="437" width="0.0258%" height="15" fill="rgb(250,205,27)" fg:x="3632419765" fg:w="2229911"/><text x="42.2016%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (2,229,911 samples, 0.03%)</title><rect x="41.9516%" y="421" width="0.0258%" height="15" fill="rgb(210,80,43)" fg:x="3632419765" fg:w="2229911"/><text x="42.2016%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4,252,865 samples, 0.05%)</title><rect x="41.9288%" y="485" width="0.0491%" height="15" fill="rgb(247,160,36)" fg:x="3630440601" fg:w="4252865"/><text x="42.1788%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4,252,865 samples, 0.05%)</title><rect x="41.9288%" y="469" width="0.0491%" height="15" fill="rgb(234,13,49)" fg:x="3630440601" fg:w="4252865"/><text x="42.1788%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4,252,865 samples, 0.05%)</title><rect x="41.9288%" y="453" width="0.0491%" height="15" fill="rgb(234,122,0)" fg:x="3630440601" fg:w="4252865"/><text x="42.1788%" y="463.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;T&gt;::stride (1,250,930 samples, 0.01%)</title><rect x="42.1117%" y="437" width="0.0144%" height="15" fill="rgb(207,146,38)" fg:x="3646280166" fg:w="1250930"/><text x="42.3617%" y="447.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;T&gt;::table (3,996,427 samples, 0.05%)</title><rect x="42.1262%" y="437" width="0.0462%" height="15" fill="rgb(207,177,25)" fg:x="3647531096" fg:w="3996427"/><text x="42.3762%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (3,996,427 samples, 0.05%)</title><rect x="42.1262%" y="421" width="0.0462%" height="15" fill="rgb(211,178,42)" fg:x="3647531096" fg:w="3996427"/><text x="42.3762%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,996,427 samples, 0.05%)</title><rect x="42.1262%" y="405" width="0.0462%" height="15" fill="rgb(230,69,54)" fg:x="3647531096" fg:w="3996427"/><text x="42.3762%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,996,427 samples, 0.05%)</title><rect x="42.1262%" y="389" width="0.0462%" height="15" fill="rgb(214,135,41)" fg:x="3647531096" fg:w="3996427"/><text x="42.3762%" y="399.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;T&gt;::is_valid (12,619,403 samples, 0.15%)</title><rect x="42.0305%" y="453" width="0.1457%" height="15" fill="rgb(237,67,25)" fg:x="3639251092" fg:w="12619403"/><text x="42.2805%" y="463.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;alloc::vec::Vec&lt;u32&gt;&gt;::set_transition (20,731,802 samples, 0.24%)</title><rect x="41.9818%" y="485" width="0.2394%" height="15" fill="rgb(222,189,50)" fg:x="3635034118" fg:w="20731802"/><text x="42.2318%" y="495.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;alloc::vec::Vec&lt;u32&gt;&gt;::set (19,653,811 samples, 0.23%)</title><rect x="41.9943%" y="469" width="0.2270%" height="15" fill="rgb(245,148,34)" fg:x="3636112109" fg:w="19653811"/><text x="42.2443%" y="479.50"></text></g><g><title>regex_automata::util::alphabet::ByteClasses::get_by_unit (3,895,425 samples, 0.04%)</title><rect x="42.1763%" y="453" width="0.0450%" height="15" fill="rgb(222,29,6)" fg:x="3651870495" fg:w="3895425"/><text x="42.4263%" y="463.50"></text></g><g><title>regex_automata::util::alphabet::ByteClasses::get (3,565,788 samples, 0.04%)</title><rect x="42.1801%" y="437" width="0.0412%" height="15" fill="rgb(221,189,43)" fg:x="3652200132" fg:w="3565788"/><text x="42.4301%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (1,412,219 samples, 0.02%)</title><rect x="42.2315%" y="453" width="0.0163%" height="15" fill="rgb(207,36,27)" fg:x="3656651361" fg:w="1412219"/><text x="42.4815%" y="463.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::run::_{{closure}} (1,412,219 samples, 0.02%)</title><rect x="42.2315%" y="437" width="0.0163%" height="15" fill="rgb(217,90,24)" fg:x="3656651361" fg:w="1412219"/><text x="42.4815%" y="447.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (1,412,219 samples, 0.02%)</title><rect x="42.2315%" y="421" width="0.0163%" height="15" fill="rgb(224,66,35)" fg:x="3656651361" fg:w="1412219"/><text x="42.4815%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::determinize::state::State&gt; (2,615,051 samples, 0.03%)</title><rect x="42.2478%" y="453" width="0.0302%" height="15" fill="rgb(221,13,50)" fg:x="3658063580" fg:w="2615051"/><text x="42.4978%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (2,615,051 samples, 0.03%)</title><rect x="42.2478%" y="437" width="0.0302%" height="15" fill="rgb(236,68,49)" fg:x="3658063580" fg:w="2615051"/><text x="42.4978%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,615,051 samples, 0.03%)</title><rect x="42.2478%" y="421" width="0.0302%" height="15" fill="rgb(229,146,28)" fg:x="3658063580" fg:w="2615051"/><text x="42.4978%" y="431.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,938,663 samples, 0.02%)</title><rect x="42.2556%" y="405" width="0.0224%" height="15" fill="rgb(225,31,38)" fg:x="3658739968" fg:w="1938663"/><text x="42.5056%" y="415.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::cached_state (7,859,428 samples, 0.09%)</title><rect x="42.2780%" y="453" width="0.0908%" height="15" fill="rgb(250,208,3)" fg:x="3660678631" fg:w="7859428"/><text x="42.5280%" y="463.50"></text></g><g><title>regex_automata::dfa::dense::DFA&lt;T&gt;::to_index (2,059,156 samples, 0.02%)</title><rect x="42.3450%" y="437" width="0.0238%" height="15" fill="rgb(246,54,23)" fg:x="3666478903" fg:w="2059156"/><text x="42.5950%" y="447.50"></text></g><g><title>regex_automata::dfa::dense::TransitionTable&lt;T&gt;::to_index (2,059,156 samples, 0.02%)</title><rect x="42.3450%" y="421" width="0.0238%" height="15" fill="rgb(243,76,11)" fg:x="3666478903" fg:w="2059156"/><text x="42.5950%" y="431.50"></text></g><g><title>regex_automata::util::determinize::state::State::match_pattern_ids (1,031,843 samples, 0.01%)</title><rect x="42.3688%" y="453" width="0.0119%" height="15" fill="rgb(245,21,50)" fg:x="3668538059" fg:w="1031843"/><text x="42.6188%" y="463.50"></text></g><g><title>_ZN14regex_automata4util11determinize5state4Repr17match_pattern_ids17h4c7181cbbbbe9f7fE.llvm.14401177844003338871 (1,031,843 samples, 0.01%)</title><rect x="42.3688%" y="437" width="0.0119%" height="15" fill="rgb(228,9,43)" fg:x="3668538059" fg:w="1031843"/><text x="42.6188%" y="447.50"></text></g><g><title>regex_automata::dfa::determinize::Config::run (19,792,211 samples, 0.23%)</title><rect x="42.2221%" y="485" width="0.2286%" height="15" fill="rgb(208,100,47)" fg:x="3655840473" fg:w="19792211"/><text x="42.4721%" y="495.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::run (19,792,211 samples, 0.23%)</title><rect x="42.2221%" y="469" width="0.2286%" height="15" fill="rgb(232,26,8)" fg:x="3655840473" fg:w="19792211"/><text x="42.4721%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::clear (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="453" width="0.0700%" height="15" fill="rgb(216,166,38)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::clear (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="437" width="0.0700%" height="15" fill="rgb(251,202,51)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="421" width="0.0700%" height="15" fill="rgb(254,216,34)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="405" width="0.0700%" height="15" fill="rgb(251,32,27)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="389" width="0.0700%" height="15" fill="rgb(208,127,28)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="373" width="0.0700%" height="15" fill="rgb(224,137,22)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(regex_automata::util::determinize::state::State,regex_automata::util::primitives::StateID)&gt; (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="357" width="0.0700%" height="15" fill="rgb(254,70,32)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::determinize::state::State&gt; (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="341" width="0.0700%" height="15" fill="rgb(229,75,37)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="325" width="0.0700%" height="15" fill="rgb(252,64,23)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,062,782 samples, 0.07%)</title><rect x="42.3807%" y="309" width="0.0700%" height="15" fill="rgb(232,162,48)" fg:x="3669569902" fg:w="6062782"/><text x="42.6307%" y="319.50"></text></g><g><title>regex_automata::dfa::determinize::Runner::maybe_add_state (3,385,134 samples, 0.04%)</title><rect x="42.4507%" y="485" width="0.0391%" height="15" fill="rgb(246,160,12)" fg:x="3675632684" fg:w="3385134"/><text x="42.7007%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,858,579 samples, 0.02%)</title><rect x="42.5001%" y="405" width="0.0215%" height="15" fill="rgb(247,166,0)" fg:x="3679912198" fg:w="1858579"/><text x="42.7501%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,858,579 samples, 0.02%)</title><rect x="42.5001%" y="389" width="0.0215%" height="15" fill="rgb(249,219,21)" fg:x="3679912198" fg:w="1858579"/><text x="42.7501%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,858,579 samples, 0.02%)</title><rect x="42.5001%" y="373" width="0.0215%" height="15" fill="rgb(205,209,3)" fg:x="3679912198" fg:w="1858579"/><text x="42.7501%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,858,579 samples, 0.02%)</title><rect x="42.5001%" y="357" width="0.0215%" height="15" fill="rgb(243,44,1)" fg:x="3679912198" fg:w="1858579"/><text x="42.7501%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,805,895 samples, 0.02%)</title><rect x="42.5007%" y="341" width="0.0209%" height="15" fill="rgb(206,159,16)" fg:x="3679964882" fg:w="1805895"/><text x="42.7507%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,805,895 samples, 0.02%)</title><rect x="42.5007%" y="325" width="0.0209%" height="15" fill="rgb(244,77,30)" fg:x="3679964882" fg:w="1805895"/><text x="42.7507%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1,805,895 samples, 0.02%)</title><rect x="42.5007%" y="309" width="0.0209%" height="15" fill="rgb(218,69,12)" fg:x="3679964882" fg:w="1805895"/><text x="42.7507%" y="319.50"></text></g><g><title>malloc (1,805,895 samples, 0.02%)</title><rect x="42.5007%" y="293" width="0.0209%" height="15" fill="rgb(212,87,7)" fg:x="3679964882" fg:w="1805895"/><text x="42.7507%" y="303.50"></text></g><g><title>_int_malloc (1,622,026 samples, 0.02%)</title><rect x="42.5029%" y="277" width="0.0187%" height="15" fill="rgb(245,114,25)" fg:x="3680148751" fg:w="1622026"/><text x="42.7529%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,132,340 samples, 0.04%)</title><rect x="42.5001%" y="469" width="0.0362%" height="15" fill="rgb(210,61,42)" fg:x="3679912198" fg:w="3132340"/><text x="42.7501%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,132,340 samples, 0.04%)</title><rect x="42.5001%" y="453" width="0.0362%" height="15" fill="rgb(211,52,33)" fg:x="3679912198" fg:w="3132340"/><text x="42.7501%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (3,132,340 samples, 0.04%)</title><rect x="42.5001%" y="437" width="0.0362%" height="15" fill="rgb(234,58,33)" fg:x="3679912198" fg:w="3132340"/><text x="42.7501%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,132,340 samples, 0.04%)</title><rect x="42.5001%" y="421" width="0.0362%" height="15" fill="rgb(220,115,36)" fg:x="3679912198" fg:w="3132340"/><text x="42.7501%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,273,761 samples, 0.01%)</title><rect x="42.5216%" y="405" width="0.0147%" height="15" fill="rgb(243,153,54)" fg:x="3681770777" fg:w="1273761"/><text x="42.7716%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,273,761 samples, 0.01%)</title><rect x="42.5216%" y="389" width="0.0147%" height="15" fill="rgb(251,47,18)" fg:x="3681770777" fg:w="1273761"/><text x="42.7716%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3,550,647 samples, 0.04%)</title><rect x="42.4968%" y="485" width="0.0410%" height="15" fill="rgb(242,102,42)" fg:x="3679621259" fg:w="3550647"/><text x="42.7468%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::utf8::Utf8Sequences&gt; (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="437" width="0.0162%" height="15" fill="rgb(234,31,38)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::utf8::ScalarRange&gt;&gt; (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="421" width="0.0162%" height="15" fill="rgb(221,117,51)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::utf8::ScalarRange&gt;&gt; (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="405" width="0.0162%" height="15" fill="rgb(212,20,18)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="389" width="0.0162%" height="15" fill="rgb(245,133,36)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="373" width="0.0162%" height="15" fill="rgb(212,6,19)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="357" width="0.0162%" height="15" fill="rgb(218,1,36)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="341" width="0.0162%" height="15" fill="rgb(246,84,54)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,402,741 samples, 0.02%)</title><rect x="42.5891%" y="325" width="0.0162%" height="15" fill="rgb(242,110,6)" fg:x="3687614707" fg:w="1402741"/><text x="42.8391%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (5,974,367 samples, 0.07%)</title><rect x="42.5378%" y="485" width="0.0690%" height="15" fill="rgb(214,47,5)" fg:x="3683171906" fg:w="5974367"/><text x="42.7878%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,974,367 samples, 0.07%)</title><rect x="42.5378%" y="469" width="0.0690%" height="15" fill="rgb(218,159,25)" fg:x="3683171906" fg:w="5974367"/><text x="42.7878%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (5,974,367 samples, 0.07%)</title><rect x="42.5378%" y="453" width="0.0690%" height="15" fill="rgb(215,211,28)" fg:x="3683171906" fg:w="5974367"/><text x="42.7878%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (1,088,351 samples, 0.01%)</title><rect x="42.6191%" y="469" width="0.0126%" height="15" fill="rgb(238,59,32)" fg:x="3690211851" fg:w="1088351"/><text x="42.8691%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,088,351 samples, 0.01%)</title><rect x="42.6191%" y="453" width="0.0126%" height="15" fill="rgb(226,82,3)" fg:x="3690211851" fg:w="1088351"/><text x="42.8691%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,088,351 samples, 0.01%)</title><rect x="42.6191%" y="437" width="0.0126%" height="15" fill="rgb(240,164,32)" fg:x="3690211851" fg:w="1088351"/><text x="42.8691%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,088,351 samples, 0.01%)</title><rect x="42.6191%" y="421" width="0.0126%" height="15" fill="rgb(232,46,7)" fg:x="3690211851" fg:w="1088351"/><text x="42.8691%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2,885,497 samples, 0.03%)</title><rect x="42.6073%" y="485" width="0.0333%" height="15" fill="rgb(229,129,53)" fg:x="3689191462" fg:w="2885497"/><text x="42.8573%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2,372,575 samples, 0.03%)</title><rect x="42.6439%" y="485" width="0.0274%" height="15" fill="rgb(234,188,29)" fg:x="3692359577" fg:w="2372575"/><text x="42.8939%" y="495.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::set_range (1,258,816 samples, 0.01%)</title><rect x="42.6857%" y="469" width="0.0145%" height="15" fill="rgb(246,141,4)" fg:x="3695976891" fg:w="1258816"/><text x="42.9357%" y="479.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::add (1,182,899 samples, 0.01%)</title><rect x="42.6865%" y="453" width="0.0137%" height="15" fill="rgb(229,23,39)" fg:x="3696052808" fg:w="1182899"/><text x="42.9365%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2,537,089 samples, 0.03%)</title><rect x="42.6715%" y="485" width="0.0293%" height="15" fill="rgb(206,12,3)" fg:x="3694748235" fg:w="2537089"/><text x="42.9215%" y="495.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (10,849,472 samples, 0.13%)</title><rect x="42.7013%" y="485" width="0.1253%" height="15" fill="rgb(252,226,20)" fg:x="3697327408" fg:w="10849472"/><text x="42.9513%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2,809,486 samples, 0.03%)</title><rect x="44.1067%" y="469" width="0.0324%" height="15" fill="rgb(216,123,35)" fg:x="3819016705" fg:w="2809486"/><text x="44.3567%" y="479.50"></text></g><g><title>core::ptr::read (1,507,927 samples, 0.02%)</title><rect x="44.1217%" y="453" width="0.0174%" height="15" fill="rgb(212,68,40)" fg:x="3820318264" fg:w="1507927"/><text x="44.3717%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,686,688 samples, 0.03%)</title><rect x="44.1391%" y="469" width="0.0310%" height="15" fill="rgb(254,125,32)" fg:x="3821826191" fg:w="2686688"/><text x="44.3891%" y="479.50"></text></g><g><title>core::ptr::write (2,686,688 samples, 0.03%)</title><rect x="44.1391%" y="453" width="0.0310%" height="15" fill="rgb(253,97,22)" fg:x="3821826191" fg:w="2686688"/><text x="44.3891%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::states (8,924,616 samples, 0.10%)</title><rect x="44.1702%" y="453" width="0.1031%" height="15" fill="rgb(241,101,14)" fg:x="3824512879" fg:w="8924616"/><text x="44.4202%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8,542,794 samples, 0.10%)</title><rect x="44.1746%" y="437" width="0.0987%" height="15" fill="rgb(238,103,29)" fg:x="3824894701" fg:w="8542794"/><text x="44.4246%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (8,542,794 samples, 0.10%)</title><rect x="44.1746%" y="421" width="0.0987%" height="15" fill="rgb(233,195,47)" fg:x="3824894701" fg:w="8542794"/><text x="44.4246%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (17,086,930 samples, 0.20%)</title><rect x="44.1702%" y="469" width="0.1973%" height="15" fill="rgb(246,218,30)" fg:x="3824512879" fg:w="17086930"/><text x="44.4202%" y="479.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for [T]&gt;::index (8,162,314 samples, 0.09%)</title><rect x="44.2732%" y="453" width="0.0943%" height="15" fill="rgb(219,145,47)" fg:x="3833437495" fg:w="8162314"/><text x="44.5232%" y="463.50"></text></g><g><title>regex_automata::util::primitives::StateID::as_usize (4,334,432 samples, 0.05%)</title><rect x="44.3174%" y="437" width="0.0501%" height="15" fill="rgb(243,12,26)" fg:x="3837265377" fg:w="4334432"/><text x="44.5674%" y="447.50"></text></g><g><title>regex_automata::util::primitives::SmallIndex::as_usize (4,334,432 samples, 0.05%)</title><rect x="44.3174%" y="421" width="0.0501%" height="15" fill="rgb(214,87,16)" fg:x="3837265377" fg:w="4334432"/><text x="44.5674%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::State::is_epsilon (88,651,077 samples, 1.02%)</title><rect x="44.3675%" y="469" width="1.0239%" height="15" fill="rgb(208,99,42)" fg:x="3841599809" fg:w="88651077"/><text x="44.6175%" y="479.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (222,851,654 samples, 2.57%)</title><rect x="42.8266%" y="485" width="2.5738%" height="15" fill="rgb(253,99,2)" fg:x="3708176880" fg:w="222851654"/><text x="43.0766%" y="495.50">re..</text></g><g><title>&lt;regex_automata::util::sparse_set::SparseSetIter as core::iter::traits::iterator::Iterator&gt;::next (6,341,099 samples, 0.07%)</title><rect x="57.7634%" y="469" width="0.0732%" height="15" fill="rgb(220,168,23)" fg:x="5001496642" fg:w="6341099"/><text x="58.0134%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6,144,778 samples, 0.07%)</title><rect x="57.7657%" y="453" width="0.0710%" height="15" fill="rgb(242,38,24)" fg:x="5001692963" fg:w="6144778"/><text x="58.0157%" y="463.50"></text></g><g><title>&lt;regex_automata::util::sparse_set::SparseSetIter as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (6,144,778 samples, 0.07%)</title><rect x="57.7657%" y="437" width="0.0710%" height="15" fill="rgb(225,182,9)" fg:x="5001692963" fg:w="6144778"/><text x="58.0157%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::states (57,252,373 samples, 0.66%)</title><rect x="57.8402%" y="453" width="0.6612%" height="15" fill="rgb(243,178,37)" fg:x="5008142628" fg:w="57252373"/><text x="58.0902%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (57,252,373 samples, 0.66%)</title><rect x="57.8402%" y="437" width="0.6612%" height="15" fill="rgb(232,139,19)" fg:x="5008142628" fg:w="57252373"/><text x="58.0902%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (57,252,373 samples, 0.66%)</title><rect x="57.8402%" y="421" width="0.6612%" height="15" fill="rgb(225,201,24)" fg:x="5008142628" fg:w="57252373"/><text x="58.0902%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (18,095,821 samples, 0.21%)</title><rect x="58.2924%" y="405" width="0.2090%" height="15" fill="rgb(221,47,46)" fg:x="5047299180" fg:w="18095821"/><text x="58.5424%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18,095,821 samples, 0.21%)</title><rect x="58.2924%" y="389" width="0.2090%" height="15" fill="rgb(249,23,13)" fg:x="5047299180" fg:w="18095821"/><text x="58.5424%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (18,095,821 samples, 0.21%)</title><rect x="58.2924%" y="373" width="0.2090%" height="15" fill="rgb(219,9,5)" fg:x="5047299180" fg:w="18095821"/><text x="58.5424%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (18,095,821 samples, 0.21%)</title><rect x="58.2924%" y="357" width="0.2090%" height="15" fill="rgb(254,171,16)" fg:x="5047299180" fg:w="18095821"/><text x="58.5424%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::state (154,592,049 samples, 1.79%)</title><rect x="57.8402%" y="469" width="1.7854%" height="15" fill="rgb(230,171,20)" fg:x="5008142628" fg:w="154592049"/><text x="58.0902%" y="479.50">r..</text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for [T]&gt;::index (97,339,676 samples, 1.12%)</title><rect x="58.5014%" y="453" width="1.1242%" height="15" fill="rgb(210,71,41)" fg:x="5065395001" fg:w="97339676"/><text x="58.7514%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (421,592,417 samples, 4.87%)</title><rect x="71.4723%" y="405" width="4.8691%" height="15" fill="rgb(206,173,20)" fg:x="6188497214" fg:w="421592417"/><text x="71.7223%" y="415.50">&lt;core:..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (340,972,883 samples, 3.94%)</title><rect x="72.4034%" y="389" width="3.9380%" height="15" fill="rgb(233,88,34)" fg:x="6269116748" fg:w="340972883"/><text x="72.6534%" y="399.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_unit (1,598,871,749 samples, 18.47%)</title><rect x="59.6256%" y="469" width="18.4657%" height="15" fill="rgb(223,209,46)" fg:x="5162734677" fg:w="1598871749"/><text x="59.8756%" y="479.50">regex_automata::nfa::thompson..</text></g><g><title>core::option::Option&lt;T&gt;::map_or (1,588,952,096 samples, 18.35%)</title><rect x="59.7402%" y="453" width="18.3512%" height="15" fill="rgb(250,43,18)" fg:x="5172654330" fg:w="1588952096"/><text x="59.9902%" y="463.50">core::option::Option&lt;T&gt;::map_..</text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_unit::_{{closure}} (1,368,182,779 samples, 15.80%)</title><rect x="62.2899%" y="437" width="15.8015%" height="15" fill="rgb(208,13,10)" fg:x="5393423647" fg:w="1368182779"/><text x="62.5399%" y="447.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches_byte (1,368,182,779 samples, 15.80%)</title><rect x="62.2899%" y="421" width="15.8015%" height="15" fill="rgb(212,200,36)" fg:x="5393423647" fg:w="1368182779"/><text x="62.5399%" y="431.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::nfa::Transition::matches_byte (151,472,071 samples, 1.75%)</title><rect x="76.3419%" y="405" width="1.7494%" height="15" fill="rgb(225,90,30)" fg:x="6610134355" fg:w="151472071"/><text x="76.5919%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Transition::matches_unit (66,858,058 samples, 0.77%)</title><rect x="78.0913%" y="469" width="0.7722%" height="15" fill="rgb(236,182,39)" fg:x="6761606426" fg:w="66858058"/><text x="78.3413%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (66,858,058 samples, 0.77%)</title><rect x="78.0913%" y="453" width="0.7722%" height="15" fill="rgb(212,144,35)" fg:x="6761606426" fg:w="66858058"/><text x="78.3413%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (76,561,605 samples, 0.88%)</title><rect x="80.1542%" y="437" width="0.8842%" height="15" fill="rgb(228,63,44)" fg:x="6940218693" fg:w="76561605"/><text x="80.4042%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (76,561,605 samples, 0.88%)</title><rect x="80.1542%" y="421" width="0.8842%" height="15" fill="rgb(228,109,6)" fg:x="6940218693" fg:w="76561605"/><text x="80.4042%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,665,181 samples, 0.11%)</title><rect x="80.9268%" y="405" width="0.1116%" height="15" fill="rgb(238,117,24)" fg:x="7007115117" fg:w="9665181"/><text x="81.1768%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,665,181 samples, 0.11%)</title><rect x="80.9268%" y="389" width="0.1116%" height="15" fill="rgb(242,26,26)" fg:x="7007115117" fg:w="9665181"/><text x="81.1768%" y="399.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (9,665,181 samples, 0.11%)</title><rect x="80.9268%" y="373" width="0.1116%" height="15" fill="rgb(221,92,48)" fg:x="7007115117" fg:w="9665181"/><text x="81.1768%" y="383.50"></text></g><g><title>core::slice::index::get_noubcheck (9,665,181 samples, 0.11%)</title><rect x="80.9268%" y="357" width="0.1116%" height="15" fill="rgb(209,209,32)" fg:x="7007115117" fg:w="9665181"/><text x="81.1768%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next::_{{closure}} (972,849,254 samples, 11.24%)</title><rect x="81.0384%" y="437" width="11.2357%" height="15" fill="rgb(221,70,22)" fg:x="7016780298" fg:w="972849254"/><text x="81.2884%" y="447.50">regex_automata::u..</text></g><g><title>regex_automata::util::sparse_set::SparseSet::insert (972,849,254 samples, 11.24%)</title><rect x="81.0384%" y="421" width="11.2357%" height="15" fill="rgb(248,145,5)" fg:x="7016780298" fg:w="972849254"/><text x="81.2884%" y="431.50">regex_automata::u..</text></g><g><title>regex_automata::util::sparse_set::SparseSet::contains (811,158,633 samples, 9.37%)</title><rect x="82.9058%" y="405" width="9.3683%" height="15" fill="rgb(226,116,26)" fg:x="7178470919" fg:w="811158633"/><text x="83.1558%" y="415.50">regex_automat..</text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for alloc::vec::Vec&lt;T&gt;&gt;::index (103,291,483 samples, 1.19%)</title><rect x="91.0811%" y="389" width="1.1929%" height="15" fill="rgb(244,5,17)" fg:x="7886338069" fg:w="103291483"/><text x="91.3311%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (103,291,483 samples, 1.19%)</title><rect x="91.0811%" y="373" width="1.1929%" height="15" fill="rgb(252,159,33)" fg:x="7886338069" fg:w="103291483"/><text x="91.3311%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (103,291,483 samples, 1.19%)</title><rect x="91.0811%" y="357" width="1.1929%" height="15" fill="rgb(206,71,0)" fg:x="7886338069" fg:w="103291483"/><text x="91.3311%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (103,291,483 samples, 1.19%)</title><rect x="91.0811%" y="341" width="1.1929%" height="15" fill="rgb(233,118,54)" fg:x="7886338069" fg:w="103291483"/><text x="91.3311%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (103,115,419 samples, 1.19%)</title><rect x="96.1603%" y="405" width="1.1909%" height="15" fill="rgb(234,83,48)" fg:x="8326124355" fg:w="103115419"/><text x="96.4103%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (103,115,419 samples, 1.19%)</title><rect x="96.1603%" y="389" width="1.1909%" height="15" fill="rgb(228,3,54)" fg:x="8326124355" fg:w="103115419"/><text x="96.4103%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (76,249,997 samples, 0.88%)</title><rect x="96.4706%" y="373" width="0.8806%" height="15" fill="rgb(226,155,13)" fg:x="8352989777" fg:w="76249997"/><text x="96.7206%" y="383.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1,600,821,616 samples, 18.49%)</title><rect x="78.8635%" y="469" width="18.4882%" height="15" fill="rgb(241,28,37)" fg:x="6828464484" fg:w="1600821616"/><text x="79.1135%" y="479.50">regex_automata::util::determi..</text></g><g><title>regex_automata::util::determinize::state::Repr::iter_nfa_state_ids (1,600,821,616 samples, 18.49%)</title><rect x="78.8635%" y="453" width="18.4882%" height="15" fill="rgb(233,93,10)" fg:x="6828464484" fg:w="1600821616"/><text x="79.1135%" y="463.50">regex_automata::util::determi..</text></g><g><title>regex_automata::util::determinize::state::read_vari32 (439,656,548 samples, 5.08%)</title><rect x="92.2740%" y="437" width="5.0777%" height="15" fill="rgb(225,113,19)" fg:x="7989629552" fg:w="439656548"/><text x="92.5240%" y="447.50">regex_..</text></g><g><title>regex_automata::util::determinize::state::read_varu32 (369,136,147 samples, 4.26%)</title><rect x="93.0885%" y="421" width="4.2632%" height="15" fill="rgb(241,2,18)" fg:x="8060149953" fg:w="369136147"/><text x="93.3385%" y="431.50">regex..</text></g><g><title>regex_automata::util::determinize::state::State::look_need (3,382,251 samples, 0.04%)</title><rect x="97.3517%" y="469" width="0.0391%" height="15" fill="rgb(228,207,21)" fg:x="8429286100" fg:w="3382251"/><text x="97.6017%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::look_need (3,382,251 samples, 0.04%)</title><rect x="97.3517%" y="453" width="0.0391%" height="15" fill="rgb(213,211,35)" fg:x="8429286100" fg:w="3382251"/><text x="97.6017%" y="463.50"></text></g><g><title>regex_automata::util::look::LookSet::read_repr (3,382,251 samples, 0.04%)</title><rect x="97.3517%" y="437" width="0.0391%" height="15" fill="rgb(209,83,10)" fg:x="8429286100" fg:w="3382251"/><text x="97.6017%" y="447.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3,382,251 samples, 0.04%)</title><rect x="97.3517%" y="421" width="0.0391%" height="15" fill="rgb(209,164,1)" fg:x="8429286100" fg:w="3382251"/><text x="97.6017%" y="431.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (3,382,251 samples, 0.04%)</title><rect x="97.3517%" y="405" width="0.0391%" height="15" fill="rgb(213,184,43)" fg:x="8429286100" fg:w="3382251"/><text x="97.6017%" y="415.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (3,382,251 samples, 0.04%)</title><rect x="97.3517%" y="389" width="0.0391%" height="15" fill="rgb(231,61,34)" fg:x="8429286100" fg:w="3382251"/><text x="97.6017%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (45,790,952 samples, 0.53%)</title><rect x="97.3911%" y="405" width="0.5289%" height="15" fill="rgb(235,75,3)" fg:x="8432697981" fg:w="45790952"/><text x="97.6411%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (45,790,952 samples, 0.53%)</title><rect x="97.3911%" y="389" width="0.5289%" height="15" fill="rgb(220,106,47)" fg:x="8432697981" fg:w="45790952"/><text x="97.6411%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (45,790,952 samples, 0.53%)</title><rect x="97.3911%" y="373" width="0.5289%" height="15" fill="rgb(210,196,33)" fg:x="8432697981" fg:w="45790952"/><text x="97.6411%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (37,671,792 samples, 0.44%)</title><rect x="97.4849%" y="357" width="0.4351%" height="15" fill="rgb(229,154,42)" fg:x="8440817141" fg:w="37671792"/><text x="97.7349%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (37,271,785 samples, 0.43%)</title><rect x="97.4895%" y="341" width="0.4305%" height="15" fill="rgb(228,114,26)" fg:x="8441217148" fg:w="37271785"/><text x="97.7395%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderEmpty::into_matches (85,987,842 samples, 0.99%)</title><rect x="97.3908%" y="469" width="0.9931%" height="15" fill="rgb(208,144,1)" fg:x="8432668351" fg:w="85987842"/><text x="97.6408%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (85,987,842 samples, 0.99%)</title><rect x="97.3908%" y="453" width="0.9931%" height="15" fill="rgb(239,112,37)" fg:x="8432668351" fg:w="85987842"/><text x="97.6408%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (85,987,842 samples, 0.99%)</title><rect x="97.3908%" y="437" width="0.9931%" height="15" fill="rgb(210,96,50)" fg:x="8432668351" fg:w="85987842"/><text x="97.6408%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (85,987,842 samples, 0.99%)</title><rect x="97.3908%" y="421" width="0.9931%" height="15" fill="rgb(222,178,2)" fg:x="8432668351" fg:w="85987842"/><text x="97.6408%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40,167,260 samples, 0.46%)</title><rect x="97.9200%" y="405" width="0.4639%" height="15" fill="rgb(226,74,18)" fg:x="8478488933" fg:w="40167260"/><text x="98.1700%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (45,204,531 samples, 0.52%)</title><rect x="98.3839%" y="437" width="0.5221%" height="15" fill="rgb(225,67,54)" fg:x="8518656193" fg:w="45204531"/><text x="98.6339%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (45,204,531 samples, 0.52%)</title><rect x="98.3839%" y="421" width="0.5221%" height="15" fill="rgb(251,92,32)" fg:x="8518656193" fg:w="45204531"/><text x="98.6339%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,646,576 samples, 0.02%)</title><rect x="98.8869%" y="405" width="0.0190%" height="15" fill="rgb(228,149,22)" fg:x="8562214148" fg:w="1646576"/><text x="99.1369%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,646,576 samples, 0.02%)</title><rect x="98.8869%" y="389" width="0.0190%" height="15" fill="rgb(243,54,13)" fg:x="8562214148" fg:w="1646576"/><text x="99.1369%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,646,576 samples, 0.02%)</title><rect x="98.8869%" y="373" width="0.0190%" height="15" fill="rgb(243,180,28)" fg:x="8562214148" fg:w="1646576"/><text x="99.1369%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,646,576 samples, 0.02%)</title><rect x="98.8869%" y="357" width="0.0190%" height="15" fill="rgb(208,167,24)" fg:x="8562214148" fg:w="1646576"/><text x="99.1369%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (80,400,172 samples, 0.93%)</title><rect x="98.3839%" y="453" width="0.9286%" height="15" fill="rgb(245,73,45)" fg:x="8518656193" fg:w="80400172"/><text x="98.6339%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (35,195,641 samples, 0.41%)</title><rect x="98.9060%" y="437" width="0.4065%" height="15" fill="rgb(237,203,48)" fg:x="8563860724" fg:w="35195641"/><text x="99.1560%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (35,195,641 samples, 0.41%)</title><rect x="98.9060%" y="421" width="0.4065%" height="15" fill="rgb(211,197,16)" fg:x="8563860724" fg:w="35195641"/><text x="99.1560%" y="431.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (24,663,496 samples, 0.28%)</title><rect x="99.3124%" y="437" width="0.2848%" height="15" fill="rgb(243,99,51)" fg:x="8599056365" fg:w="24663496"/><text x="99.5624%" y="447.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (24,663,496 samples, 0.28%)</title><rect x="99.3124%" y="421" width="0.2848%" height="15" fill="rgb(215,123,29)" fg:x="8599056365" fg:w="24663496"/><text x="99.5624%" y="431.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (24,663,496 samples, 0.28%)</title><rect x="99.3124%" y="405" width="0.2848%" height="15" fill="rgb(239,186,37)" fg:x="8599056365" fg:w="24663496"/><text x="99.5624%" y="415.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::look_have (110,794,288 samples, 1.28%)</title><rect x="98.3839%" y="469" width="1.2796%" height="15" fill="rgb(252,136,39)" fg:x="8518656193" fg:w="110794288"/><text x="98.6339%" y="479.50"></text></g><g><title>regex_automata::util::look::LookSet::read_repr (30,394,116 samples, 0.35%)</title><rect x="99.3124%" y="453" width="0.3510%" height="15" fill="rgb(223,213,32)" fg:x="8599056365" fg:w="30394116"/><text x="99.5624%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,730,620 samples, 0.07%)</title><rect x="99.5973%" y="437" width="0.0662%" height="15" fill="rgb(233,115,5)" fg:x="8623719861" fg:w="5730620"/><text x="99.8473%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,730,620 samples, 0.07%)</title><rect x="99.5973%" y="421" width="0.0662%" height="15" fill="rgb(207,226,44)" fg:x="8623719861" fg:w="5730620"/><text x="99.8473%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,730,620 samples, 0.07%)</title><rect x="99.5973%" y="405" width="0.0662%" height="15" fill="rgb(208,126,0)" fg:x="8623719861" fg:w="5730620"/><text x="99.8473%" y="415.50"></text></g><g><title>regex_automata::util::look::LookSet::contains_anchor_crlf (6,167,959 samples, 0.07%)</title><rect x="99.6635%" y="469" width="0.0712%" height="15" fill="rgb(244,66,21)" fg:x="8629450481" fg:w="6167959"/><text x="99.9135%" y="479.50"></text></g><g><title>regex_automata::util::determinize::next (4,704,639,925 samples, 54.33%)</title><rect x="45.4003%" y="485" width="54.3349%" height="15" fill="rgb(222,97,12)" fg:x="3931028534" fg:w="4704639925"/><text x="45.6503%" y="495.50">regex_automata::util::determinize::next</text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (20,993,447 samples, 0.24%)</title><rect x="99.7353%" y="485" width="0.2425%" height="15" fill="rgb(219,213,19)" fg:x="8635668459" fg:w="20993447"/><text x="99.9853%" y="495.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1,744,769 samples, 0.02%)</title><rect x="99.9791%" y="485" width="0.0202%" height="15" fill="rgb(252,169,30)" fg:x="8656781216" fg:w="1744769"/><text x="100.2291%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (1,418,573 samples, 0.02%)</title><rect x="99.9829%" y="469" width="0.0164%" height="15" fill="rgb(206,32,51)" fg:x="8657107412" fg:w="1418573"/><text x="100.2329%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,418,573 samples, 0.02%)</title><rect x="99.9829%" y="453" width="0.0164%" height="15" fill="rgb(250,172,42)" fg:x="8657107412" fg:w="1418573"/><text x="100.2329%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,418,573 samples, 0.02%)</title><rect x="99.9829%" y="437" width="0.0164%" height="15" fill="rgb(209,34,43)" fg:x="8657107412" fg:w="1418573"/><text x="100.2329%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1,418,573 samples, 0.02%)</title><rect x="99.9829%" y="421" width="0.0164%" height="15" fill="rgb(223,11,35)" fg:x="8657107412" fg:w="1418573"/><text x="100.2329%" y="431.50"></text></g><g><title>malloc (1,174,599 samples, 0.01%)</title><rect x="99.9857%" y="405" width="0.0136%" height="15" fill="rgb(251,219,26)" fg:x="8657351386" fg:w="1174599"/><text x="100.2357%" y="415.50"></text></g><g><title>all (8,658,589,320 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(231,119,3)" fg:x="0" fg:w="8658589320"/><text x="0.2500%" y="527.50"></text></g><g><title>regex-cli (8,658,589,320 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(216,97,11)" fg:x="0" fg:w="8658589320"/><text x="0.2500%" y="511.50">regex-cli</text></g></svg></svg>